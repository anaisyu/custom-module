import * as i0 from '@angular/core';
import { Injectable, signal, PLATFORM_ID, Inject, computed, Directive, Input, HostListener, Component, input, EventEmitter, Output, model, ViewChild, Pipe } from '@angular/core';
import { Subject, BehaviorSubject, of, filter, switchMap, map, zip, Subscription, finalize, combineLatest, throwError } from 'rxjs';
import { TranslateHttpLoader } from '@ngx-translate/http-loader';
import * as i1$1 from '@ngx-translate/core';
import * as i1 from '@angular/material/snack-bar';
import * as i1$2 from '@angular/common/http';
import { isPlatformBrowser, NgIf, AsyncPipe, CommonModule, NgForOf } from '@angular/common';
import * as i1$3 from '@angular/material/dialog';
import { MatDialogTitle, MatDialogContent, MatDialogActions, MatDialogClose, MatDialogModule } from '@angular/material/dialog';
import * as i5 from '@angular/material/button';
import { MatButtonModule } from '@angular/material/button';
import * as i4 from '@angular/forms';
import { FormsModule, ReactiveFormsModule, FormGroup, FormControl, Validators } from '@angular/forms';
import * as i3 from '@angular/material/input';
import { MatInputModule } from '@angular/material/input';
import * as i2 from '@angular/material/form-field';
import { MatFormFieldModule } from '@angular/material/form-field';
import * as i6 from '@angular/material/icon';
import { MatIconModule, MatIcon } from '@angular/material/icon';
import * as i1$4 from '@angular/router';
import { TitleStrategy } from '@angular/router';
import * as i1$5 from '@angular/platform-browser';
import * as i1$6 from '@angular/material/progress-spinner';
import { MatProgressSpinnerModule } from '@angular/material/progress-spinner';
import PhotoSwipeLightbox from 'photoswipe/lightbox';
import PhotoSwipe from 'photoswipe';
import Swiper from 'swiper/bundle';

class NotificationService {
    constructor(_snackBar) {
        this._snackBar = _snackBar;
        this._successMessage = new Subject();
        this._errorMessage = new Subject();
    }
    get successMessage() {
        return this._successMessage;
    }
    get errorMessage() {
        return this._errorMessage;
    }
    newMessage(message, snack = false) {
        if (snack) {
            this._snackBar.open(message, 'Fermer', { duration: 5000 });
        }
        this._successMessage.next(message);
    }
    newError(message, snack = false) {
        if (snack) {
            this._snackBar.open(message, 'Fermer', {
                duration: 60 * 1000,
                panelClass: 'error'
            });
        }
        this._errorMessage.next(message);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.10", ngImport: i0, type: NotificationService, deps: [{ token: i1.MatSnackBar }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "17.3.10", ngImport: i0, type: NotificationService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.10", ngImport: i0, type: NotificationService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: () => [{ type: i1.MatSnackBar }] });

class LocalStorageService {
    constructor(_platformId, keys = []) {
        this._platformId = _platformId;
        this.values = new Map([]);
        const localKeys = [TranslationClientService.COOKIE_NAME, ...keys];
        // init
        localKeys.forEach(key => {
            this.values.set(key, signal(null));
        });
        if (isPlatformBrowser(this._platformId)) {
            localKeys.forEach(key => {
                this.values.get(key)?.set(this.getFromStorage(key));
            });
            // Listen for changes to local storage
            window.addEventListener('storage', (event) => {
                if (event.storageArea === localStorage) {
                    console.log('new localstorage data');
                    localKeys.forEach(key => {
                        this.values.get(key)?.set(this.getFromStorage(key));
                    });
                }
            });
        }
    }
    getFromStorage(key) {
        if (isPlatformBrowser(this._platformId)) {
            const item = localStorage.getItem(key);
            if (item) {
                try {
                    const { value, expiry } = JSON.parse(item);
                    if (!expiry || new Date(expiry) > new Date()) {
                        return value;
                    }
                    else {
                        localStorage.removeItem(key); // Remove expired token
                    }
                }
                catch (e) {
                    console.error('Error parsing JSON from localStorage:', e);
                    localStorage.removeItem(key); // Remove corrupted item
                }
            }
        }
        return null;
    }
    setValue(key, value, expiresInMs = 1000 * 60 * 60 * 24) {
        if (isPlatformBrowser(this._platformId)) {
            const signalValue = this.values.get(key);
            if (value && value != signalValue()) {
                const expiry = new Date().getTime() + expiresInMs;
                localStorage.setItem(key, JSON.stringify({ value, expiry }));
                signalValue.set(value);
            }
            else if (!value) {
                localStorage.removeItem(key);
                signalValue.set(null);
            }
        }
    }
    getValue(key) {
        return this.values.get(key).asReadonly();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.10", ngImport: i0, type: LocalStorageService, deps: [{ token: PLATFORM_ID }, { token: 'LOCAL_STORAGE_KEYS' }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "17.3.10", ngImport: i0, type: LocalStorageService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.10", ngImport: i0, type: LocalStorageService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: () => [{ type: Object, decorators: [{
                    type: Inject,
                    args: [PLATFORM_ID]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: ['LOCAL_STORAGE_KEYS']
                }] }] });

class TranslationClientService {
    static { this.COOKIE_NAME = "site-text"; }
    constructor(service, notificationService, http, localStorageService, backendUrl) {
        this.service = service;
        this.notificationService = notificationService;
        this.http = http;
        this.localStorageService = localStorageService;
        this.backendUrl = backendUrl;
        this.editSubject = new BehaviorSubject(false);
        // Retrieve object from the cookie
        const objFromCookie = localStorageService.getValue(TranslationClientService.COOKIE_NAME);
        this.changes = computed(() => objFromCookie() ? JSON.parse(objFromCookie()) : {});
    }
    static merge(left, right) {
        if (typeof left !== 'object') {
            return right;
        }
        let res = Object.assign({}, left);
        for (const key of Object.keys(right)) {
            if (left[key]) {
                res[key] = this.merge(left[key], right[key]);
            }
            else {
                res[key] = right[key];
            }
        }
        return res;
    }
    next(key, data) {
        let set = this.changes();
        const keys = key.split('.');
        for (let i = 0; i < keys.length - 1; i++) {
            if (!set[keys[i]]) {
                set[keys[i]] = {};
            }
            set = set[keys[i]];
        }
        if (!set[keys[keys.length - 1]]) {
            set[keys[keys.length - 1]] = {};
        }
        set[keys[keys.length - 1]] = data;
        this.saveCookie();
    }
    save(lang = 'fr') {
        const loader = new TranslateHttpLoader(this.http, this.backendUrl + '/assets/get/');
        loader.getTranslation(lang).subscribe(original => {
            this.http.post(this.backendUrl + '/assets/save-new/' + lang, TranslationClientService.merge(original, this.changes())).subscribe({
                next: response => {
                    this.notificationService.newMessage('Vos modifications ont bien été sauvegardées.');
                    this.localStorageService.setValue(TranslationClientService.COOKIE_NAME, null);
                }, error: (msg) => {
                    console.error(msg);
                    this.notificationService.newError('Echec lors de la sauvegarde. Merci de réessayer.');
                }
            });
        });
    }
    cancel() {
        this.localStorageService.setValue(TranslationClientService.COOKIE_NAME, null);
        this.refresh();
    }
    refresh() {
        window.location.href = window.location.toString();
    }
    saveCookie(minutesExpire = 15) {
        if (!this.changes() || Object.keys(this.changes()).length == 0) {
            return;
        }
        const date = new Date(Date.now());
        date.setMinutes(date.getMinutes() + minutesExpire);
        this.localStorageService.setValue(TranslationClientService.COOKIE_NAME, JSON.stringify(this.changes()), minutesExpire * 60 * 1000);
    }
    streamTranslation(key) {
        let set = this.changes();
        const keys = key.split('.');
        for (let i = 0; i < keys.length - 1; i++) {
            if (!set[keys[i]]) {
                return this.service.stream(key);
            }
            set = set[keys[i]];
        }
        if (set[keys[keys.length - 1]]) {
            return of(set[keys[keys.length - 1]]);
        }
        return this.service.stream(key);
    }
    sync(lang = 'fr') {
        this.http.post(this.backendUrl + '/assets/sync/' + lang, {}).subscribe({
            next: response => {
                this.notificationService.newMessage('Synced');
            }, error: (msg) => {
                console.error(msg);
                this.notificationService.newError('Sync failed');
            }
        });
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.10", ngImport: i0, type: TranslationClientService, deps: [{ token: i1$1.TranslateService }, { token: NotificationService }, { token: i1$2.HttpClient }, { token: LocalStorageService }, { token: 'backendUrl' }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "17.3.10", ngImport: i0, type: TranslationClientService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.10", ngImport: i0, type: TranslationClientService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: () => [{ type: i1$1.TranslateService }, { type: NotificationService }, { type: i1$2.HttpClient }, { type: LocalStorageService }, { type: undefined, decorators: [{
                    type: Inject,
                    args: ['backendUrl']
                }] }] });

class DyTextEditorService {
    constructor() {
        this.displayEditorSubject = new BehaviorSubject(false);
        this.newEditorData = new Subject();
        this.editorDataChange = new Subject();
    }
    newChanges(key, value) {
        this.editorDataChange.next({ key: key, value: value });
    }
    addNewEditorData(key, value) {
        this.newEditorData.next({ key: key, value: value });
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.10", ngImport: i0, type: DyTextEditorService, deps: [], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "17.3.10", ngImport: i0, type: DyTextEditorService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.10", ngImport: i0, type: DyTextEditorService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: () => [] });

class DyTranslateDirective {
    constructor(el, renderer, clientService, dyTextEditorService) {
        this.el = el;
        this.renderer = renderer;
        this.clientService = clientService;
        this.dyTextEditorService = dyTextEditorService;
        this.editMode = false;
        this.previousValue = '';
    }
    ngOnInit() {
        const originalBorder = this.el.nativeElement.style.outline;
        this.renderer.listen(this.el.nativeElement, 'paste', (event) => {
            if (this.editMode) {
                event.preventDefault();
                const text = (event.clipboardData).getData('text');
                this.renderer.setProperty(this.el.nativeElement, 'innerText', this.el.nativeElement.innerText + text);
            }
        });
        this.clientService.editSubject.subscribe(editMode => {
            this.editMode = editMode;
            this.el.nativeElement.contentEditable = this.editMode;
            // Get the native element using ElementRef
            const element = this.el.nativeElement;
            // Check the condition and apply the dashed border if needed
            if (this.editMode) {
                element.style.outline = '1px dashed #a9a9a9';
            }
            else {
                element.style.outline = originalBorder;
            }
        });
    }
    addNewEditorData(value) {
        if (this.appDyTranslate.includes('editor')) {
            this.dyTextEditorService.addNewEditorData(this.appDyTranslate, value);
        }
    }
    onKeyup(event) {
        const value = this.el.nativeElement.innerHTML;
        if (value != this.previousValue) {
            this.previousValue = value;
            this.addNewEditorData(value);
            this.save(value);
        }
    }
    onClick() {
        if (this.editMode && this.appDyTranslate.includes('editor')) {
            this.dyTextEditorService.displayEditorSubject.next(true);
            setTimeout(() => {
                this.addNewEditorData(this.el.nativeElement.innerHTML);
            }, 50); // why this timeout?
        }
        else {
            this.dyTextEditorService.displayEditorSubject.next(false);
        }
    }
    save(value) {
        if (value) {
            this.clientService.next(this.appDyTranslate, value);
        }
    }
    ngAfterViewInit() {
        this.clientService.streamTranslation(this.appDyTranslate).subscribe(value => {
            if (value == this.appDyTranslate && this.el.nativeElement.innerHTML) {
                this.clientService.next(this.appDyTranslate, this.el.nativeElement.innerHTML);
            }
            else {
                this.el.nativeElement.innerHTML = value;
            }
            this.el.nativeElement.contentEditable = this.editMode;
        });
        if (this.appDyTranslate.includes('editor')) {
            this.dyTextEditorService.editorDataChange.subscribe((newValue) => {
                if (newValue.key == this.appDyTranslate) {
                    if (newValue.value != this.previousValue) {
                        this.previousValue = newValue.value;
                        this.el.nativeElement.innerHTML = newValue.value;
                        this.save(newValue.value);
                    }
                }
            });
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.10", ngImport: i0, type: DyTranslateDirective, deps: [{ token: i0.ElementRef }, { token: i0.Renderer2 }, { token: TranslationClientService }, { token: DyTextEditorService }], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "17.3.10", type: DyTranslateDirective, isStandalone: true, selector: "[appDyTranslate]", inputs: { appDyTranslate: "appDyTranslate" }, host: { listeners: { "keyup": "onKeyup($event)", "click": "onClick()" } }, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.10", ngImport: i0, type: DyTranslateDirective, decorators: [{
            type: Directive,
            args: [{
                    standalone: true,
                    selector: '[appDyTranslate]'
                }]
        }], ctorParameters: () => [{ type: i0.ElementRef }, { type: i0.Renderer2 }, { type: TranslationClientService }, { type: DyTextEditorService }], propDecorators: { appDyTranslate: [{
                type: Input,
                args: [{ required: true }]
            }], onKeyup: [{
                type: HostListener,
                args: ['keyup', ['$event']]
            }], onClick: [{
                type: HostListener,
                args: ['click']
            }] } });

class UploadImageModalComponent {
    constructor(dialogRef) {
        this.dialogRef = dialogRef;
        this.imgAlt = '';
        this.file = undefined;
        this.preview = '';
    }
    onFileChanged(event) {
        this.file = event.target.files[0];
        this.preview = '';
        const reader = new FileReader();
        reader.onload = (e) => {
            console.log(e.target?.result);
            this.preview = e.target?.result;
        };
        reader.readAsDataURL(this.file);
    }
    onNoClick() {
        this.dialogRef.close();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.10", ngImport: i0, type: UploadImageModalComponent, deps: [{ token: i1$3.MatDialogRef }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "17.0.0", version: "17.3.10", type: UploadImageModalComponent, isStandalone: true, selector: "app-upload-image-modal", ngImport: i0, template: "<h1 mat-dialog-title>S\u00E9lectionner une image</h1>\n<div mat-dialog-content>\n  <div style=\"width: 600px\">\n    <div class=\"s300\">\n      <div class=\"row\">\n        <div class=\"col-12\" style=\"margin-bottom: 1rem\">\n          <button (click)=\"fileInput.click()\" class=\"mat-primary\" mat-raised-button>\n            <mat-icon aria-hidden=\"false\" aria-label=\"upload\" fontIcon=\"upload\"></mat-icon>\n            <span>S\u00E9lectionner une image</span>\n            <input #fileInput (change)=\"onFileChanged($event)\" required style=\"display:none;\" type=\"file\"/>\n          </button>\n        </div>\n        <div class=\"col-12\">\n          <mat-form-field>\n            <mat-label>Description de l'image</mat-label>\n            <input [(ngModel)]=\"imgAlt\" matInput required>\n          </mat-form-field>\n        </div>\n      </div>\n    </div>\n    <div class=\"s300\">\n      @if (preview) {\n        <img src=\"{{ preview }}\" alt=\"\" class=\"img-fluid\">\n      }\n    </div>\n  </div>\n</div>\n<div mat-dialog-actions>\n  <button (click)=\"onNoClick()\" mat-button>Annuler</button>\n  <button [disabled]=\"!imgAlt || !file\" [mat-dialog-close]=\"{alt: imgAlt, file: file}\" class=\"mat-accent\"\n          mat-raised-button>Ajouter\n  </button>\n</div>\n", styles: [".s300{display:inline-block;width:300px;vertical-align:middle}\n"], dependencies: [{ kind: "ngmodule", type: MatFormFieldModule }, { kind: "component", type: i2.MatFormField, selector: "mat-form-field", inputs: ["hideRequiredMarker", "color", "floatLabel", "appearance", "subscriptSizing", "hintLabel"], exportAs: ["matFormField"] }, { kind: "directive", type: i2.MatLabel, selector: "mat-label" }, { kind: "ngmodule", type: MatInputModule }, { kind: "directive", type: i3.MatInput, selector: "input[matInput], textarea[matInput], select[matNativeControl],      input[matNativeControl], textarea[matNativeControl]", inputs: ["disabled", "id", "placeholder", "name", "required", "type", "errorStateMatcher", "aria-describedby", "value", "readonly"], exportAs: ["matInput"] }, { kind: "ngmodule", type: FormsModule }, { kind: "directive", type: i4.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { kind: "directive", type: i4.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i4.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { kind: "directive", type: i4.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { kind: "ngmodule", type: MatButtonModule }, { kind: "component", type: i5.MatButton, selector: "    button[mat-button], button[mat-raised-button], button[mat-flat-button],    button[mat-stroked-button]  ", exportAs: ["matButton"] }, { kind: "directive", type: MatDialogTitle, selector: "[mat-dialog-title], [matDialogTitle]", inputs: ["id"], exportAs: ["matDialogTitle"] }, { kind: "directive", type: MatDialogContent, selector: "[mat-dialog-content], mat-dialog-content, [matDialogContent]" }, { kind: "directive", type: MatDialogActions, selector: "[mat-dialog-actions], mat-dialog-actions, [matDialogActions]", inputs: ["align"] }, { kind: "directive", type: MatDialogClose, selector: "[mat-dialog-close], [matDialogClose]", inputs: ["aria-label", "type", "mat-dialog-close", "matDialogClose"], exportAs: ["matDialogClose"] }, { kind: "ngmodule", type: ReactiveFormsModule }, { kind: "ngmodule", type: MatIconModule }, { kind: "component", type: i6.MatIcon, selector: "mat-icon", inputs: ["color", "inline", "svgIcon", "fontSet", "fontIcon"], exportAs: ["matIcon"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.10", ngImport: i0, type: UploadImageModalComponent, decorators: [{
            type: Component,
            args: [{ selector: 'app-upload-image-modal', standalone: true, imports: [
                        MatFormFieldModule,
                        MatInputModule,
                        FormsModule,
                        MatButtonModule,
                        MatDialogTitle,
                        MatDialogContent,
                        MatDialogActions,
                        MatDialogClose,
                        ReactiveFormsModule,
                        MatIconModule,
                    ], template: "<h1 mat-dialog-title>S\u00E9lectionner une image</h1>\n<div mat-dialog-content>\n  <div style=\"width: 600px\">\n    <div class=\"s300\">\n      <div class=\"row\">\n        <div class=\"col-12\" style=\"margin-bottom: 1rem\">\n          <button (click)=\"fileInput.click()\" class=\"mat-primary\" mat-raised-button>\n            <mat-icon aria-hidden=\"false\" aria-label=\"upload\" fontIcon=\"upload\"></mat-icon>\n            <span>S\u00E9lectionner une image</span>\n            <input #fileInput (change)=\"onFileChanged($event)\" required style=\"display:none;\" type=\"file\"/>\n          </button>\n        </div>\n        <div class=\"col-12\">\n          <mat-form-field>\n            <mat-label>Description de l'image</mat-label>\n            <input [(ngModel)]=\"imgAlt\" matInput required>\n          </mat-form-field>\n        </div>\n      </div>\n    </div>\n    <div class=\"s300\">\n      @if (preview) {\n        <img src=\"{{ preview }}\" alt=\"\" class=\"img-fluid\">\n      }\n    </div>\n  </div>\n</div>\n<div mat-dialog-actions>\n  <button (click)=\"onNoClick()\" mat-button>Annuler</button>\n  <button [disabled]=\"!imgAlt || !file\" [mat-dialog-close]=\"{alt: imgAlt, file: file}\" class=\"mat-accent\"\n          mat-raised-button>Ajouter\n  </button>\n</div>\n", styles: [".s300{display:inline-block;width:300px;vertical-align:middle}\n"] }]
        }], ctorParameters: () => [{ type: i1$3.MatDialogRef }] });

class ImageUploadService {
    constructor(dialog, http, imageUploadUrl) {
        this.dialog = dialog;
        this.http = http;
        this.imageUploadUrl = imageUploadUrl;
    }
    uploadImage(file) {
        const formData = new FormData();
        formData.append('file', file, file.name);
        return this.http.post(this.imageUploadUrl + '/uploads-v2/', formData);
    }
    openDialog() {
        const dialogRef = this.dialog.open(UploadImageModalComponent);
        return dialogRef.afterClosed().pipe(filter(result => result?.alt && result?.file), switchMap((result) => {
            return this.uploadImage(result.file).pipe(map(uploadResponse => { return { alt: result.alt, urls: uploadResponse }; }));
        }));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.10", ngImport: i0, type: ImageUploadService, deps: [{ token: i1$3.MatDialog }, { token: i1$2.HttpClient }, { token: 'imageupload_url' }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "17.3.10", ngImport: i0, type: ImageUploadService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.10", ngImport: i0, type: ImageUploadService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: () => [{ type: i1$3.MatDialog }, { type: i1$2.HttpClient }, { type: undefined, decorators: [{
                    type: Inject,
                    args: ['imageupload_url']
                }] }] });

class DyImageEditDirective {
    constructor(el, clientService, imageUploadService, backendUrl) {
        this.el = el;
        this.clientService = clientService;
        this.imageUploadService = imageUploadService;
        this.backendUrl = backendUrl;
        this.editMode = false;
    }
    onKeyup() {
        if (this.editMode) {
            this.imageUploadService.openDialog().subscribe(res => {
                this.changeImage(res.urls.originalUrl, res.alt);
                this.save(res.urls, res.alt);
            });
        }
    }
    save(response, alt) {
        if (response && alt) {
            this.clientService.next('images.' + this.libDyImageEdit + '.originalUrl', response.originalUrl);
            this.clientService.next('images.' + this.libDyImageEdit + '.thumbnailUrl', response.thumbnailUrl);
            response.compressedUrls.forEach((compressedUrl, index) => {
                this.clientService.next('images.' + this.libDyImageEdit + '.compressed.' + index + '.url', compressedUrl.url);
                this.clientService.next('images.' + this.libDyImageEdit + '.compressed.' + index + '.height', compressedUrl.height);
                this.clientService.next('images.' + this.libDyImageEdit + '.compressed.' + index + '.width', compressedUrl.width);
            });
            this.clientService.next('images.' + this.libDyImageEdit + '.alt', alt);
        }
    }
    ngOnInit() {
        const originalBorder = this.el.nativeElement.style.border;
        this.clientService.editSubject.subscribe(editMode => {
            this.editMode = editMode;
            // Get the native element using ElementRef
            const element = this.el.nativeElement;
            // Check the condition and apply the dashed border if needed
            if (this.editMode) {
                element.style.border = '2px dashed #a9a9a9';
            }
            else {
                element.style.border = originalBorder;
            }
        });
        const urlKey = 'images.' + this.libDyImageEdit + '.originalUrl';
        const altKey = 'images.' + this.libDyImageEdit + '.alt';
        const key1$ = this.clientService.streamTranslation(urlKey);
        const key2$ = this.clientService.streamTranslation(altKey);
        zip([key1$, key2$]).subscribe(([url, alt]) => {
            if (urlKey != url || altKey != alt) {
                this.changeImage(url, alt);
            }
            this.el.nativeElement.contentEditable = this.editMode;
        });
    }
    changeImage(url, alt) {
        this.el.nativeElement.src = url;
        this.el.nativeElement.alt = alt;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.10", ngImport: i0, type: DyImageEditDirective, deps: [{ token: i0.ElementRef }, { token: TranslationClientService }, { token: ImageUploadService }, { token: 'backendUrl' }], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "17.3.10", type: DyImageEditDirective, isStandalone: true, selector: "[libDyImageEdit]", inputs: { libDyImageEdit: "libDyImageEdit", src: "src" }, host: { listeners: { "click": "onKeyup()" } }, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.10", ngImport: i0, type: DyImageEditDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[libDyImageEdit]',
                    standalone: true
                }]
        }], ctorParameters: () => [{ type: i0.ElementRef }, { type: TranslationClientService }, { type: ImageUploadService }, { type: undefined, decorators: [{
                    type: Inject,
                    args: ['backendUrl']
                }] }], propDecorators: { libDyImageEdit: [{
                type: Input,
                args: [{ required: true }]
            }], src: [{
                type: Input,
                args: [{ required: true }]
            }], onKeyup: [{
                type: HostListener,
                args: ['click']
            }] } });

class DyTransitionDirective {
    constructor(elementRef, router, _platformId) {
        this.elementRef = elementRef;
        this.router = router;
        this._platformId = _platformId;
        this.subscription = new Subscription();
        this.dyTransition = input.required();
    }
    ngOnDestroy() {
        if (this.intervalId) {
            clearInterval(this.intervalId);
        }
        this.subscription.unsubscribe();
    }
    ngOnInit() {
        if (this.dyTransition() != 'none') {
            this.elementRef.nativeElement.style['view-transition-name'] = this.dyTransition();
        }
        // Listen to router events
        this.subscription.add(this.router.events.subscribe(event => {
            if (event) {
                this.checkVisibility();
            }
        }));
    }
    isElementInViewport(el) {
        const rect = el.getBoundingClientRect();
        const tolerance = 0.1; // 10% tolerance
        const windowHeight = window.innerHeight || document.documentElement.clientHeight;
        const windowWidth = window.innerWidth || document.documentElement.clientWidth;
        const topTolerance = tolerance * windowHeight;
        const leftTolerance = tolerance * windowWidth;
        return (rect.top >= -topTolerance &&
            rect.left >= -leftTolerance &&
            rect.bottom <= (1 + tolerance) * windowHeight &&
            rect.right <= (1 + tolerance) * windowWidth);
    }
    checkVisibility() {
        if (isPlatformBrowser(this._platformId)) {
            if (this.dyTransition() != 'none') {
                if (this.isElementInViewport(this.elementRef.nativeElement)) {
                    this.elementRef.nativeElement.style['view-transition-name'] = this.dyTransition();
                }
                else {
                    setTimeout(() => {
                        this.elementRef.nativeElement.style['view-transition-name'] = 'none';
                    }, 1);
                }
            }
        }
        else {
            if (this.dyTransition() != 'none') {
                this.elementRef.nativeElement.style['view-transition-name'] = this.dyTransition();
            }
        }
    }
    onScroll() {
        this.checkVisibility();
    }
    ngAfterViewInit() {
        this.checkVisibility(); // Initial check
        if (isPlatformBrowser(this._platformId)) {
            this.intervalId = setInterval(() => {
                this.checkVisibility();
            }, 500); // 500 milliseconds interval
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.10", ngImport: i0, type: DyTransitionDirective, deps: [{ token: i0.ElementRef }, { token: i1$4.Router }, { token: PLATFORM_ID }], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "17.1.0", version: "17.3.10", type: DyTransitionDirective, isStandalone: true, selector: "[dyTransition]", inputs: { dyTransition: { classPropertyName: "dyTransition", publicName: "dyTransition", isSignal: true, isRequired: true, transformFunction: null } }, host: { listeners: { "window:scroll": "onScroll($event)", "window:click": "onScroll($event)" } }, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.10", ngImport: i0, type: DyTransitionDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[dyTransition]',
                    standalone: true
                }]
        }], ctorParameters: () => [{ type: i0.ElementRef }, { type: i1$4.Router }, { type: Object, decorators: [{
                    type: Inject,
                    args: [PLATFORM_ID]
                }] }], propDecorators: { onScroll: [{
                type: HostListener,
                args: ['window:scroll', ['$event']]
            }, {
                type: HostListener,
                args: ['window:click', ['$event']]
            }] } });

class MyTitleStrategy extends TitleStrategy {
    constructor(title, translate, siteTitleBase) {
        super();
        this.title = title;
        this.translate = translate;
        this.siteTitleBase = siteTitleBase;
    }
    updateTitle(routerState) {
        const title = this.buildTitle(routerState);
        if (title !== undefined) {
            if (title.length > 0) {
                this.translate.stream(title).subscribe(res => {
                    this.title.setTitle(`${res} - ${this.siteTitleBase}`);
                });
            }
            else {
                this.title.setTitle(this.siteTitleBase);
            }
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.10", ngImport: i0, type: MyTitleStrategy, deps: [{ token: i1$5.Title }, { token: i1$1.TranslateService }, { token: 'siteTitleBase' }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "17.3.10", ngImport: i0, type: MyTitleStrategy }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.10", ngImport: i0, type: MyTitleStrategy, decorators: [{
            type: Injectable
        }], ctorParameters: () => [{ type: i1$5.Title }, { type: i1$1.TranslateService }, { type: undefined, decorators: [{
                    type: Inject,
                    args: ['siteTitleBase']
                }] }] });

class LoadingService {
    static { this.numberOfLoadingProcess = signal(0); }
    constructor() {
    }
    static startLoading() {
        LoadingService.numberOfLoadingProcess.set(LoadingService.numberOfLoadingProcess() + 1);
    }
    static stopLoading() {
        LoadingService.numberOfLoadingProcess.set(LoadingService.numberOfLoadingProcess() - 1);
        if (LoadingService.numberOfLoadingProcess() < 0) {
            console.error("LoadingService: negative number of loading processes");
        }
    }
    static isLoading() {
        return computed(() => { return LoadingService.numberOfLoadingProcess() != 0; });
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.10", ngImport: i0, type: LoadingService, deps: [], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "17.3.10", ngImport: i0, type: LoadingService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.10", ngImport: i0, type: LoadingService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: () => [] });

/** Pass untouched request through to the next request handler. */
class EnableCredentialsInterceptor {
    intercept(request, next) {
        request = request.clone({
            withCredentials: true
        });
        const isGraphQLQuery = request.body && request.body.operationName && request.body.query &&
            request.body.query.trim().startsWith('query');
        if (request.method != "GET" && !isGraphQLQuery) {
            LoadingService.startLoading();
        }
        return next.handle(request).pipe(finalize(() => {
            if (request.method != "GET" && !isGraphQLQuery) {
                LoadingService.stopLoading();
            }
        }));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.10", ngImport: i0, type: EnableCredentialsInterceptor, deps: [], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "17.3.10", ngImport: i0, type: EnableCredentialsInterceptor }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.10", ngImport: i0, type: EnableCredentialsInterceptor, decorators: [{
            type: Injectable
        }] });

class UserService {
    constructor(http, backendUrl, _platformId) {
        this.http = http;
        this.backendUrl = backendUrl;
        this._platformId = _platformId;
    }
    getUser() {
        return this.http.get(this.backendUrl + '/user', { transferCache: false }).pipe(map(x => {
            this.user = x;
            return x;
        }));
    }
    isAdmin() {
        return this.user ? this.hasAdminRole(this.user.roles) : this.backendUrl.includes('localhost');
    }
    isSuperAdmin() {
        return (this.user && this.user.email) ? (this.hasAdminRole(this.user.roles) && this.user.email.includes('dahn')) : false;
    }
    hasAdminRole(roles) {
        return roles.includes('ROLE_ADMIN') || this.backendUrl.includes('localhost');
    }
    isAdminOrRedirect() {
        if (isPlatformBrowser(this._platformId)) {
            this.getUser().subscribe({
                next: user => {
                    if (!this.hasAdminRole(user.roles)) {
                        window.location.href = this.backendUrl + "/login";
                    }
                },
                error: err => {
                    console.log(err);
                    if (!this.backendUrl.includes('localhost')) {
                        window.location.href = this.backendUrl + "/login";
                    }
                }
            });
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.10", ngImport: i0, type: UserService, deps: [{ token: i1$2.HttpClient }, { token: 'backendUrl' }, { token: PLATFORM_ID }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "17.3.10", ngImport: i0, type: UserService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.10", ngImport: i0, type: UserService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: () => [{ type: i1$2.HttpClient }, { type: undefined, decorators: [{
                    type: Inject,
                    args: ['backendUrl']
                }] }, { type: Object, decorators: [{
                    type: Inject,
                    args: [PLATFORM_ID]
                }] }] });

class SwipeManagerService {
    constructor() {
        this.swipeRight = new EventEmitter();
        this.swipeLeft = new EventEmitter();
        this.xDown = null;
        this.yDown = null;
        this.handleStart = (event) => {
            this.handleTouchStart(event);
        };
        this.handleMove = (event) => {
            this.handleTouchMove(event);
        };
        this.keyPress = (event) => {
            if (event.code == 'ArrowLeft') {
                this.left();
            }
            if (event.code == 'ArrowRight') {
                this.right();
            }
        };
    }
    getTouches(evt) {
        return evt.touches || // browser API
            evt.originalEvent.touches; // jQuery
    }
    handleTouchStart(evt) {
        const firstTouch = this.getTouches(evt)[0];
        this.xDown = firstTouch.clientX;
        this.yDown = firstTouch.clientY;
    }
    ;
    right() {
        console.log('right');
        this.swipeRight.emit();
    }
    left() {
        console.log('left');
        this.swipeLeft.emit();
    }
    handleTouchMove(evt) {
        if (!this.xDown || !this.yDown) {
            return;
        }
        const xUp = evt.touches[0].clientX;
        const yUp = evt.touches[0].clientY;
        const xDiff = this.xDown - xUp;
        const yDiff = this.yDown - yUp;
        if (Math.abs(xDiff) > Math.abs(yDiff)) { /*most significant*/
            if (xDiff > 0) {
                /* right swipe */
                this.right();
            }
            else {
                /* left swipe */
                this.left();
            }
        }
        else {
            if (yDiff > 0) {
                /* down swipe */
            }
            else {
                /* up swipe */
            }
        }
        /* reset values */
        this.xDown = null;
        this.yDown = null;
    }
    ;
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.10", ngImport: i0, type: SwipeManagerService, deps: [], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "17.3.10", ngImport: i0, type: SwipeManagerService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.10", ngImport: i0, type: SwipeManagerService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: () => [] });

class TitleService {
    constructor(title, siteTitleBase) {
        this.title = title;
        this.siteTitleBase = siteTitleBase;
    }
    setTitle(newTitle) {
        this.title.setTitle(newTitle);
    }
    appendToTitle(newTitle) {
        this.setTitle(this.title.getTitle() + ' - ' + newTitle);
    }
    appendToBaseTitle(newTitle) {
        this.setTitle(this.siteTitleBase + ' - ' + newTitle);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.10", ngImport: i0, type: TitleService, deps: [{ token: i1$5.Title }, { token: 'siteTitleBase' }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "17.3.10", ngImport: i0, type: TitleService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.10", ngImport: i0, type: TitleService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: () => [{ type: i1$5.Title }, { type: undefined, decorators: [{
                    type: Inject,
                    args: ['siteTitleBase']
                }] }] });

class DescriptionMetaService {
    constructor(meta) {
        this.meta = meta;
    }
    updateDescription(newDescription) {
        this.meta.updateTag({ name: 'description', content: newDescription });
    }
    appendToBaseDescription(desc) {
        // this.updateDescription($ loc alize `Anaïs ゆ - also called AnaïsYu - is a swiss artist and painter. ` + desc);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.10", ngImport: i0, type: DescriptionMetaService, deps: [{ token: i1$5.Meta }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "17.3.10", ngImport: i0, type: DescriptionMetaService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.10", ngImport: i0, type: DescriptionMetaService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: () => [{ type: i1$5.Meta }] });

class ChangeColorsService {
    constructor(clientService) {
        this.clientService = clientService;
        this.cssVariableNames = [
            '--dy-color-1-original',
            '--dy-color-2-original',
            '--dy-color-3-original',
            '--dy-color-4-original',
            '--dy-color-5-original',
            '--dy-color-6-original',
            '--dy-color-7-original',
            '--dy-primary',
            '--dy-primary-hover',
            '--dy-secondary',
            '--dy-secondary-hover',
            '--dy-text',
            '--dy-text-primary',
            '--dy-text-secondary',
        ];
        this.cssVariables = {};
        this.paletteCssVariables = {};
        this.cssVariablesSubject = new BehaviorSubject({});
        this.paletteSubject = new BehaviorSubject([]);
        this.displaySubject = new BehaviorSubject(false);
        this.ready1 = new Subject();
        this.ready2 = new Subject();
        this.ready = combineLatest([this.ready1, this.ready2]).pipe(map(([val1, val2]) => val1 && val2));
    }
    getStylesFromCssFile() {
        const rootStyles = getComputedStyle(document.documentElement);
        this.cssVariableNames.forEach(variable => {
            if (rootStyles.getPropertyValue(variable).trim()) {
                if (variable.includes('original')) {
                    this.paletteCssVariables[variable] = rootStyles.getPropertyValue(variable).trim();
                }
                else if (!this.cssVariables[variable]) {
                    this.cssVariables[variable] = rootStyles.getPropertyValue(variable).trim();
                }
            }
        });
        this.cssVariablesSubject.next(Object.assign({}, this.cssVariables));
        this.paletteSubject.next(Object.values(this.paletteCssVariables));
        this.ready1.next(true);
    }
    registerElementRef(element) {
        // used in app component
        this.element = element;
    }
    getStylesFromConfigFile(renderer) {
        for (const name of this.cssVariableNames) {
            this.clientService.streamTranslation("colors." + name).subscribe(value => {
                if (value && value != ("colors." + name)) {
                    this.changeCssVariable(name, value, renderer);
                    this.cssVariablesSubject.next(Object.assign({}, this.cssVariables));
                }
            });
        }
        setTimeout(() => {
            this.ready2.next(true);
        }, 200);
    }
    changeCssVariable(name, newValue, renderer) {
        this.cssVariables[name] = newValue;
        this.overrideCssProperties(renderer);
    }
    overrideCssProperties(renderer) {
        let style = '';
        for (const variable in this.cssVariables) {
            style += `${variable}: ${this.cssVariables[variable]};\n`;
        }
        if (this.element) {
            renderer.setProperty(this.element.nativeElement, 'style', style);
        }
    }
    save() {
        for (const variable in this.cssVariables) {
            this.clientService.next("colors." + variable, this.cssVariables[variable]);
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.10", ngImport: i0, type: ChangeColorsService, deps: [{ token: TranslationClientService }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "17.3.10", ngImport: i0, type: ChangeColorsService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.10", ngImport: i0, type: ChangeColorsService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: () => [{ type: TranslationClientService }] });

class CalendlyService {
    static { this.showEventEmitter = new EventEmitter(); }
    constructor() {
    }
    static show() {
        this.showEventEmitter.next(true);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.10", ngImport: i0, type: CalendlyService, deps: [], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "17.3.10", ngImport: i0, type: CalendlyService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.10", ngImport: i0, type: CalendlyService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: () => [] });

class DyContactService {
    constructor(http, backendUrl) {
        this.http = http;
        this.backendUrl = backendUrl;
        this.formData = new FormGroup({
            name: new FormControl('', Validators.required),
            lastName: new FormControl(''),
            email: new FormControl('', [Validators.required, Validators.email]),
            message: new FormControl('', Validators.required)
        });
        this.formDataLong = new FormGroup({
            name: new FormControl('', Validators.required),
            nom: new FormControl('', Validators.required),
            lastName: new FormControl(''),
            phone: new FormControl('', [Validators.required]),
            email: new FormControl('', [Validators.required, Validators.email]),
            message: new FormControl('', Validators.required)
        });
        this.formLoadedTimestamp = Date.now();
    }
    sendContactForm() {
        return this.send(this.formData);
    }
    sendContactFormLong() {
        return this.send(this.formDataLong);
    }
    send(form) {
        if (form.invalid || (Date.now() - this.formLoadedTimestamp) < 5000 || form.getRawValue().lastName) {
            return throwError(() => 'form Invalid');
        }
        LoadingService.startLoading();
        return this.http.get(this.backendUrl + '/contact', { params: form.getRawValue() }).pipe(finalize(() => {
            LoadingService.stopLoading();
        }));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.10", ngImport: i0, type: DyContactService, deps: [{ token: i1$2.HttpClient }, { token: 'backendUrl' }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "17.3.10", ngImport: i0, type: DyContactService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.10", ngImport: i0, type: DyContactService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: () => [{ type: i1$2.HttpClient }, { type: undefined, decorators: [{
                    type: Inject,
                    args: ['backendUrl']
                }] }] });

class NotificationComponent {
    constructor(service) {
        this.service = service;
        this.show = false;
        this.error = false;
        this.message = '';
        this.timeout = -1;
        this.service.successMessage.subscribe((msg) => {
            this.message = msg;
            this.show = true;
            this.error = false;
            this.prepareStop();
        });
        this.service.errorMessage.subscribe((msg) => {
            this.message = msg;
            this.show = true;
            this.error = true;
            this.prepareStop();
        });
    }
    prepareStop() {
        clearTimeout(this.timeout);
        this.timeout = setTimeout(() => {
            console.log('end');
            this.show = false;
        }, 8000);
    }
    stop() {
        this.show = false;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.10", ngImport: i0, type: NotificationComponent, deps: [{ token: NotificationService }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.10", type: NotificationComponent, isStandalone: true, selector: "app-notification", ngImport: i0, template: "<div *ngIf=\"show\" [class.show]=\"show\" aria-atomic=\"true\" aria-live=\"assertive\" class=\"toast\" role=\"alert\">\n  <div class=\"toast-header\">\n    <strong *ngIf=\"!error\" [appDyTranslate]=\"'notification.successHeader'\" class=\"me-auto\">Notification</strong>\n    <strong *ngIf=\"error\" [appDyTranslate]=\"'notification.errorHeader'\" class=\"me-auto\">Error</strong>\n    <button (click)=\"stop()\" aria-label=\"Close\" class=\"btn-close\" data-bs-dismiss=\"toast\" type=\"button\"></button>\n  </div>\n  <div class=\"toast-body\">\n    {{ message }}\n  </div>\n</div>\n", styles: [".toast{display:block;position:fixed;top:50%;left:50%;margin-left:-150px;margin-top:-50px;z-index:999}\n"], dependencies: [{ kind: "directive", type: NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: DyTranslateDirective, selector: "[appDyTranslate]", inputs: ["appDyTranslate"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.10", ngImport: i0, type: NotificationComponent, decorators: [{
            type: Component,
            args: [{ selector: 'app-notification', standalone: true, imports: [
                        NgIf,
                        DyTranslateDirective
                    ], template: "<div *ngIf=\"show\" [class.show]=\"show\" aria-atomic=\"true\" aria-live=\"assertive\" class=\"toast\" role=\"alert\">\n  <div class=\"toast-header\">\n    <strong *ngIf=\"!error\" [appDyTranslate]=\"'notification.successHeader'\" class=\"me-auto\">Notification</strong>\n    <strong *ngIf=\"error\" [appDyTranslate]=\"'notification.errorHeader'\" class=\"me-auto\">Error</strong>\n    <button (click)=\"stop()\" aria-label=\"Close\" class=\"btn-close\" data-bs-dismiss=\"toast\" type=\"button\"></button>\n  </div>\n  <div class=\"toast-body\">\n    {{ message }}\n  </div>\n</div>\n", styles: [".toast{display:block;position:fixed;top:50%;left:50%;margin-left:-150px;margin-top:-50px;z-index:999}\n"] }]
        }], ctorParameters: () => [{ type: NotificationService }] });

class LoadingComponent {
    constructor() {
        this.material = input(true);
        this.isLoading = LoadingService.isLoading();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.10", ngImport: i0, type: LoadingComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "17.0.0", version: "17.3.10", type: LoadingComponent, isStandalone: true, selector: "lib-loading", inputs: { material: { classPropertyName: "material", publicName: "material", isSignal: true, isRequired: false, transformFunction: null } }, ngImport: i0, template: "@if (isLoading()) {\n  @if (material()) {\n    <mat-spinner class=\"loading-spinner\"></mat-spinner>\n  } @else {\n    <div class=\"loading-spinner spinner-border\" style=\"width: 5rem; height: 5rem; font-size: 2em;\"\n         role=\"status\">\n      <span class=\"visually-hidden\">Loading...</span>\n    </div>\n  }\n}\n", styles: [".loading-spinner{position:fixed!important;height:100px;width:100px;z-index:9999;top:50%;left:50%;margin-left:-50px;margin-top:-50px}\n"], dependencies: [{ kind: "ngmodule", type: MatProgressSpinnerModule }, { kind: "component", type: i1$6.MatProgressSpinner, selector: "mat-progress-spinner, mat-spinner", inputs: ["color", "mode", "value", "diameter", "strokeWidth"], exportAs: ["matProgressSpinner"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.10", ngImport: i0, type: LoadingComponent, decorators: [{
            type: Component,
            args: [{ selector: 'lib-loading', standalone: true, imports: [MatProgressSpinnerModule, AsyncPipe], template: "@if (isLoading()) {\n  @if (material()) {\n    <mat-spinner class=\"loading-spinner\"></mat-spinner>\n  } @else {\n    <div class=\"loading-spinner spinner-border\" style=\"width: 5rem; height: 5rem; font-size: 2em;\"\n         role=\"status\">\n      <span class=\"visually-hidden\">Loading...</span>\n    </div>\n  }\n}\n", styles: [".loading-spinner{position:fixed!important;height:100px;width:100px;z-index:9999;top:50%;left:50%;margin-left:-50px;margin-top:-50px}\n"] }]
        }], ctorParameters: () => [] });

class AddDyimageComponent {
    constructor(service) {
        this.service = service;
        this.image = new EventEmitter();
    }
    openDialog() {
        this.service.openDialog().subscribe({
            next: output => {
                this.image.emit(output);
            },
            error: (err) => {
                console.log('error with uploading image');
                console.log(err);
            }
        });
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.10", ngImport: i0, type: AddDyimageComponent, deps: [{ token: ImageUploadService }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.10", type: AddDyimageComponent, isStandalone: true, selector: "lib-add-dyimage", outputs: { image: "image" }, ngImport: i0, template: "<div>\n  <button (click)=\"openDialog()\" mat-raised-button>\n    <mat-icon fontIcon=\"add_circle\"></mat-icon>\n    Rajouter une nouvelle image\n  </button>\n</div>\n", styles: [""], dependencies: [{ kind: "ngmodule", type: ReactiveFormsModule }, { kind: "ngmodule", type: MatButtonModule }, { kind: "component", type: i5.MatButton, selector: "    button[mat-button], button[mat-raised-button], button[mat-flat-button],    button[mat-stroked-button]  ", exportAs: ["matButton"] }, { kind: "ngmodule", type: MatDialogModule }, { kind: "ngmodule", type: MatIconModule }, { kind: "component", type: i6.MatIcon, selector: "mat-icon", inputs: ["color", "inline", "svgIcon", "fontSet", "fontIcon"], exportAs: ["matIcon"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.10", ngImport: i0, type: AddDyimageComponent, decorators: [{
            type: Component,
            args: [{ selector: 'lib-add-dyimage', standalone: true, imports: [
                        ReactiveFormsModule,
                        MatButtonModule, MatDialogModule, MatIconModule,
                    ], template: "<div>\n  <button (click)=\"openDialog()\" mat-raised-button>\n    <mat-icon fontIcon=\"add_circle\"></mat-icon>\n    Rajouter une nouvelle image\n  </button>\n</div>\n" }]
        }], ctorParameters: () => [{ type: ImageUploadService }], propDecorators: { image: [{
                type: Output
            }] } });

class ImageEditComponent {
    constructor(service, clientService) {
        this.service = service;
        this.clientService = clientService;
        this.defaultUrl = '';
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.10", ngImport: i0, type: ImageEditComponent, deps: [{ token: i1$1.TranslateService }, { token: TranslationClientService }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.10", type: ImageEditComponent, isStandalone: true, selector: "lib-image-edit", inputs: { defaultUrl: "defaultUrl", name: "name" }, ngImport: i0, template: "<p>image-edit works!</p>\n", styles: [""], dependencies: [{ kind: "ngmodule", type: CommonModule }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.10", ngImport: i0, type: ImageEditComponent, decorators: [{
            type: Component,
            args: [{ selector: 'lib-image-edit', standalone: true, imports: [CommonModule], template: "<p>image-edit works!</p>\n" }]
        }], ctorParameters: () => [{ type: i1$1.TranslateService }, { type: TranslationClientService }], propDecorators: { defaultUrl: [{
                type: Input
            }], name: [{
                type: Input,
                args: [{ required: true }]
            }] } });

class DyImgComponent {
    constructor() {
        this.imgClass = input('');
        this.imgStyle = input('');
        this.image = input.required();
        this.alt = input.required();
        this.transitionName = input('none');
        this.sizeRatio = input(100);
        this.srcSet = computed(() => {
            return this.image().compressedUrls.map((url) => `${url.url} ${url.width}w`).join(', ');
        });
        this.sizes = computed(() => {
            return this.image().compressedUrls.map((url) => `(max-width: ${((Number(url.width) * 100) / this.sizeRatio())}px) ` + url.width + "px").join(', ');
        });
        this.height = model();
        this.width = model();
    }
    ngAfterViewChecked() {
        this.updateParentAttributes();
    }
    updateParentAttributes() {
        const img = this.imageElement.nativeElement;
        const parentAnchor = img.parentElement;
        if (parentAnchor) {
            // parentAnchor.setAttribute('href', img.src);
            if (img.complete) {
                this.updateAttributes(parentAnchor, img);
            }
            else {
                img.onload = () => {
                    this.updateAttributes(parentAnchor, img);
                };
            }
        }
    }
    updateAttributes(parentAnchor, img) {
        const originalWidth = img.naturalWidth;
        const originalHeight = img.naturalHeight;
        const windowHeight = window.innerHeight * 0.9;
        this.height.set(img.naturalHeight);
        this.width.set(img.naturalWidth);
        //   // Update parent <a> attributes
        //   parentAnchor.setAttribute('data-pswp-width', Math.round(originalWidth / originalHeight * windowHeight).toString());
        //   parentAnchor.setAttribute('data-pswp-height', windowHeight.toString());
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.10", ngImport: i0, type: DyImgComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "17.1.0", version: "17.3.10", type: DyImgComponent, isStandalone: true, selector: "dy-img", inputs: { imgClass: { classPropertyName: "imgClass", publicName: "imgClass", isSignal: true, isRequired: false, transformFunction: null }, imgStyle: { classPropertyName: "imgStyle", publicName: "imgStyle", isSignal: true, isRequired: false, transformFunction: null }, image: { classPropertyName: "image", publicName: "image", isSignal: true, isRequired: true, transformFunction: null }, alt: { classPropertyName: "alt", publicName: "alt", isSignal: true, isRequired: true, transformFunction: null }, transitionName: { classPropertyName: "transitionName", publicName: "transitionName", isSignal: true, isRequired: false, transformFunction: null }, sizeRatio: { classPropertyName: "sizeRatio", publicName: "sizeRatio", isSignal: true, isRequired: false, transformFunction: null }, height: { classPropertyName: "height", publicName: "height", isSignal: true, isRequired: false, transformFunction: null }, width: { classPropertyName: "width", publicName: "width", isSignal: true, isRequired: false, transformFunction: null } }, outputs: { height: "heightChange", width: "widthChange" }, viewQueries: [{ propertyName: "imageElement", first: true, predicate: ["imageElement"], descendants: true }], ngImport: i0, template: "<img\n  #imageElement\n  [alt]=\"alt()\"\n  [class]=\"imgClass()\"\n  [dyTransition]=\"transitionName()\"\n  [sizes]=\"'(max-width: 768px) 100vw, '+sizeRatio()+'vw'\"\n  [src]=\"image().thumbnailUrl\"\n  [srcset]=\"srcSet()\"\n  [style]=\"imgStyle()\"\n/>\n", styles: [""], dependencies: [{ kind: "directive", type: DyTransitionDirective, selector: "[dyTransition]", inputs: ["dyTransition"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.10", ngImport: i0, type: DyImgComponent, decorators: [{
            type: Component,
            args: [{ selector: 'dy-img', standalone: true, imports: [
                        DyTransitionDirective
                    ], template: "<img\n  #imageElement\n  [alt]=\"alt()\"\n  [class]=\"imgClass()\"\n  [dyTransition]=\"transitionName()\"\n  [sizes]=\"'(max-width: 768px) 100vw, '+sizeRatio()+'vw'\"\n  [src]=\"image().thumbnailUrl\"\n  [srcset]=\"srcSet()\"\n  [style]=\"imgStyle()\"\n/>\n" }]
        }], propDecorators: { imageElement: [{
                type: ViewChild,
                args: ['imageElement']
            }] } });

class DySwiperComponent {
    constructor(_platformId) {
        this._platformId = _platformId;
        this.active_id = -1;
        this.pictures = input.required();
        this.id = input('swiper');
        this.noGallery = input(false);
        this.withGallery = computed(() => this.noGallery() ? false : this.pictures() ? this.pictures().length > 1 : false);
        this.slidesPerView = input(1);
        this.spaceBetween = input(0);
        this.themeColor = input('#646464');
        this.margin_x = input(5);
        this.transition = input('none');
        this.sizes = computed(() => {
            const map = new Map();
            this.pictures().forEach(pic => {
                map.set(pic.originalUrl, { height: signal(0), width: signal(0) });
            });
            return map;
        });
    }
    goto(id) {
        this.swiper.slideToLoop(id);
    }
    getThumbnailHeight(pictures) {
        return Math.min(100 / pictures.length, 33);
    }
    ngOnDestroy() {
        this.lightbox?.destroy();
        this.swiper?.destroy();
    }
    ngOnChanges(changes) {
        if (changes['pictures'] && changes['pictures'].previousValue) {
            // Check if inputChangeTrigger has changed
            // You can add more conditions based on your requirements
            this.ngOnDestroy();
            this.ngAfterViewInit();
        }
    }
    ngAfterViewInit() {
        if (isPlatformBrowser(this._platformId)) {
            this.swiper = new Swiper(`#${this.id()}`, {
                // Optional parameters
                loop: true,
                keyboard: {
                    enabled: true,
                    onlyInViewport: false,
                },
                // If we need pagination
                pagination: {
                    el: '.swiper-pagination',
                },
                // Navigation arrows
                navigation: {
                    enabled: this.pictures().length > 1,
                    nextEl: '.swiper-button-next',
                    prevEl: '.swiper-button-prev',
                },
                // Responsive breakpoints
                breakpoints: {
                    // when window width is >= 640px
                    640: {
                        enabled: this.pictures().length > this.slidesPerView(),
                        navigation: {
                            nextEl: '.swiper-button-next-dy' + this.id(),
                            prevEl: '.swiper-button-prev-dy' + this.id(),
                        },
                        spaceBetween: this.spaceBetween(),
                        slidesPerView: this.slidesPerView(), // or 4 depending on your preference
                    },
                    // you can add more breakpoints if needed
                },
                // And if we need scrollbar
                scrollbar: {
                    hide: true,
                },
                on: {
                    slideChangeTransitionEnd: (swiper) => {
                        console.log(swiper.realIndex);
                        this.changeActiveIndex(swiper.realIndex);
                    }
                }
            });
            setTimeout(() => {
                this.lightbox = new PhotoSwipeLightbox({
                    gallery: `#${this.id()}`,
                    children: 'a',
                    pswpModule: PhotoSwipe,
                    zoom: true
                });
                this.lightbox.init();
            }, 100);
        }
    }
    changeActiveIndex(index) {
        this.active_id = index;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.10", ngImport: i0, type: DySwiperComponent, deps: [{ token: PLATFORM_ID }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "17.0.0", version: "17.3.10", type: DySwiperComponent, isStandalone: true, selector: "app-dy-swiper", inputs: { pictures: { classPropertyName: "pictures", publicName: "pictures", isSignal: true, isRequired: true, transformFunction: null }, id: { classPropertyName: "id", publicName: "id", isSignal: true, isRequired: false, transformFunction: null }, noGallery: { classPropertyName: "noGallery", publicName: "noGallery", isSignal: true, isRequired: false, transformFunction: null }, slidesPerView: { classPropertyName: "slidesPerView", publicName: "slidesPerView", isSignal: true, isRequired: false, transformFunction: null }, spaceBetween: { classPropertyName: "spaceBetween", publicName: "spaceBetween", isSignal: true, isRequired: false, transformFunction: null }, themeColor: { classPropertyName: "themeColor", publicName: "themeColor", isSignal: true, isRequired: false, transformFunction: null }, margin_x: { classPropertyName: "margin_x", publicName: "margin_x", isSignal: true, isRequired: false, transformFunction: null }, transition: { classPropertyName: "transition", publicName: "transition", isSignal: true, isRequired: false, transformFunction: null } }, usesOnChanges: true, ngImport: i0, template: "<div [class.col-md-10]=\"withGallery()\" [class.col-md-12]=\"!withGallery()\" [style.--swiper-theme-color]=\"themeColor()\">\n  <div style=\"display: flex; align-items: center;\" [class.hide-arrows]=\"pictures().length <= slidesPerView()\">\n    <div class=\"dy-arrow text-center\">\n      <mat-icon [class]=\"'swiper-button-prev-dy' + id()\" class=\"!w-full\" [inline]=\"true\"\n                style=\"font-size: 4rem; color: var(--dy-primary)\">chevron_left\n      </mat-icon>\n    </div>\n    <div class=\"dy-main\">\n      <div [id]=\"id()\" class=\"swiper\">\n        <!-- Additional required wrapper -->\n        <div class=\"swiper-wrapper\">\n          @for (picture of pictures(); track picture.originalUrl) {\n\n            <div class=\"swiper-slide\" id=\"{{ picture.originalUrl }}\">\n              <div class=\"picsum-img-wrapper\"\n              >\n                <div\n                  [style.padding-left]=\"margin_x() + '%'\"\n                  [style.padding-right]=\"margin_x() + '%'\"\n                >\n                  <a style=\"width: 100%\" [href]=\"picture.originalUrl\"\n                     [attr.data-pswp-width]=\"sizes().get(picture.originalUrl)!.width()*this.slidesPerView()\"\n                     [attr.data-pswp-height]=\"sizes().get(picture.originalUrl)!.height()*this.slidesPerView()\"\n                     class=\"img-link\" target=\"_blank\">\n                    <dy-img [imgStyle]=\"'width: 100%; height: auto;'\" [sizeRatio]=\"100/this.slidesPerView()\" [image]=\"picture\"\n                            [alt]=\"picture.alt ?? 'swiper image'\" [transitionName]=\"$first ? transition() : 'none'\"\n                            [(height)]=\"sizes().get(picture.originalUrl)!.height\"\n                            [(width)]=\"sizes().get(picture.originalUrl)!.width\"></dy-img>\n                  </a>\n                </div>\n              </div>\n            </div>\n          }\n        </div>\n        <div class=\"swiper-pagination\"></div>\n\n        <div class=\"swiper-button-prev\"></div>\n        <div class=\"swiper-button-next\"></div>\n      </div>\n    </div>\n    <div class=\"text-center dy-arrow\">\n      <mat-icon [class]=\"'swiper-button-next-dy' + id()\" class=\"text-primary-inverse !w-full\" [inline]=\"true\"\n                style=\"font-size: 4rem; color: var(--dy-primary)\">chevron_right\n      </mat-icon>\n    </div>\n  </div>\n  <div *ngIf=\"withGallery()\" class=\"row\">\n    <div class=\"hidden md:block col-md-2 position-relative\">\n      <div id=\"image-list-detail\">\n        <div class=\"ab\">\n          <ng-container *ngFor=\"let picture of pictures(); let i = index\">\n            <img (click)=\"goto(i)\"\n                 [class.ab_active]=\"i == active_id\"\n                 [src]=\"picture.thumbnailUrl\"\n                 [style.height]=\"getThumbnailHeight(pictures()) + '%'\"\n                 [style.width]=\"getThumbnailHeight(pictures()) + '%'\"\n                 alt=\"thumbnail\"\n                 class=\"cd\"\n            />\n          </ng-container>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n", styles: [".swiper{width:100%;height:auto}img{display:block;margin:auto;max-width:100%!important}#image-list-detail{height:100%;position:absolute;text-align:left;margin-left:0;margin-right:auto;display:flex;justify-content:flex-end}.ab{display:inline-block;height:100%;margin-left:auto!important;margin-right:0!important}.cd{display:block;padding:3px;margin-left:0;margin-right:auto;object-fit:cover;aspect-ratio:297/210}@media (min-width: 576px){.cd{width:auto!important}}@media (max-width: 576px){img{width:100%!important;margin:unset!important}.swiper{width:100%!important}.cd{display:inline;height:auto!important}#image-list-detail{height:fit-content!important}}.ab_active{padding:2px;border:rgb(215,224,243) solid 2px}::ng-deep .pswp__button{width:5rem!important;height:5.5rem!important}::ng-deep .pswp__icn{width:4rem!important;height:4rem!important}.img-link{display:block;width:fit-content;margin:auto}.material-symbols-outlined{font-size:4rem}@media (min-width: 768px){.dy-arrow{width:4rem;color:var(--dy-primary)}.dy-main{width:calc(100% - 8rem)}.hide-arrows .dy-arrow{display:none}.hide-arrows .dy-main{width:100%}}@media (max-width: 768px){.dy-arrow{display:none;width:0;color:var(--dy-primary)}.dy-main{width:100%}}.swiper-button-next,.swiper-button-prev{display:block}@media (min-width: 768px){.swiper-button-next,.swiper-button-prev{display:none}}\n"], dependencies: [{ kind: "directive", type: NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "component", type: DyImgComponent, selector: "dy-img", inputs: ["imgClass", "imgStyle", "image", "alt", "transitionName", "sizeRatio", "height", "width"], outputs: ["heightChange", "widthChange"] }, { kind: "component", type: MatIcon, selector: "mat-icon", inputs: ["color", "inline", "svgIcon", "fontSet", "fontIcon"], exportAs: ["matIcon"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.10", ngImport: i0, type: DySwiperComponent, decorators: [{
            type: Component,
            args: [{ selector: 'app-dy-swiper', standalone: true, imports: [
                        NgForOf,
                        NgIf,
                        DyTransitionDirective,
                        DyImgComponent,
                        MatIcon
                    ], template: "<div [class.col-md-10]=\"withGallery()\" [class.col-md-12]=\"!withGallery()\" [style.--swiper-theme-color]=\"themeColor()\">\n  <div style=\"display: flex; align-items: center;\" [class.hide-arrows]=\"pictures().length <= slidesPerView()\">\n    <div class=\"dy-arrow text-center\">\n      <mat-icon [class]=\"'swiper-button-prev-dy' + id()\" class=\"!w-full\" [inline]=\"true\"\n                style=\"font-size: 4rem; color: var(--dy-primary)\">chevron_left\n      </mat-icon>\n    </div>\n    <div class=\"dy-main\">\n      <div [id]=\"id()\" class=\"swiper\">\n        <!-- Additional required wrapper -->\n        <div class=\"swiper-wrapper\">\n          @for (picture of pictures(); track picture.originalUrl) {\n\n            <div class=\"swiper-slide\" id=\"{{ picture.originalUrl }}\">\n              <div class=\"picsum-img-wrapper\"\n              >\n                <div\n                  [style.padding-left]=\"margin_x() + '%'\"\n                  [style.padding-right]=\"margin_x() + '%'\"\n                >\n                  <a style=\"width: 100%\" [href]=\"picture.originalUrl\"\n                     [attr.data-pswp-width]=\"sizes().get(picture.originalUrl)!.width()*this.slidesPerView()\"\n                     [attr.data-pswp-height]=\"sizes().get(picture.originalUrl)!.height()*this.slidesPerView()\"\n                     class=\"img-link\" target=\"_blank\">\n                    <dy-img [imgStyle]=\"'width: 100%; height: auto;'\" [sizeRatio]=\"100/this.slidesPerView()\" [image]=\"picture\"\n                            [alt]=\"picture.alt ?? 'swiper image'\" [transitionName]=\"$first ? transition() : 'none'\"\n                            [(height)]=\"sizes().get(picture.originalUrl)!.height\"\n                            [(width)]=\"sizes().get(picture.originalUrl)!.width\"></dy-img>\n                  </a>\n                </div>\n              </div>\n            </div>\n          }\n        </div>\n        <div class=\"swiper-pagination\"></div>\n\n        <div class=\"swiper-button-prev\"></div>\n        <div class=\"swiper-button-next\"></div>\n      </div>\n    </div>\n    <div class=\"text-center dy-arrow\">\n      <mat-icon [class]=\"'swiper-button-next-dy' + id()\" class=\"text-primary-inverse !w-full\" [inline]=\"true\"\n                style=\"font-size: 4rem; color: var(--dy-primary)\">chevron_right\n      </mat-icon>\n    </div>\n  </div>\n  <div *ngIf=\"withGallery()\" class=\"row\">\n    <div class=\"hidden md:block col-md-2 position-relative\">\n      <div id=\"image-list-detail\">\n        <div class=\"ab\">\n          <ng-container *ngFor=\"let picture of pictures(); let i = index\">\n            <img (click)=\"goto(i)\"\n                 [class.ab_active]=\"i == active_id\"\n                 [src]=\"picture.thumbnailUrl\"\n                 [style.height]=\"getThumbnailHeight(pictures()) + '%'\"\n                 [style.width]=\"getThumbnailHeight(pictures()) + '%'\"\n                 alt=\"thumbnail\"\n                 class=\"cd\"\n            />\n          </ng-container>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n", styles: [".swiper{width:100%;height:auto}img{display:block;margin:auto;max-width:100%!important}#image-list-detail{height:100%;position:absolute;text-align:left;margin-left:0;margin-right:auto;display:flex;justify-content:flex-end}.ab{display:inline-block;height:100%;margin-left:auto!important;margin-right:0!important}.cd{display:block;padding:3px;margin-left:0;margin-right:auto;object-fit:cover;aspect-ratio:297/210}@media (min-width: 576px){.cd{width:auto!important}}@media (max-width: 576px){img{width:100%!important;margin:unset!important}.swiper{width:100%!important}.cd{display:inline;height:auto!important}#image-list-detail{height:fit-content!important}}.ab_active{padding:2px;border:rgb(215,224,243) solid 2px}::ng-deep .pswp__button{width:5rem!important;height:5.5rem!important}::ng-deep .pswp__icn{width:4rem!important;height:4rem!important}.img-link{display:block;width:fit-content;margin:auto}.material-symbols-outlined{font-size:4rem}@media (min-width: 768px){.dy-arrow{width:4rem;color:var(--dy-primary)}.dy-main{width:calc(100% - 8rem)}.hide-arrows .dy-arrow{display:none}.hide-arrows .dy-main{width:100%}}@media (max-width: 768px){.dy-arrow{display:none;width:0;color:var(--dy-primary)}.dy-main{width:100%}}.swiper-button-next,.swiper-button-prev{display:block}@media (min-width: 768px){.swiper-button-next,.swiper-button-prev{display:none}}\n"] }]
        }], ctorParameters: () => [{ type: Object, decorators: [{
                    type: Inject,
                    args: [PLATFORM_ID]
                }] }] });

class DyPictureComponent {
    constructor(clientService, imageUploadService) {
        this.clientService = clientService;
        this.imageUploadService = imageUploadService;
        this.originalSrc = input.required();
        this.originalAlt = input.required();
        this.key = input.required();
        this.imgClass = input('');
        this.lazy = input(false);
        this.proportion = input(100);
        this.storedImage = signal(undefined);
        this.imageToDisplay = computed(() => {
            return this.storedImage() ?? { originalUrl: this.originalSrc(), thumbnailUrl: this.originalSrc(), compressedUrls: [] };
        });
        this.storedAlt = signal(undefined);
        this.altToDisplay = computed(() => {
            return this.storedAlt() ?? this.originalAlt();
        });
        this.editMode = signal(false);
    }
    ngAfterViewInit() {
        this.clientService.editSubject.subscribe(editMode => {
            this.editMode.set(editMode);
        });
    }
    onKeyup() {
        if (this.editMode()) {
            this.imageUploadService.openDialog().subscribe(res => {
                this.changeImage(res.urls, res.alt);
                this.save(res.urls, res.alt);
            });
        }
    }
    save(response, alt) {
        if (response && alt) {
            this.clientService.next('images.' + this.key() + '.originalUrl', response.originalUrl);
            this.clientService.next('images.' + this.key() + '.thumbnailUrl', response.thumbnailUrl);
            response.compressedUrls.forEach((compressedUrl, index) => {
                this.clientService.next('images.' + this.key() + '.compressed-' + index + '.url', compressedUrl.url);
                this.clientService.next('images.' + this.key() + '.compressed-' + index + '.height', compressedUrl.height);
                this.clientService.next('images.' + this.key() + '.compressed-' + index + '.width', compressedUrl.width);
            });
            this.clientService.next('images.' + this.key() + '.alt', alt);
        }
    }
    ngOnInit() {
        const urlKey = 'images.' + this.key() + '.originalUrl';
        const altKey = 'images.' + this.key() + '.alt';
        const key1$ = this.clientService.streamTranslation(urlKey);
        const key2$ = this.clientService.streamTranslation(altKey);
        /* *** IMPORTANT here is the number of different image compress size returned by backend (5): "400", "600", "800", "1000", "1200" *** */
        const keyUrl0$ = this.clientService.streamTranslation('images.' + this.key() + '.compressed-0.url');
        const keyHeight0$ = this.clientService.streamTranslation('images.' + this.key() + '.compressed-0.height');
        const keyWidth0$ = this.clientService.streamTranslation('images.' + this.key() + '.compressed-0.width');
        const keyUrl1$ = this.clientService.streamTranslation('images.' + this.key() + '.compressed-1.url');
        const keyHeight1$ = this.clientService.streamTranslation('images.' + this.key() + '.compressed-1.height');
        const keyWidth1$ = this.clientService.streamTranslation('images.' + this.key() + '.compressed-1.width');
        const keyUrl2$ = this.clientService.streamTranslation('images.' + this.key() + '.compressed-2.url');
        const keyHeight2$ = this.clientService.streamTranslation('images.' + this.key() + '.compressed-2.height');
        const keyWidth2$ = this.clientService.streamTranslation('images.' + this.key() + '.compressed-2.width');
        const keyUrl3$ = this.clientService.streamTranslation('images.' + this.key() + '.compressed-3.url');
        const keyHeight3$ = this.clientService.streamTranslation('images.' + this.key() + '.compressed-3.height');
        const keyWidth3$ = this.clientService.streamTranslation('images.' + this.key() + '.compressed-3.width');
        const keyUrl4$ = this.clientService.streamTranslation('images.' + this.key() + '.compressed-4.url');
        const keyHeight4$ = this.clientService.streamTranslation('images.' + this.key() + '.compressed-4.height');
        const keyWidth4$ = this.clientService.streamTranslation('images.' + this.key() + '.compressed-4.width');
        zip([
            key1$, key2$,
            keyUrl0$, keyHeight0$, keyWidth0$, keyUrl1$, keyHeight1$, keyWidth1$, keyUrl2$, keyHeight2$, keyWidth2$, keyUrl3$, keyHeight3$, keyWidth3$, keyUrl4$, keyHeight4$, keyWidth4$
        ]).subscribe(([url, alt, keyUrl0, keyHeight0, keyWidth0, keyUrl1, keyHeight1, keyWidth1, keyUrl2, keyHeight2, keyWidth2, keyUrl3, keyHeight3, keyWidth3, keyUrl4, keyHeight4, keyWidth4]) => {
            if (urlKey != url || altKey != alt) {
                const image = {
                    originalUrl: url, thumbnailUrl: url, compressedUrls: [
                        { url: keyUrl0, width: keyWidth0, height: keyHeight0 },
                        { url: keyUrl1, width: keyWidth1, height: keyHeight1 },
                        { url: keyUrl2, width: keyWidth2, height: keyHeight2 },
                        { url: keyUrl3, width: keyWidth3, height: keyHeight3 },
                        { url: keyUrl4, width: keyWidth4, height: keyHeight4 },
                    ].filter(x => x.url.includes('://'))
                };
                this.changeImage(image, alt);
            }
        });
    }
    changeImage(image, alt) {
        const smallerImage = image.compressedUrls.find((elem) => {
            return elem.height == '400' || elem.width == '400';
        });
        image.thumbnailUrl = smallerImage?.url ?? image.thumbnailUrl;
        this.storedImage.set(image);
        this.storedAlt.set(alt);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.10", ngImport: i0, type: DyPictureComponent, deps: [{ token: TranslationClientService }, { token: ImageUploadService }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "17.1.0", version: "17.3.10", type: DyPictureComponent, isStandalone: true, selector: "lib-dy-picture", inputs: { originalSrc: { classPropertyName: "originalSrc", publicName: "originalSrc", isSignal: true, isRequired: true, transformFunction: null }, originalAlt: { classPropertyName: "originalAlt", publicName: "originalAlt", isSignal: true, isRequired: true, transformFunction: null }, key: { classPropertyName: "key", publicName: "key", isSignal: true, isRequired: true, transformFunction: null }, imgClass: { classPropertyName: "imgClass", publicName: "imgClass", isSignal: true, isRequired: false, transformFunction: null }, lazy: { classPropertyName: "lazy", publicName: "lazy", isSignal: true, isRequired: false, transformFunction: null }, proportion: { classPropertyName: "proportion", publicName: "proportion", isSignal: true, isRequired: false, transformFunction: null } }, host: { listeners: { "click": "onKeyup()" } }, ngImport: i0, template: "<dy-img [class.dy-border]=\"editMode()\" [alt]=\"altToDisplay()\" [attr.loading]=\"lazy() ? 'lazy' : 'eager'\" [image]=\"imageToDisplay()\"\n        [imgClass]=\"imgClass()\" [sizeRatio]=\"proportion()\"></dy-img>\n", styles: [".dy-border{display:block;height:fit-content;border:4px dashed rgb(169,169,169)}\n"], dependencies: [{ kind: "component", type: DyImgComponent, selector: "dy-img", inputs: ["imgClass", "imgStyle", "image", "alt", "transitionName", "sizeRatio", "height", "width"], outputs: ["heightChange", "widthChange"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.10", ngImport: i0, type: DyPictureComponent, decorators: [{
            type: Component,
            args: [{ selector: 'lib-dy-picture', standalone: true, imports: [
                        DyImgComponent
                    ], template: "<dy-img [class.dy-border]=\"editMode()\" [alt]=\"altToDisplay()\" [attr.loading]=\"lazy() ? 'lazy' : 'eager'\" [image]=\"imageToDisplay()\"\n        [imgClass]=\"imgClass()\" [sizeRatio]=\"proportion()\"></dy-img>\n", styles: [".dy-border{display:block;height:fit-content;border:4px dashed rgb(169,169,169)}\n"] }]
        }], ctorParameters: () => [{ type: TranslationClientService }, { type: ImageUploadService }], propDecorators: { onKeyup: [{
                type: HostListener,
                args: ['click']
            }] } });

class MyCardComponent {
    constructor() {
        this.withExitButton = false;
        this.exitEmitter = new EventEmitter;
    }
    exit() {
        this.exitEmitter.next(true);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.10", ngImport: i0, type: MyCardComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.10", type: MyCardComponent, isStandalone: true, selector: "app-my-card", inputs: { title: "title", withExitButton: "withExitButton" }, outputs: { exitEmitter: "exitEmitter" }, ngImport: i0, template: "<div *ngIf=\"withExitButton\" class=\"text-end\">\n  <button (click)=\"exit()\" color=\"accent\" mat-raised-button>X</button>\n</div>\n<section>\n  <h1>\n    <svg class=\"feather feather-tool\" fill=\"none\" height=\"24\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\"\n         stroke-width=\"2\" viewBox=\"0 0 24 24\" width=\"24\" xmlns=\"http://www.w3.org/2000/svg\">\n      <path\n        d=\"M14.7 6.3a1 1 0 0 0 0 1.4l1.6 1.6a1 1 0 0 0 1.4 0l3.77-3.77a6 6 0 0 1-7.94 7.94l-6.91 6.91a2.12 2.12 0 0 1-3-3l6.91-6.91a6 6 0 0 1 7.94-7.94l-3.76 3.76z\"/>\n    </svg>\n    {{ title }}\n  </h1>\n  <ng-content></ng-content>\n</section>\n", styles: ["section{background:#fff;padding:2em;border-radius:.75rem;line-height:1.6;overflow:hidden;margin-bottom:2rem;position:relative;font-size:.875rem;box-shadow:0 10px 15px -3px #0000001a,0 4px 6px -2px #0000000d}section h1{font-weight:500;font-size:1.25rem;color:#000;margin-bottom:.75rem}section h1 svg{width:1em;height:1em;display:inline-block;vertical-align:-10%;margin-right:.25em}section h1.package-name{font-size:2rem;margin-bottom:.75rem;margin-top:-.5rem}section strong{font-weight:500;color:#000}section p{margin:.5rem 0 1.5rem}section p a{text-decoration:none;font-weight:500;color:#3b4ce2}section p:last-child{margin-bottom:0}section code{font-weight:500;font-family:Consolas,monaco,monospace;position:relative;z-index:1;margin:0 2px;background:#f3f4f4;content:\"\";border-radius:3px;padding:2px 5px;white-space:nowrap}section ul{margin-top:.5em;padding-left:1em;list-style-type:disc}\n"], dependencies: [{ kind: "directive", type: NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "ngmodule", type: MatButtonModule }, { kind: "component", type: i5.MatButton, selector: "    button[mat-button], button[mat-raised-button], button[mat-flat-button],    button[mat-stroked-button]  ", exportAs: ["matButton"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.10", ngImport: i0, type: MyCardComponent, decorators: [{
            type: Component,
            args: [{ selector: 'app-my-card', standalone: true, imports: [
                        NgForOf,
                        NgIf,
                        MatButtonModule
                    ], template: "<div *ngIf=\"withExitButton\" class=\"text-end\">\n  <button (click)=\"exit()\" color=\"accent\" mat-raised-button>X</button>\n</div>\n<section>\n  <h1>\n    <svg class=\"feather feather-tool\" fill=\"none\" height=\"24\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\"\n         stroke-width=\"2\" viewBox=\"0 0 24 24\" width=\"24\" xmlns=\"http://www.w3.org/2000/svg\">\n      <path\n        d=\"M14.7 6.3a1 1 0 0 0 0 1.4l1.6 1.6a1 1 0 0 0 1.4 0l3.77-3.77a6 6 0 0 1-7.94 7.94l-6.91 6.91a2.12 2.12 0 0 1-3-3l6.91-6.91a6 6 0 0 1 7.94-7.94l-3.76 3.76z\"/>\n    </svg>\n    {{ title }}\n  </h1>\n  <ng-content></ng-content>\n</section>\n", styles: ["section{background:#fff;padding:2em;border-radius:.75rem;line-height:1.6;overflow:hidden;margin-bottom:2rem;position:relative;font-size:.875rem;box-shadow:0 10px 15px -3px #0000001a,0 4px 6px -2px #0000000d}section h1{font-weight:500;font-size:1.25rem;color:#000;margin-bottom:.75rem}section h1 svg{width:1em;height:1em;display:inline-block;vertical-align:-10%;margin-right:.25em}section h1.package-name{font-size:2rem;margin-bottom:.75rem;margin-top:-.5rem}section strong{font-weight:500;color:#000}section p{margin:.5rem 0 1.5rem}section p a{text-decoration:none;font-weight:500;color:#3b4ce2}section p:last-child{margin-bottom:0}section code{font-weight:500;font-family:Consolas,monaco,monospace;position:relative;z-index:1;margin:0 2px;background:#f3f4f4;content:\"\";border-radius:3px;padding:2px 5px;white-space:nowrap}section ul{margin-top:.5em;padding-left:1em;list-style-type:disc}\n"] }]
        }], propDecorators: { title: [{
                type: Input,
                args: [{ required: true }]
            }], withExitButton: [{
                type: Input
            }], exitEmitter: [{
                type: Output
            }] } });

class CalendlyComponent {
    ngOnInit() {
        CalendlyService.showEventEmitter.subscribe(x => {
            if (x) {
                this.show();
            }
        });
    }
    show() {
        // @ts-ignore
        Calendly.initPopupWidget({
            url: this.url
        });
        /*
        Calendly.initInlineWidget({
          url: this.url,
          parentElement: document.getElementById('calendly-embed')
        });*/
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.10", ngImport: i0, type: CalendlyComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.10", type: CalendlyComponent, isStandalone: true, selector: "lib-calendly", inputs: { url: "url" }, ngImport: i0, template: "<link href=\"https://assets.calendly.com/assets/external/widget.css\" rel=\"stylesheet\">", styles: ["::ng-deep body .calendly-overlay .calendly-popup{max-height:1000px!important}\n"] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.10", ngImport: i0, type: CalendlyComponent, decorators: [{
            type: Component,
            args: [{ selector: 'lib-calendly', standalone: true, imports: [], template: "<link href=\"https://assets.calendly.com/assets/external/widget.css\" rel=\"stylesheet\">", styles: ["::ng-deep body .calendly-overlay .calendly-popup{max-height:1000px!important}\n"] }]
        }], propDecorators: { url: [{
                type: Input,
                args: [{ required: true }]
            }] } });

// Angular
/**
 * Sanitize HTML
 */
class SafePipe {
    /**
     * Pipe Constructor
     *
     */
    constructor(_sanitizer) {
        this._sanitizer = _sanitizer;
    }
    /**
     * Transform
     *
     */
    transform(value, type) {
        switch (type) {
            case 'html':
                return this._sanitizer.bypassSecurityTrustHtml(value);
            case 'style':
                return this._sanitizer.bypassSecurityTrustStyle(value);
            case 'script':
                return this._sanitizer.bypassSecurityTrustScript(value);
            case 'url':
                return this._sanitizer.bypassSecurityTrustUrl(value);
            case 'resourceUrl':
                return this._sanitizer.bypassSecurityTrustResourceUrl(value);
            default:
                return this._sanitizer.bypassSecurityTrustHtml(value);
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.10", ngImport: i0, type: SafePipe, deps: [{ token: i1$5.DomSanitizer }], target: i0.ɵɵFactoryTarget.Pipe }); }
    static { this.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: "14.0.0", version: "17.3.10", ngImport: i0, type: SafePipe, isStandalone: true, name: "safe" }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.10", ngImport: i0, type: SafePipe, decorators: [{
            type: Pipe,
            args: [{
                    name: 'safe',
                    standalone: true
                }]
        }], ctorParameters: () => [{ type: i1$5.DomSanitizer }] });

class CapitalizeFirstLetterPipe {
    transform(word) {
        if (!word)
            return word;
        return word[0].toUpperCase() + word.substring(1);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.10", ngImport: i0, type: CapitalizeFirstLetterPipe, deps: [], target: i0.ɵɵFactoryTarget.Pipe }); }
    static { this.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: "14.0.0", version: "17.3.10", ngImport: i0, type: CapitalizeFirstLetterPipe, isStandalone: true, name: "capitalizeFirstLetter" }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.10", ngImport: i0, type: CapitalizeFirstLetterPipe, decorators: [{
            type: Pipe,
            args: [{
                    standalone: true,
                    name: 'capitalizeFirstLetter'
                }]
        }] });

/*
 * Public API Surface of custom-display
 */

/**
 * Generated bundle index. Do not edit.
 */

export { AddDyimageComponent, CalendlyComponent, CalendlyService, CapitalizeFirstLetterPipe, ChangeColorsService, DescriptionMetaService, DyContactService, DyImageEditDirective, DyImgComponent, DyPictureComponent, DySwiperComponent, DyTextEditorService, DyTransitionDirective, DyTranslateDirective, EnableCredentialsInterceptor, ImageEditComponent, ImageUploadService, LoadingComponent, LoadingService, LocalStorageService, MyCardComponent, MyTitleStrategy, NotificationComponent, NotificationService, SafePipe, SwipeManagerService, TitleService, TranslationClientService, UserService };
//# sourceMappingURL=dy-custom-display.mjs.map
