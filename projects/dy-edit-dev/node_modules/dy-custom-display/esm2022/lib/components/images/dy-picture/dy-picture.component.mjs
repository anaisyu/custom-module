import { Component, computed, HostListener, input, signal } from '@angular/core';
import { zip } from "rxjs";
import { DyImgComponent } from "../tag/dy-img/dy-img.component";
import * as i0 from "@angular/core";
import * as i1 from "../../../service/translate/translation-client.service";
import * as i2 from "../../../service/image-upload/image-upload.service";
export class DyPictureComponent {
    constructor(clientService, imageUploadService) {
        this.clientService = clientService;
        this.imageUploadService = imageUploadService;
        this.originalSrc = input.required();
        this.originalAlt = input.required();
        this.key = input.required();
        this.imgClass = input('');
        this.lazy = input(false);
        this.proportion = input(100);
        this.storedImage = signal(undefined);
        this.imageToDisplay = computed(() => {
            return this.storedImage() ?? { originalUrl: this.originalSrc(), thumbnailUrl: this.originalSrc(), compressedUrls: [] };
        });
        this.storedAlt = signal(undefined);
        this.altToDisplay = computed(() => {
            return this.storedAlt() ?? this.originalAlt();
        });
        this.editMode = signal(false);
    }
    ngAfterViewInit() {
        this.clientService.editSubject.subscribe(editMode => {
            this.editMode.set(editMode);
        });
    }
    onKeyup() {
        if (this.editMode()) {
            this.imageUploadService.openDialog().subscribe(res => {
                this.changeImage(res.urls, res.alt);
                this.save(res.urls, res.alt);
            });
        }
    }
    save(response, alt) {
        if (response && alt) {
            this.clientService.next('images.' + this.key() + '.originalUrl', response.originalUrl);
            this.clientService.next('images.' + this.key() + '.thumbnailUrl', response.thumbnailUrl);
            response.compressedUrls.forEach((compressedUrl, index) => {
                this.clientService.next('images.' + this.key() + '.compressed-' + index + '.url', compressedUrl.url);
                this.clientService.next('images.' + this.key() + '.compressed-' + index + '.height', compressedUrl.height);
                this.clientService.next('images.' + this.key() + '.compressed-' + index + '.width', compressedUrl.width);
            });
            this.clientService.next('images.' + this.key() + '.alt', alt);
        }
    }
    ngOnInit() {
        const urlKey = 'images.' + this.key() + '.originalUrl';
        const altKey = 'images.' + this.key() + '.alt';
        const key1$ = this.clientService.streamTranslation(urlKey);
        const key2$ = this.clientService.streamTranslation(altKey);
        /* *** IMPORTANT here is the number of different image compress size returned by backend (5): "400", "600", "800", "1000", "1200" *** */
        const keyUrl0$ = this.clientService.streamTranslation('images.' + this.key() + '.compressed-0.url');
        const keyHeight0$ = this.clientService.streamTranslation('images.' + this.key() + '.compressed-0.height');
        const keyWidth0$ = this.clientService.streamTranslation('images.' + this.key() + '.compressed-0.width');
        const keyUrl1$ = this.clientService.streamTranslation('images.' + this.key() + '.compressed-1.url');
        const keyHeight1$ = this.clientService.streamTranslation('images.' + this.key() + '.compressed-1.height');
        const keyWidth1$ = this.clientService.streamTranslation('images.' + this.key() + '.compressed-1.width');
        const keyUrl2$ = this.clientService.streamTranslation('images.' + this.key() + '.compressed-2.url');
        const keyHeight2$ = this.clientService.streamTranslation('images.' + this.key() + '.compressed-2.height');
        const keyWidth2$ = this.clientService.streamTranslation('images.' + this.key() + '.compressed-2.width');
        const keyUrl3$ = this.clientService.streamTranslation('images.' + this.key() + '.compressed-3.url');
        const keyHeight3$ = this.clientService.streamTranslation('images.' + this.key() + '.compressed-3.height');
        const keyWidth3$ = this.clientService.streamTranslation('images.' + this.key() + '.compressed-3.width');
        const keyUrl4$ = this.clientService.streamTranslation('images.' + this.key() + '.compressed-4.url');
        const keyHeight4$ = this.clientService.streamTranslation('images.' + this.key() + '.compressed-4.height');
        const keyWidth4$ = this.clientService.streamTranslation('images.' + this.key() + '.compressed-4.width');
        zip([
            key1$, key2$,
            keyUrl0$, keyHeight0$, keyWidth0$, keyUrl1$, keyHeight1$, keyWidth1$, keyUrl2$, keyHeight2$, keyWidth2$, keyUrl3$, keyHeight3$, keyWidth3$, keyUrl4$, keyHeight4$, keyWidth4$
        ]).subscribe(([url, alt, keyUrl0, keyHeight0, keyWidth0, keyUrl1, keyHeight1, keyWidth1, keyUrl2, keyHeight2, keyWidth2, keyUrl3, keyHeight3, keyWidth3, keyUrl4, keyHeight4, keyWidth4]) => {
            if (urlKey != url || altKey != alt) {
                const image = {
                    originalUrl: url, thumbnailUrl: url, compressedUrls: [
                        { url: keyUrl0, width: keyWidth0, height: keyHeight0 },
                        { url: keyUrl1, width: keyWidth1, height: keyHeight1 },
                        { url: keyUrl2, width: keyWidth2, height: keyHeight2 },
                        { url: keyUrl3, width: keyWidth3, height: keyHeight3 },
                        { url: keyUrl4, width: keyWidth4, height: keyHeight4 },
                    ].filter(x => x.url.includes('://'))
                };
                this.changeImage(image, alt);
            }
        });
    }
    changeImage(image, alt) {
        const smallerImage = image.compressedUrls.find((elem) => {
            return elem.height == '400' || elem.width == '400';
        });
        image.thumbnailUrl = smallerImage?.url ?? image.thumbnailUrl;
        this.storedImage.set(image);
        this.storedAlt.set(alt);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.10", ngImport: i0, type: DyPictureComponent, deps: [{ token: i1.TranslationClientService }, { token: i2.ImageUploadService }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "17.1.0", version: "17.3.10", type: DyPictureComponent, isStandalone: true, selector: "lib-dy-picture", inputs: { originalSrc: { classPropertyName: "originalSrc", publicName: "originalSrc", isSignal: true, isRequired: true, transformFunction: null }, originalAlt: { classPropertyName: "originalAlt", publicName: "originalAlt", isSignal: true, isRequired: true, transformFunction: null }, key: { classPropertyName: "key", publicName: "key", isSignal: true, isRequired: true, transformFunction: null }, imgClass: { classPropertyName: "imgClass", publicName: "imgClass", isSignal: true, isRequired: false, transformFunction: null }, lazy: { classPropertyName: "lazy", publicName: "lazy", isSignal: true, isRequired: false, transformFunction: null }, proportion: { classPropertyName: "proportion", publicName: "proportion", isSignal: true, isRequired: false, transformFunction: null } }, host: { listeners: { "click": "onKeyup()" } }, ngImport: i0, template: "<dy-img [class.dy-border]=\"editMode()\" [alt]=\"altToDisplay()\" [attr.loading]=\"lazy() ? 'lazy' : 'eager'\" [image]=\"imageToDisplay()\"\n        [imgClass]=\"imgClass()\" [sizeRatio]=\"proportion()\"></dy-img>\n", styles: [".dy-border{display:block;height:fit-content;border:4px dashed rgb(169,169,169)}\n"], dependencies: [{ kind: "component", type: DyImgComponent, selector: "dy-img", inputs: ["imgClass", "imgStyle", "image", "alt", "transitionName", "sizeRatio", "height", "width"], outputs: ["heightChange", "widthChange"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.10", ngImport: i0, type: DyPictureComponent, decorators: [{
            type: Component,
            args: [{ selector: 'lib-dy-picture', standalone: true, imports: [
                        DyImgComponent
                    ], template: "<dy-img [class.dy-border]=\"editMode()\" [alt]=\"altToDisplay()\" [attr.loading]=\"lazy() ? 'lazy' : 'eager'\" [image]=\"imageToDisplay()\"\n        [imgClass]=\"imgClass()\" [sizeRatio]=\"proportion()\"></dy-img>\n", styles: [".dy-border{display:block;height:fit-content;border:4px dashed rgb(169,169,169)}\n"] }]
        }], ctorParameters: () => [{ type: i1.TranslationClientService }, { type: i2.ImageUploadService }], propDecorators: { onKeyup: [{
                type: HostListener,
                args: ['click']
            }] } });
//# sourceMappingURL=data:application/json;base64,