import { Component, computed, input, model, ViewChild } from '@angular/core';
import { DyTransitionDirective } from "../../../../directives/dy-transition.directive";
import * as i0 from "@angular/core";
export class DyImgComponent {
    constructor() {
        this.imgClass = input('');
        this.imgStyle = input('');
        this.image = input.required();
        this.alt = input.required();
        this.transitionName = input('none');
        this.sizeRatio = input(100);
        this.srcSet = computed(() => {
            return this.image().compressedUrls.map((url) => `${url.url} ${url.width}w`).join(', ');
        });
        this.sizes = computed(() => {
            return this.image().compressedUrls.map((url) => `(max-width: ${((Number(url.width) * 100) / this.sizeRatio())}px) ` + url.width + "px").join(', ');
        });
        this.height = model();
        this.width = model();
    }
    ngAfterViewChecked() {
        this.updateParentAttributes();
    }
    updateParentAttributes() {
        const img = this.imageElement.nativeElement;
        const parentAnchor = img.parentElement;
        if (parentAnchor) {
            // parentAnchor.setAttribute('href', img.src);
            if (img.complete) {
                this.updateAttributes(parentAnchor, img);
            }
            else {
                img.onload = () => {
                    this.updateAttributes(parentAnchor, img);
                };
            }
        }
    }
    updateAttributes(parentAnchor, img) {
        const originalWidth = img.naturalWidth;
        const originalHeight = img.naturalHeight;
        const windowHeight = window.innerHeight * 0.9;
        this.height.set(img.naturalHeight);
        this.width.set(img.naturalWidth);
        //   // Update parent <a> attributes
        //   parentAnchor.setAttribute('data-pswp-width', Math.round(originalWidth / originalHeight * windowHeight).toString());
        //   parentAnchor.setAttribute('data-pswp-height', windowHeight.toString());
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.10", ngImport: i0, type: DyImgComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "17.1.0", version: "17.3.10", type: DyImgComponent, isStandalone: true, selector: "dy-img", inputs: { imgClass: { classPropertyName: "imgClass", publicName: "imgClass", isSignal: true, isRequired: false, transformFunction: null }, imgStyle: { classPropertyName: "imgStyle", publicName: "imgStyle", isSignal: true, isRequired: false, transformFunction: null }, image: { classPropertyName: "image", publicName: "image", isSignal: true, isRequired: true, transformFunction: null }, alt: { classPropertyName: "alt", publicName: "alt", isSignal: true, isRequired: true, transformFunction: null }, transitionName: { classPropertyName: "transitionName", publicName: "transitionName", isSignal: true, isRequired: false, transformFunction: null }, sizeRatio: { classPropertyName: "sizeRatio", publicName: "sizeRatio", isSignal: true, isRequired: false, transformFunction: null }, height: { classPropertyName: "height", publicName: "height", isSignal: true, isRequired: false, transformFunction: null }, width: { classPropertyName: "width", publicName: "width", isSignal: true, isRequired: false, transformFunction: null } }, outputs: { height: "heightChange", width: "widthChange" }, viewQueries: [{ propertyName: "imageElement", first: true, predicate: ["imageElement"], descendants: true }], ngImport: i0, template: "<img\n  #imageElement\n  [alt]=\"alt()\"\n  [class]=\"imgClass()\"\n  [dyTransition]=\"transitionName()\"\n  [sizes]=\"'(max-width: 768px) 100vw, '+sizeRatio()+'vw'\"\n  [src]=\"image().thumbnailUrl\"\n  [srcset]=\"srcSet()\"\n  [style]=\"imgStyle()\"\n/>\n", styles: [""], dependencies: [{ kind: "directive", type: DyTransitionDirective, selector: "[dyTransition]", inputs: ["dyTransition"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.10", ngImport: i0, type: DyImgComponent, decorators: [{
            type: Component,
            args: [{ selector: 'dy-img', standalone: true, imports: [
                        DyTransitionDirective
                    ], template: "<img\n  #imageElement\n  [alt]=\"alt()\"\n  [class]=\"imgClass()\"\n  [dyTransition]=\"transitionName()\"\n  [sizes]=\"'(max-width: 768px) 100vw, '+sizeRatio()+'vw'\"\n  [src]=\"image().thumbnailUrl\"\n  [srcset]=\"srcSet()\"\n  [style]=\"imgStyle()\"\n/>\n" }]
        }], propDecorators: { imageElement: [{
                type: ViewChild,
                args: ['imageElement']
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHktaW1nLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2N1c3RvbS1kaXNwbGF5L3NyYy9saWIvY29tcG9uZW50cy9pbWFnZXMvdGFnL2R5LWltZy9keS1pbWcuY29tcG9uZW50LnRzIiwiLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvY3VzdG9tLWRpc3BsYXkvc3JjL2xpYi9jb21wb25lbnRzL2ltYWdlcy90YWcvZHktaW1nL2R5LWltZy5jb21wb25lbnQuaHRtbCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQW1CLFNBQVMsRUFBRSxRQUFRLEVBQWMsS0FBSyxFQUFFLEtBQUssRUFBRSxTQUFTLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFHekcsT0FBTyxFQUFDLHFCQUFxQixFQUFDLE1BQU0sZ0RBQWdELENBQUM7O0FBV3JGLE1BQU0sT0FBTyxjQUFjO0lBVDNCO1FBWUUsYUFBUSxHQUFHLEtBQUssQ0FBUyxFQUFFLENBQUMsQ0FBQTtRQUM1QixhQUFRLEdBQUcsS0FBSyxDQUFTLEVBQUUsQ0FBQyxDQUFBO1FBQzVCLFVBQUssR0FBRyxLQUFLLENBQUMsUUFBUSxFQUFXLENBQUE7UUFDakMsUUFBRyxHQUFHLEtBQUssQ0FBQyxRQUFRLEVBQVUsQ0FBQTtRQUM5QixtQkFBYyxHQUFHLEtBQUssQ0FBUyxNQUFNLENBQUMsQ0FBQTtRQUN0QyxjQUFTLEdBQUcsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFBO1FBRXRCLFdBQU0sR0FBRyxRQUFRLENBQUMsR0FBRyxFQUFFO1lBQ3JCLE9BQU8sSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDLGNBQWMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFrQixFQUFFLEVBQUUsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxHQUFHLElBQUksR0FBRyxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ3hHLENBQUMsQ0FBQyxDQUFBO1FBQ0YsVUFBSyxHQUFHLFFBQVEsQ0FBQyxHQUFHLEVBQUU7WUFDcEIsT0FBTyxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUMsY0FBYyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQWtCLEVBQUUsRUFBRSxDQUFDLGVBQWUsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsR0FBRyxDQUFDLEdBQUcsSUFBSSxDQUFDLFNBQVMsRUFBRSxDQUFDLE1BQU0sR0FBRyxHQUFHLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUNwSyxDQUFDLENBQUMsQ0FBQTtRQUVGLFdBQU0sR0FBRyxLQUFLLEVBQVUsQ0FBQTtRQUN4QixVQUFLLEdBQUcsS0FBSyxFQUFVLENBQUE7S0FpQ3hCO0lBL0JDLGtCQUFrQjtRQUNoQixJQUFJLENBQUMsc0JBQXNCLEVBQUUsQ0FBQztJQUNoQyxDQUFDO0lBRUQsc0JBQXNCO1FBQ3BCLE1BQU0sR0FBRyxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUMsYUFBYSxDQUFDO1FBQzVDLE1BQU0sWUFBWSxHQUFHLEdBQUcsQ0FBQyxhQUFhLENBQUM7UUFDdkMsSUFBSSxZQUFZLEVBQUU7WUFDaEIsOENBQThDO1lBQzlDLElBQUksR0FBRyxDQUFDLFFBQVEsRUFBRTtnQkFDaEIsSUFBSSxDQUFDLGdCQUFnQixDQUFDLFlBQWEsRUFBRSxHQUFHLENBQUMsQ0FBQzthQUMzQztpQkFBTTtnQkFDTCxHQUFHLENBQUMsTUFBTSxHQUFHLEdBQUcsRUFBRTtvQkFDaEIsSUFBSSxDQUFDLGdCQUFnQixDQUFDLFlBQWEsRUFBRSxHQUFHLENBQUMsQ0FBQztnQkFDNUMsQ0FBQyxDQUFDO2FBQ0g7U0FDRjtJQUNILENBQUM7SUFFRCxnQkFBZ0IsQ0FBQyxZQUF5QixFQUFFLEdBQXFCO1FBQy9ELE1BQU0sYUFBYSxHQUFHLEdBQUcsQ0FBQyxZQUFZLENBQUM7UUFDdkMsTUFBTSxjQUFjLEdBQUcsR0FBRyxDQUFDLGFBQWEsQ0FBQztRQUV6QyxNQUFNLFlBQVksR0FBRyxNQUFNLENBQUMsV0FBVyxHQUFHLEdBQUcsQ0FBQztRQUU5QyxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsYUFBYSxDQUFDLENBQUE7UUFDbEMsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLFlBQVksQ0FBQyxDQUFBO1FBQ2hDLG9DQUFvQztRQUNwQyx3SEFBd0g7UUFDeEgsNEVBQTRFO0lBQzlFLENBQUM7K0dBbERVLGNBQWM7bUdBQWQsY0FBYywydUNDZDNCLG1RQVVBLDBERERJLHFCQUFxQjs7NEZBS1osY0FBYztrQkFUMUIsU0FBUzsrQkFDRSxRQUFRLGNBQ04sSUFBSSxXQUNQO3dCQUNQLHFCQUFxQjtxQkFDdEI7OEJBSzBCLFlBQVk7c0JBQXRDLFNBQVM7dUJBQUMsY0FBYyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7QWZ0ZXJWaWV3Q2hlY2tlZCwgQ29tcG9uZW50LCBjb21wdXRlZCwgRWxlbWVudFJlZiwgaW5wdXQsIG1vZGVsLCBWaWV3Q2hpbGR9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtEeUltYWdlfSBmcm9tIFwiLi4vLi4vLi4vLi4vbW9kZWwvaW1hZ2VzL2R5LWltYWdlXCI7XG5pbXBvcnQge0NvbXByZXNzZWRVcmx9IGZyb20gXCIuLi8uLi8uLi8uLi9tb2RlbC9pbWFnZXMvY29tcHJlc3NlZC11cmxcIjtcbmltcG9ydCB7RHlUcmFuc2l0aW9uRGlyZWN0aXZlfSBmcm9tIFwiLi4vLi4vLi4vLi4vZGlyZWN0aXZlcy9keS10cmFuc2l0aW9uLmRpcmVjdGl2ZVwiO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdkeS1pbWcnLFxuICBzdGFuZGFsb25lOiB0cnVlLFxuICBpbXBvcnRzOiBbXG4gICAgRHlUcmFuc2l0aW9uRGlyZWN0aXZlXG4gIF0sXG4gIHRlbXBsYXRlVXJsOiAnLi9keS1pbWcuY29tcG9uZW50Lmh0bWwnLFxuICBzdHlsZVVybDogJy4vZHktaW1nLmNvbXBvbmVudC5jc3MnXG59KVxuZXhwb3J0IGNsYXNzIER5SW1nQ29tcG9uZW50IGltcGxlbWVudHMgQWZ0ZXJWaWV3Q2hlY2tlZCB7XG4gIEBWaWV3Q2hpbGQoJ2ltYWdlRWxlbWVudCcpIGltYWdlRWxlbWVudCE6IEVsZW1lbnRSZWY8SFRNTEltYWdlRWxlbWVudD47XG5cbiAgaW1nQ2xhc3MgPSBpbnB1dDxzdHJpbmc+KCcnKVxuICBpbWdTdHlsZSA9IGlucHV0PHN0cmluZz4oJycpXG4gIGltYWdlID0gaW5wdXQucmVxdWlyZWQ8RHlJbWFnZT4oKVxuICBhbHQgPSBpbnB1dC5yZXF1aXJlZDxzdHJpbmc+KClcbiAgdHJhbnNpdGlvbk5hbWUgPSBpbnB1dDxzdHJpbmc+KCdub25lJylcbiAgc2l6ZVJhdGlvID0gaW5wdXQoMTAwKVxuXG4gIHNyY1NldCA9IGNvbXB1dGVkKCgpID0+IHtcbiAgICByZXR1cm4gdGhpcy5pbWFnZSgpLmNvbXByZXNzZWRVcmxzLm1hcCgodXJsOiBDb21wcmVzc2VkVXJsKSA9PiBgJHt1cmwudXJsfSAke3VybC53aWR0aH13YCkuam9pbignLCAnKTtcbiAgfSlcbiAgc2l6ZXMgPSBjb21wdXRlZCgoKSA9PiB7XG4gICAgcmV0dXJuIHRoaXMuaW1hZ2UoKS5jb21wcmVzc2VkVXJscy5tYXAoKHVybDogQ29tcHJlc3NlZFVybCkgPT4gYChtYXgtd2lkdGg6ICR7KChOdW1iZXIodXJsLndpZHRoKSAqIDEwMCkgLyB0aGlzLnNpemVSYXRpbygpKX1weCkgYCArIHVybC53aWR0aCArIFwicHhcIikuam9pbignLCAnKTtcbiAgfSlcblxuICBoZWlnaHQgPSBtb2RlbDxudW1iZXI+KClcbiAgd2lkdGggPSBtb2RlbDxudW1iZXI+KClcblxuICBuZ0FmdGVyVmlld0NoZWNrZWQoKTogdm9pZCB7XG4gICAgdGhpcy51cGRhdGVQYXJlbnRBdHRyaWJ1dGVzKCk7XG4gIH1cblxuICB1cGRhdGVQYXJlbnRBdHRyaWJ1dGVzKCk6IHZvaWQge1xuICAgIGNvbnN0IGltZyA9IHRoaXMuaW1hZ2VFbGVtZW50Lm5hdGl2ZUVsZW1lbnQ7XG4gICAgY29uc3QgcGFyZW50QW5jaG9yID0gaW1nLnBhcmVudEVsZW1lbnQ7XG4gICAgaWYgKHBhcmVudEFuY2hvcikge1xuICAgICAgLy8gcGFyZW50QW5jaG9yLnNldEF0dHJpYnV0ZSgnaHJlZicsIGltZy5zcmMpO1xuICAgICAgaWYgKGltZy5jb21wbGV0ZSkge1xuICAgICAgICB0aGlzLnVwZGF0ZUF0dHJpYnV0ZXMocGFyZW50QW5jaG9yISwgaW1nKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGltZy5vbmxvYWQgPSAoKSA9PiB7XG4gICAgICAgICAgdGhpcy51cGRhdGVBdHRyaWJ1dGVzKHBhcmVudEFuY2hvciEsIGltZyk7XG4gICAgICAgIH07XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgdXBkYXRlQXR0cmlidXRlcyhwYXJlbnRBbmNob3I6IEhUTUxFbGVtZW50LCBpbWc6IEhUTUxJbWFnZUVsZW1lbnQpOiB2b2lkIHtcbiAgICBjb25zdCBvcmlnaW5hbFdpZHRoID0gaW1nLm5hdHVyYWxXaWR0aDtcbiAgICBjb25zdCBvcmlnaW5hbEhlaWdodCA9IGltZy5uYXR1cmFsSGVpZ2h0O1xuXG4gICAgY29uc3Qgd2luZG93SGVpZ2h0ID0gd2luZG93LmlubmVySGVpZ2h0ICogMC45O1xuXG4gICAgdGhpcy5oZWlnaHQuc2V0KGltZy5uYXR1cmFsSGVpZ2h0KVxuICAgIHRoaXMud2lkdGguc2V0KGltZy5uYXR1cmFsV2lkdGgpXG4gICAgLy8gICAvLyBVcGRhdGUgcGFyZW50IDxhPiBhdHRyaWJ1dGVzXG4gICAgLy8gICBwYXJlbnRBbmNob3Iuc2V0QXR0cmlidXRlKCdkYXRhLXBzd3Atd2lkdGgnLCBNYXRoLnJvdW5kKG9yaWdpbmFsV2lkdGggLyBvcmlnaW5hbEhlaWdodCAqIHdpbmRvd0hlaWdodCkudG9TdHJpbmcoKSk7XG4gICAgLy8gICBwYXJlbnRBbmNob3Iuc2V0QXR0cmlidXRlKCdkYXRhLXBzd3AtaGVpZ2h0Jywgd2luZG93SGVpZ2h0LnRvU3RyaW5nKCkpO1xuICB9XG59XG4iLCI8aW1nXG4gICNpbWFnZUVsZW1lbnRcbiAgW2FsdF09XCJhbHQoKVwiXG4gIFtjbGFzc109XCJpbWdDbGFzcygpXCJcbiAgW2R5VHJhbnNpdGlvbl09XCJ0cmFuc2l0aW9uTmFtZSgpXCJcbiAgW3NpemVzXT1cIicobWF4LXdpZHRoOiA3NjhweCkgMTAwdncsICcrc2l6ZVJhdGlvKCkrJ3Z3J1wiXG4gIFtzcmNdPVwiaW1hZ2UoKS50aHVtYm5haWxVcmxcIlxuICBbc3Jjc2V0XT1cInNyY1NldCgpXCJcbiAgW3N0eWxlXT1cImltZ1N0eWxlKClcIlxuLz5cbiJdfQ==