import { Component } from '@angular/core';
import { MatDialogActions, MatDialogClose, MatDialogContent, MatDialogTitle, } from '@angular/material/dialog';
import { MatButtonModule } from '@angular/material/button';
import { FormsModule, ReactiveFormsModule } from '@angular/forms';
import { MatInputModule } from '@angular/material/input';
import { MatFormFieldModule } from '@angular/material/form-field';
import { MatIconModule } from "@angular/material/icon";
import * as i0 from "@angular/core";
import * as i1 from "@angular/material/dialog";
import * as i2 from "@angular/material/form-field";
import * as i3 from "@angular/material/input";
import * as i4 from "@angular/forms";
import * as i5 from "@angular/material/button";
import * as i6 from "@angular/material/icon";
export class UploadImageModalComponent {
    constructor(dialogRef) {
        this.dialogRef = dialogRef;
        this.imgAlt = '';
        this.file = undefined;
        this.preview = '';
    }
    onFileChanged(event) {
        this.file = event.target.files[0];
        this.preview = '';
        const reader = new FileReader();
        reader.onload = (e) => {
            console.log(e.target?.result);
            this.preview = e.target?.result;
        };
        reader.readAsDataURL(this.file);
    }
    onNoClick() {
        this.dialogRef.close();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.10", ngImport: i0, type: UploadImageModalComponent, deps: [{ token: i1.MatDialogRef }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "17.0.0", version: "17.3.10", type: UploadImageModalComponent, isStandalone: true, selector: "app-upload-image-modal", ngImport: i0, template: "<h1 mat-dialog-title>S\u00E9lectionner une image</h1>\n<div mat-dialog-content>\n  <div style=\"width: 600px\">\n    <div class=\"s300\">\n      <div class=\"row\">\n        <div class=\"col-12\" style=\"margin-bottom: 1rem\">\n          <button (click)=\"fileInput.click()\" class=\"mat-primary\" mat-raised-button>\n            <mat-icon aria-hidden=\"false\" aria-label=\"upload\" fontIcon=\"upload\"></mat-icon>\n            <span>S\u00E9lectionner une image</span>\n            <input #fileInput (change)=\"onFileChanged($event)\" required style=\"display:none;\" type=\"file\"/>\n          </button>\n        </div>\n        <div class=\"col-12\">\n          <mat-form-field>\n            <mat-label>Description de l'image</mat-label>\n            <input [(ngModel)]=\"imgAlt\" matInput required>\n          </mat-form-field>\n        </div>\n      </div>\n    </div>\n    <div class=\"s300\">\n      @if (preview) {\n        <img src=\"{{ preview }}\" alt=\"\" class=\"img-fluid\">\n      }\n    </div>\n  </div>\n</div>\n<div mat-dialog-actions>\n  <button (click)=\"onNoClick()\" mat-button>Annuler</button>\n  <button [disabled]=\"!imgAlt || !file\" [mat-dialog-close]=\"{alt: imgAlt, file: file}\" class=\"mat-accent\"\n          mat-raised-button>Ajouter\n  </button>\n</div>\n", styles: [".s300{display:inline-block;width:300px;vertical-align:middle}\n"], dependencies: [{ kind: "ngmodule", type: MatFormFieldModule }, { kind: "component", type: i2.MatFormField, selector: "mat-form-field", inputs: ["hideRequiredMarker", "color", "floatLabel", "appearance", "subscriptSizing", "hintLabel"], exportAs: ["matFormField"] }, { kind: "directive", type: i2.MatLabel, selector: "mat-label" }, { kind: "ngmodule", type: MatInputModule }, { kind: "directive", type: i3.MatInput, selector: "input[matInput], textarea[matInput], select[matNativeControl],      input[matNativeControl], textarea[matNativeControl]", inputs: ["disabled", "id", "placeholder", "name", "required", "type", "errorStateMatcher", "aria-describedby", "value", "readonly"], exportAs: ["matInput"] }, { kind: "ngmodule", type: FormsModule }, { kind: "directive", type: i4.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { kind: "directive", type: i4.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i4.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { kind: "directive", type: i4.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { kind: "ngmodule", type: MatButtonModule }, { kind: "component", type: i5.MatButton, selector: "    button[mat-button], button[mat-raised-button], button[mat-flat-button],    button[mat-stroked-button]  ", exportAs: ["matButton"] }, { kind: "directive", type: MatDialogTitle, selector: "[mat-dialog-title], [matDialogTitle]", inputs: ["id"], exportAs: ["matDialogTitle"] }, { kind: "directive", type: MatDialogContent, selector: "[mat-dialog-content], mat-dialog-content, [matDialogContent]" }, { kind: "directive", type: MatDialogActions, selector: "[mat-dialog-actions], mat-dialog-actions, [matDialogActions]", inputs: ["align"] }, { kind: "directive", type: MatDialogClose, selector: "[mat-dialog-close], [matDialogClose]", inputs: ["aria-label", "type", "mat-dialog-close", "matDialogClose"], exportAs: ["matDialogClose"] }, { kind: "ngmodule", type: ReactiveFormsModule }, { kind: "ngmodule", type: MatIconModule }, { kind: "component", type: i6.MatIcon, selector: "mat-icon", inputs: ["color", "inline", "svgIcon", "fontSet", "fontIcon"], exportAs: ["matIcon"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.10", ngImport: i0, type: UploadImageModalComponent, decorators: [{
            type: Component,
            args: [{ selector: 'app-upload-image-modal', standalone: true, imports: [
                        MatFormFieldModule,
                        MatInputModule,
                        FormsModule,
                        MatButtonModule,
                        MatDialogTitle,
                        MatDialogContent,
                        MatDialogActions,
                        MatDialogClose,
                        ReactiveFormsModule,
                        MatIconModule,
                    ], template: "<h1 mat-dialog-title>S\u00E9lectionner une image</h1>\n<div mat-dialog-content>\n  <div style=\"width: 600px\">\n    <div class=\"s300\">\n      <div class=\"row\">\n        <div class=\"col-12\" style=\"margin-bottom: 1rem\">\n          <button (click)=\"fileInput.click()\" class=\"mat-primary\" mat-raised-button>\n            <mat-icon aria-hidden=\"false\" aria-label=\"upload\" fontIcon=\"upload\"></mat-icon>\n            <span>S\u00E9lectionner une image</span>\n            <input #fileInput (change)=\"onFileChanged($event)\" required style=\"display:none;\" type=\"file\"/>\n          </button>\n        </div>\n        <div class=\"col-12\">\n          <mat-form-field>\n            <mat-label>Description de l'image</mat-label>\n            <input [(ngModel)]=\"imgAlt\" matInput required>\n          </mat-form-field>\n        </div>\n      </div>\n    </div>\n    <div class=\"s300\">\n      @if (preview) {\n        <img src=\"{{ preview }}\" alt=\"\" class=\"img-fluid\">\n      }\n    </div>\n  </div>\n</div>\n<div mat-dialog-actions>\n  <button (click)=\"onNoClick()\" mat-button>Annuler</button>\n  <button [disabled]=\"!imgAlt || !file\" [mat-dialog-close]=\"{alt: imgAlt, file: file}\" class=\"mat-accent\"\n          mat-raised-button>Ajouter\n  </button>\n</div>\n", styles: [".s300{display:inline-block;width:300px;vertical-align:middle}\n"] }]
        }], ctorParameters: () => [{ type: i1.MatDialogRef }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXBsb2FkLWltYWdlLW1vZGFsLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2N1c3RvbS1kaXNwbGF5L3NyYy9saWIvY29tcG9uZW50cy9pbWFnZXMvYWRkLWR5aW1hZ2UvdXBsb2FkLWltYWdlLW1vZGFsL3VwbG9hZC1pbWFnZS1tb2RhbC5jb21wb25lbnQudHMiLCIuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9jdXN0b20tZGlzcGxheS9zcmMvbGliL2NvbXBvbmVudHMvaW1hZ2VzL2FkZC1keWltYWdlL3VwbG9hZC1pbWFnZS1tb2RhbC91cGxvYWQtaW1hZ2UtbW9kYWwuY29tcG9uZW50Lmh0bWwiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFDLFNBQVMsRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUN4QyxPQUFPLEVBQ0wsZ0JBQWdCLEVBQ2hCLGNBQWMsRUFDZCxnQkFBZ0IsRUFFaEIsY0FBYyxHQUNmLE1BQU0sMEJBQTBCLENBQUM7QUFDbEMsT0FBTyxFQUFDLGVBQWUsRUFBQyxNQUFNLDBCQUEwQixDQUFDO0FBQ3pELE9BQU8sRUFBQyxXQUFXLEVBQUUsbUJBQW1CLEVBQUMsTUFBTSxnQkFBZ0IsQ0FBQztBQUNoRSxPQUFPLEVBQUMsY0FBYyxFQUFDLE1BQU0seUJBQXlCLENBQUM7QUFDdkQsT0FBTyxFQUFDLGtCQUFrQixFQUFDLE1BQU0sOEJBQThCLENBQUM7QUFDaEUsT0FBTyxFQUFDLGFBQWEsRUFBQyxNQUFNLHdCQUF3QixDQUFDOzs7Ozs7OztBQXFCckQsTUFBTSxPQUFPLHlCQUF5QjtJQU1wQyxZQUNTLFNBQWtEO1FBQWxELGNBQVMsR0FBVCxTQUFTLENBQXlDO1FBTnBELFdBQU0sR0FBVyxFQUFFLENBQUM7UUFDcEIsU0FBSSxHQUFRLFNBQVMsQ0FBQztRQUV0QixZQUFPLEdBQVcsRUFBRSxDQUFBO0lBSzNCLENBQUM7SUFFRCxhQUFhLENBQUMsS0FBVTtRQUN0QixJQUFJLENBQUMsSUFBSSxHQUFHLEtBQUssQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2xDLElBQUksQ0FBQyxPQUFPLEdBQUcsRUFBRSxDQUFBO1FBQ2pCLE1BQU0sTUFBTSxHQUFHLElBQUksVUFBVSxFQUFFLENBQUM7UUFFaEMsTUFBTSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsRUFBRSxFQUFFO1lBQ3BCLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLE1BQU0sRUFBRSxNQUFNLENBQUMsQ0FBQztZQUM5QixJQUFJLENBQUMsT0FBTyxHQUFHLENBQUMsQ0FBQyxNQUFNLEVBQUUsTUFBZ0IsQ0FBQTtRQUMzQyxDQUFDLENBQUE7UUFFRCxNQUFNLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUNsQyxDQUFDO0lBRUQsU0FBUztRQUNQLElBQUksQ0FBQyxTQUFTLENBQUMsS0FBSyxFQUFFLENBQUM7SUFDekIsQ0FBQzsrR0ExQlUseUJBQXlCO21HQUF6Qix5QkFBeUIsa0ZDakN0Qywyd0NBaUNBLHdIRGRJLGtCQUFrQiwwU0FDbEIsY0FBYywwV0FDZCxXQUFXLDIwQkFDWCxlQUFlLDROQUNmLGNBQWMsK0hBQ2QsZ0JBQWdCLHlHQUNoQixnQkFBZ0IsNEhBQ2hCLGNBQWMsb0xBQ2QsbUJBQW1CLDhCQUNuQixhQUFhOzs0RkFLSix5QkFBeUI7a0JBbEJyQyxTQUFTOytCQUNFLHdCQUF3QixjQUN0QixJQUFJLFdBQ1A7d0JBQ1Asa0JBQWtCO3dCQUNsQixjQUFjO3dCQUNkLFdBQVc7d0JBQ1gsZUFBZTt3QkFDZixjQUFjO3dCQUNkLGdCQUFnQjt3QkFDaEIsZ0JBQWdCO3dCQUNoQixjQUFjO3dCQUNkLG1CQUFtQjt3QkFDbkIsYUFBYTtxQkFDZCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7Q29tcG9uZW50fSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7XG4gIE1hdERpYWxvZ0FjdGlvbnMsXG4gIE1hdERpYWxvZ0Nsb3NlLFxuICBNYXREaWFsb2dDb250ZW50LFxuICBNYXREaWFsb2dSZWYsXG4gIE1hdERpYWxvZ1RpdGxlLFxufSBmcm9tICdAYW5ndWxhci9tYXRlcmlhbC9kaWFsb2cnO1xuaW1wb3J0IHtNYXRCdXR0b25Nb2R1bGV9IGZyb20gJ0Bhbmd1bGFyL21hdGVyaWFsL2J1dHRvbic7XG5pbXBvcnQge0Zvcm1zTW9kdWxlLCBSZWFjdGl2ZUZvcm1zTW9kdWxlfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5pbXBvcnQge01hdElucHV0TW9kdWxlfSBmcm9tICdAYW5ndWxhci9tYXRlcmlhbC9pbnB1dCc7XG5pbXBvcnQge01hdEZvcm1GaWVsZE1vZHVsZX0gZnJvbSAnQGFuZ3VsYXIvbWF0ZXJpYWwvZm9ybS1maWVsZCc7XG5pbXBvcnQge01hdEljb25Nb2R1bGV9IGZyb20gXCJAYW5ndWxhci9tYXRlcmlhbC9pY29uXCI7XG5cblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnYXBwLXVwbG9hZC1pbWFnZS1tb2RhbCcsXG4gIHN0YW5kYWxvbmU6IHRydWUsXG4gIGltcG9ydHM6IFtcbiAgICBNYXRGb3JtRmllbGRNb2R1bGUsXG4gICAgTWF0SW5wdXRNb2R1bGUsXG4gICAgRm9ybXNNb2R1bGUsXG4gICAgTWF0QnV0dG9uTW9kdWxlLFxuICAgIE1hdERpYWxvZ1RpdGxlLFxuICAgIE1hdERpYWxvZ0NvbnRlbnQsXG4gICAgTWF0RGlhbG9nQWN0aW9ucyxcbiAgICBNYXREaWFsb2dDbG9zZSxcbiAgICBSZWFjdGl2ZUZvcm1zTW9kdWxlLFxuICAgIE1hdEljb25Nb2R1bGUsXG4gIF0sXG4gIHRlbXBsYXRlVXJsOiAnLi91cGxvYWQtaW1hZ2UtbW9kYWwuY29tcG9uZW50Lmh0bWwnLFxuICBzdHlsZVVybDogJy4vdXBsb2FkLWltYWdlLW1vZGFsLmNvbXBvbmVudC5zY3NzJ1xufSlcbmV4cG9ydCBjbGFzcyBVcGxvYWRJbWFnZU1vZGFsQ29tcG9uZW50IHtcbiAgcHVibGljIGltZ0FsdDogc3RyaW5nID0gJyc7XG4gIHB1YmxpYyBmaWxlOiBhbnkgPSB1bmRlZmluZWQ7XG5cbiAgcHVibGljIHByZXZpZXc6IHN0cmluZyA9ICcnXG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHVibGljIGRpYWxvZ1JlZjogTWF0RGlhbG9nUmVmPFVwbG9hZEltYWdlTW9kYWxDb21wb25lbnQ+XG4gICkge1xuICB9XG5cbiAgb25GaWxlQ2hhbmdlZChldmVudDogYW55KSB7XG4gICAgdGhpcy5maWxlID0gZXZlbnQudGFyZ2V0LmZpbGVzWzBdO1xuICAgIHRoaXMucHJldmlldyA9ICcnXG4gICAgY29uc3QgcmVhZGVyID0gbmV3IEZpbGVSZWFkZXIoKTtcblxuICAgIHJlYWRlci5vbmxvYWQgPSAoZSkgPT4ge1xuICAgICAgY29uc29sZS5sb2coZS50YXJnZXQ/LnJlc3VsdCk7XG4gICAgICB0aGlzLnByZXZpZXcgPSBlLnRhcmdldD8ucmVzdWx0IGFzIHN0cmluZ1xuICAgIH1cblxuICAgIHJlYWRlci5yZWFkQXNEYXRhVVJMKHRoaXMuZmlsZSk7XG4gIH1cblxuICBvbk5vQ2xpY2soKTogdm9pZCB7XG4gICAgdGhpcy5kaWFsb2dSZWYuY2xvc2UoKTtcbiAgfVxufVxuIiwiPGgxIG1hdC1kaWFsb2ctdGl0bGU+U8OpbGVjdGlvbm5lciB1bmUgaW1hZ2U8L2gxPlxuPGRpdiBtYXQtZGlhbG9nLWNvbnRlbnQ+XG4gIDxkaXYgc3R5bGU9XCJ3aWR0aDogNjAwcHhcIj5cbiAgICA8ZGl2IGNsYXNzPVwiczMwMFwiPlxuICAgICAgPGRpdiBjbGFzcz1cInJvd1wiPlxuICAgICAgICA8ZGl2IGNsYXNzPVwiY29sLTEyXCIgc3R5bGU9XCJtYXJnaW4tYm90dG9tOiAxcmVtXCI+XG4gICAgICAgICAgPGJ1dHRvbiAoY2xpY2spPVwiZmlsZUlucHV0LmNsaWNrKClcIiBjbGFzcz1cIm1hdC1wcmltYXJ5XCIgbWF0LXJhaXNlZC1idXR0b24+XG4gICAgICAgICAgICA8bWF0LWljb24gYXJpYS1oaWRkZW49XCJmYWxzZVwiIGFyaWEtbGFiZWw9XCJ1cGxvYWRcIiBmb250SWNvbj1cInVwbG9hZFwiPjwvbWF0LWljb24+XG4gICAgICAgICAgICA8c3Bhbj5Tw6lsZWN0aW9ubmVyIHVuZSBpbWFnZTwvc3Bhbj5cbiAgICAgICAgICAgIDxpbnB1dCAjZmlsZUlucHV0IChjaGFuZ2UpPVwib25GaWxlQ2hhbmdlZCgkZXZlbnQpXCIgcmVxdWlyZWQgc3R5bGU9XCJkaXNwbGF5Om5vbmU7XCIgdHlwZT1cImZpbGVcIi8+XG4gICAgICAgICAgPC9idXR0b24+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8ZGl2IGNsYXNzPVwiY29sLTEyXCI+XG4gICAgICAgICAgPG1hdC1mb3JtLWZpZWxkPlxuICAgICAgICAgICAgPG1hdC1sYWJlbD5EZXNjcmlwdGlvbiBkZSBsJ2ltYWdlPC9tYXQtbGFiZWw+XG4gICAgICAgICAgICA8aW5wdXQgWyhuZ01vZGVsKV09XCJpbWdBbHRcIiBtYXRJbnB1dCByZXF1aXJlZD5cbiAgICAgICAgICA8L21hdC1mb3JtLWZpZWxkPlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuICAgIDxkaXYgY2xhc3M9XCJzMzAwXCI+XG4gICAgICBAaWYgKHByZXZpZXcpIHtcbiAgICAgICAgPGltZyBzcmM9XCJ7eyBwcmV2aWV3IH19XCIgYWx0PVwiXCIgY2xhc3M9XCJpbWctZmx1aWRcIj5cbiAgICAgIH1cbiAgICA8L2Rpdj5cbiAgPC9kaXY+XG48L2Rpdj5cbjxkaXYgbWF0LWRpYWxvZy1hY3Rpb25zPlxuICA8YnV0dG9uIChjbGljayk9XCJvbk5vQ2xpY2soKVwiIG1hdC1idXR0b24+QW5udWxlcjwvYnV0dG9uPlxuICA8YnV0dG9uIFtkaXNhYmxlZF09XCIhaW1nQWx0IHx8ICFmaWxlXCIgW21hdC1kaWFsb2ctY2xvc2VdPVwie2FsdDogaW1nQWx0LCBmaWxlOiBmaWxlfVwiIGNsYXNzPVwibWF0LWFjY2VudFwiXG4gICAgICAgICAgbWF0LXJhaXNlZC1idXR0b24+QWpvdXRlclxuICA8L2J1dHRvbj5cbjwvZGl2PlxuIl19