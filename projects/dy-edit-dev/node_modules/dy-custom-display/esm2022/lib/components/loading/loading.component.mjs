import { Component, Input } from '@angular/core';
import { AsyncPipe } from '@angular/common';
import { LoadingService } from "../../service/loading/loading.service";
import { MatProgressSpinnerModule } from "@angular/material/progress-spinner";
import * as i0 from "@angular/core";
import * as i1 from "../../service/loading/loading.service";
import * as i2 from "@angular/material/progress-spinner";
export class LoadingComponent {
    constructor(loadingService) {
        this.material = true;
        this.isLoading = LoadingService.isLoading();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.10", ngImport: i0, type: LoadingComponent, deps: [{ token: i1.LoadingService }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "17.0.0", version: "17.3.10", type: LoadingComponent, isStandalone: true, selector: "lib-loading", inputs: { material: "material" }, ngImport: i0, template: "@if (isLoading()) {\n  @if (material) {\n    <mat-spinner class=\"loading-spinner\"></mat-spinner>\n  } @else {\n    <div class=\"loading-spinner spinner-border\" style=\"width: 5rem; height: 5rem; font-size: 2em;\"\n         role=\"status\">\n      <span class=\"visually-hidden\">Loading...</span>\n    </div>\n  }\n}\n", styles: [".loading-spinner{position:fixed!important;height:100px;width:100px;z-index:9999;top:50%;left:50%;margin-left:-50px;margin-top:-50px}\n"], dependencies: [{ kind: "ngmodule", type: MatProgressSpinnerModule }, { kind: "component", type: i2.MatProgressSpinner, selector: "mat-progress-spinner, mat-spinner", inputs: ["color", "mode", "value", "diameter", "strokeWidth"], exportAs: ["matProgressSpinner"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.10", ngImport: i0, type: LoadingComponent, decorators: [{
            type: Component,
            args: [{ selector: 'lib-loading', standalone: true, imports: [MatProgressSpinnerModule, AsyncPipe], template: "@if (isLoading()) {\n  @if (material) {\n    <mat-spinner class=\"loading-spinner\"></mat-spinner>\n  } @else {\n    <div class=\"loading-spinner spinner-border\" style=\"width: 5rem; height: 5rem; font-size: 2em;\"\n         role=\"status\">\n      <span class=\"visually-hidden\">Loading...</span>\n    </div>\n  }\n}\n", styles: [".loading-spinner{position:fixed!important;height:100px;width:100px;z-index:9999;top:50%;left:50%;margin-left:-50px;margin-top:-50px}\n"] }]
        }], ctorParameters: () => [{ type: i1.LoadingService }], propDecorators: { material: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9hZGluZy5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9jdXN0b20tZGlzcGxheS9zcmMvbGliL2NvbXBvbmVudHMvbG9hZGluZy9sb2FkaW5nLmNvbXBvbmVudC50cyIsIi4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2N1c3RvbS1kaXNwbGF5L3NyYy9saWIvY29tcG9uZW50cy9sb2FkaW5nL2xvYWRpbmcuY29tcG9uZW50Lmh0bWwiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFDLFNBQVMsRUFBRSxLQUFLLEVBQVMsTUFBTSxlQUFlLENBQUM7QUFDdkQsT0FBTyxFQUFDLFNBQVMsRUFBQyxNQUFNLGlCQUFpQixDQUFDO0FBQzFDLE9BQU8sRUFBQyxjQUFjLEVBQUMsTUFBTSx1Q0FBdUMsQ0FBQztBQUNyRSxPQUFPLEVBQUMsd0JBQXdCLEVBQUMsTUFBTSxvQ0FBb0MsQ0FBQzs7OztBQVM1RSxNQUFNLE9BQU8sZ0JBQWdCO0lBSTNCLFlBQVksY0FBOEI7UUFIMUIsYUFBUSxHQUFZLElBQUksQ0FBQztRQUl2QyxJQUFJLENBQUMsU0FBUyxHQUFHLGNBQWMsQ0FBQyxTQUFTLEVBQUUsQ0FBQTtJQUM3QyxDQUFDOytHQU5VLGdCQUFnQjttR0FBaEIsZ0JBQWdCLHlHQ1o3QixtVUFVQSwrTERGWSx3QkFBd0I7OzRGQUl2QixnQkFBZ0I7a0JBUDVCLFNBQVM7K0JBQ0UsYUFBYSxjQUNYLElBQUksV0FDUCxDQUFDLHdCQUF3QixFQUFFLFNBQVMsQ0FBQzttRkFLOUIsUUFBUTtzQkFBdkIsS0FBSyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7Q29tcG9uZW50LCBJbnB1dCwgU2lnbmFsfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7QXN5bmNQaXBlfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuaW1wb3J0IHtMb2FkaW5nU2VydmljZX0gZnJvbSBcIi4uLy4uL3NlcnZpY2UvbG9hZGluZy9sb2FkaW5nLnNlcnZpY2VcIjtcbmltcG9ydCB7TWF0UHJvZ3Jlc3NTcGlubmVyTW9kdWxlfSBmcm9tIFwiQGFuZ3VsYXIvbWF0ZXJpYWwvcHJvZ3Jlc3Mtc3Bpbm5lclwiO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdsaWItbG9hZGluZycsXG4gIHN0YW5kYWxvbmU6IHRydWUsXG4gIGltcG9ydHM6IFtNYXRQcm9ncmVzc1NwaW5uZXJNb2R1bGUsIEFzeW5jUGlwZV0sXG4gIHRlbXBsYXRlVXJsOiAnLi9sb2FkaW5nLmNvbXBvbmVudC5odG1sJyxcbiAgc3R5bGVVcmw6ICcuL2xvYWRpbmcuY29tcG9uZW50LmNzcydcbn0pXG5leHBvcnQgY2xhc3MgTG9hZGluZ0NvbXBvbmVudCB7XG4gIEBJbnB1dCgpIHB1YmxpYyBtYXRlcmlhbDogYm9vbGVhbiA9IHRydWU7XG4gIHByb3RlY3RlZCBpc0xvYWRpbmc6IFNpZ25hbDxib29sZWFuPjtcblxuICBjb25zdHJ1Y3Rvcihsb2FkaW5nU2VydmljZTogTG9hZGluZ1NlcnZpY2UpIHtcbiAgICB0aGlzLmlzTG9hZGluZyA9IExvYWRpbmdTZXJ2aWNlLmlzTG9hZGluZygpXG4gIH1cbn1cbiIsIkBpZiAoaXNMb2FkaW5nKCkpIHtcbiAgQGlmIChtYXRlcmlhbCkge1xuICAgIDxtYXQtc3Bpbm5lciBjbGFzcz1cImxvYWRpbmctc3Bpbm5lclwiPjwvbWF0LXNwaW5uZXI+XG4gIH0gQGVsc2Uge1xuICAgIDxkaXYgY2xhc3M9XCJsb2FkaW5nLXNwaW5uZXIgc3Bpbm5lci1ib3JkZXJcIiBzdHlsZT1cIndpZHRoOiA1cmVtOyBoZWlnaHQ6IDVyZW07IGZvbnQtc2l6ZTogMmVtO1wiXG4gICAgICAgICByb2xlPVwic3RhdHVzXCI+XG4gICAgICA8c3BhbiBjbGFzcz1cInZpc3VhbGx5LWhpZGRlblwiPkxvYWRpbmcuLi48L3NwYW4+XG4gICAgPC9kaXY+XG4gIH1cbn1cbiJdfQ==