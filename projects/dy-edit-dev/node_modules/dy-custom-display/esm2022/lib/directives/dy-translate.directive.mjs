import { Directive, HostListener, Input } from '@angular/core';
import * as i0 from "@angular/core";
import * as i1 from "../service/translate/translation-client.service";
import * as i2 from "../service/dy-text-editor/dy-text-editor.service";
export class DyTranslateDirective {
    constructor(el, renderer, clientService, dyTextEditorService) {
        this.el = el;
        this.renderer = renderer;
        this.clientService = clientService;
        this.dyTextEditorService = dyTextEditorService;
        this.editMode = false;
        this.previousValue = '';
    }
    ngOnInit() {
        const originalBorder = this.el.nativeElement.style.outline;
        this.renderer.listen(this.el.nativeElement, 'paste', (event) => {
            if (this.editMode) {
                event.preventDefault();
                const text = (event.clipboardData).getData('text');
                this.renderer.setProperty(this.el.nativeElement, 'innerText', this.el.nativeElement.innerText + text);
            }
        });
        this.clientService.editSubject.subscribe(editMode => {
            this.editMode = editMode;
            this.el.nativeElement.contentEditable = this.editMode;
            // Get the native element using ElementRef
            const element = this.el.nativeElement;
            // Check the condition and apply the dashed border if needed
            if (this.editMode) {
                element.style.outline = '1px dashed #a9a9a9';
            }
            else {
                element.style.outline = originalBorder;
            }
        });
    }
    addNewEditorData(value) {
        if (this.appDyTranslate.includes('editor')) {
            this.dyTextEditorService.addNewEditorData(this.appDyTranslate, value);
        }
    }
    onKeyup(event) {
        const value = this.el.nativeElement.innerHTML;
        if (value != this.previousValue) {
            this.previousValue = value;
            this.addNewEditorData(value);
            this.save(value);
        }
    }
    onClick() {
        if (this.editMode && this.appDyTranslate.includes('editor')) {
            this.dyTextEditorService.displayEditorSubject.next(true);
            setTimeout(() => {
                this.addNewEditorData(this.el.nativeElement.innerHTML);
            }, 50); // why this timeout?
        }
        else {
            this.dyTextEditorService.displayEditorSubject.next(false);
        }
    }
    save(value) {
        if (value) {
            this.clientService.next(this.appDyTranslate, value);
        }
    }
    ngAfterViewInit() {
        this.clientService.streamTranslation(this.appDyTranslate).subscribe(value => {
            if (value == this.appDyTranslate && this.el.nativeElement.innerHTML) {
                this.clientService.next(this.appDyTranslate, this.el.nativeElement.innerHTML);
            }
            else {
                this.el.nativeElement.innerHTML = value;
            }
            this.el.nativeElement.contentEditable = this.editMode;
        });
        if (this.appDyTranslate.includes('editor')) {
            this.dyTextEditorService.editorDataChange.subscribe((newValue) => {
                if (newValue.key == this.appDyTranslate) {
                    if (newValue.value != this.previousValue) {
                        this.previousValue = newValue.value;
                        this.el.nativeElement.innerHTML = newValue.value;
                        this.save(newValue.value);
                    }
                }
            });
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.10", ngImport: i0, type: DyTranslateDirective, deps: [{ token: i0.ElementRef }, { token: i0.Renderer2 }, { token: i1.TranslationClientService }, { token: i2.DyTextEditorService }], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "17.3.10", type: DyTranslateDirective, isStandalone: true, selector: "[appDyTranslate]", inputs: { appDyTranslate: "appDyTranslate" }, host: { listeners: { "keyup": "onKeyup($event)", "click": "onClick()" } }, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.10", ngImport: i0, type: DyTranslateDirective, decorators: [{
            type: Directive,
            args: [{
                    standalone: true,
                    selector: '[appDyTranslate]'
                }]
        }], ctorParameters: () => [{ type: i0.ElementRef }, { type: i0.Renderer2 }, { type: i1.TranslationClientService }, { type: i2.DyTextEditorService }], propDecorators: { appDyTranslate: [{
                type: Input,
                args: [{ required: true }]
            }], onKeyup: [{
                type: HostListener,
                args: ['keyup', ['$event']]
            }], onClick: [{
                type: HostListener,
                args: ['click']
            }] } });
//# sourceMappingURL=data:application/json;base64,