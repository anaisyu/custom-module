import { Directive, Input } from '@angular/core';
import { combineLatest, Subject, takeUntil } from "rxjs";
import * as i0 from "@angular/core";
import * as i1 from "@ngx-translate/core";
import * as i2 from "../service/translate/translation-client.service";
export class DyDisplayDirective {
    constructor(el, service, clientService) {
        this.el = el;
        this.service = service;
        this.clientService = clientService;
        this.destroy$ = new Subject();
    }
    ngOnDestroy() {
        this.destroy$.next();
        this.destroy$.complete();
    }
    ngAfterViewInit() {
        combineLatest([this.service.get(this.appDyDisplay), this.clientService.editSubject])
            .pipe(takeUntil(this.destroy$))
            .subscribe(([translateValue, editValue]) => {
            // Do something with both values
            if (translateValue != this.appDyDisplay || editValue) {
                this.el.nativeElement.style.display = 'block';
            }
            else {
                this.el.nativeElement.style.display = 'none';
            }
        });
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.10", ngImport: i0, type: DyDisplayDirective, deps: [{ token: i0.ElementRef }, { token: i1.TranslateService }, { token: i2.TranslationClientService }], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "17.3.10", type: DyDisplayDirective, selector: "[appDyDisplay]", inputs: { appDyDisplay: "appDyDisplay" }, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.10", ngImport: i0, type: DyDisplayDirective, decorators: [{
            type: Directive,
            args: [{
                    standalone: false,
                    selector: '[appDyDisplay]'
                }]
        }], ctorParameters: () => [{ type: i0.ElementRef }, { type: i1.TranslateService }, { type: i2.TranslationClientService }], propDecorators: { appDyDisplay: [{
                type: Input,
                args: [{ required: true }]
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHktZGlzcGxheS5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9jdXN0b20tZGlzcGxheS9zcmMvbGliL2RpcmVjdGl2ZXMvZHktZGlzcGxheS5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFnQixTQUFTLEVBQWMsS0FBSyxFQUFZLE1BQU0sZUFBZSxDQUFDO0FBR3JGLE9BQU8sRUFBQyxhQUFhLEVBQUUsT0FBTyxFQUFFLFNBQVMsRUFBQyxNQUFNLE1BQU0sQ0FBQzs7OztBQU12RCxNQUFNLE9BQU8sa0JBQWtCO0lBSTdCLFlBQW9CLEVBQWMsRUFBVSxPQUF5QixFQUFVLGFBQXVDO1FBQWxHLE9BQUUsR0FBRixFQUFFLENBQVk7UUFBVSxZQUFPLEdBQVAsT0FBTyxDQUFrQjtRQUFVLGtCQUFhLEdBQWIsYUFBYSxDQUEwQjtRQUY5RyxhQUFRLEdBQUcsSUFBSSxPQUFPLEVBQVEsQ0FBQztJQUl2QyxDQUFDO0lBRUQsV0FBVztRQUNULElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLENBQUM7UUFDckIsSUFBSSxDQUFDLFFBQVEsQ0FBQyxRQUFRLEVBQUUsQ0FBQztJQUMzQixDQUFDO0lBRUQsZUFBZTtRQUNiLGFBQWEsQ0FBQyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsRUFBRSxJQUFJLENBQUMsYUFBYSxDQUFDLFdBQVcsQ0FBQyxDQUFDO2FBQ2pGLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO2FBQzlCLFNBQVMsQ0FBQyxDQUFDLENBQUMsY0FBYyxFQUFFLFNBQVMsQ0FBQyxFQUFFLEVBQUU7WUFDekMsZ0NBQWdDO1lBQ2hDLElBQUksY0FBYyxJQUFJLElBQUksQ0FBQyxZQUFZLElBQUksU0FBUyxFQUFFO2dCQUNwRCxJQUFJLENBQUMsRUFBRSxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsT0FBTyxHQUFHLE9BQU8sQ0FBQTthQUM5QztpQkFBTTtnQkFDTCxJQUFJLENBQUMsRUFBRSxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsT0FBTyxHQUFHLE1BQU0sQ0FBQTthQUM3QztRQUNILENBQUMsQ0FBQyxDQUFDO0lBQ1AsQ0FBQzsrR0F4QlUsa0JBQWtCO21HQUFsQixrQkFBa0I7OzRGQUFsQixrQkFBa0I7a0JBSjlCLFNBQVM7bUJBQUM7b0JBQ1QsVUFBVSxFQUFFLEtBQUs7b0JBQ2pCLFFBQVEsRUFBRSxnQkFBZ0I7aUJBQzNCO3FKQUUwQixZQUFZO3NCQUFwQyxLQUFLO3VCQUFDLEVBQUMsUUFBUSxFQUFFLElBQUksRUFBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7QWZ0ZXJWaWV3SW5pdCwgRGlyZWN0aXZlLCBFbGVtZW50UmVmLCBJbnB1dCwgT25EZXN0cm95fSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7VHJhbnNsYXRlU2VydmljZX0gZnJvbSBcIkBuZ3gtdHJhbnNsYXRlL2NvcmVcIjtcbmltcG9ydCB7VHJhbnNsYXRpb25DbGllbnRTZXJ2aWNlfSBmcm9tIFwiLi4vc2VydmljZS90cmFuc2xhdGUvdHJhbnNsYXRpb24tY2xpZW50LnNlcnZpY2VcIjtcbmltcG9ydCB7Y29tYmluZUxhdGVzdCwgU3ViamVjdCwgdGFrZVVudGlsfSBmcm9tIFwicnhqc1wiO1xuXG5ARGlyZWN0aXZlKHtcbiAgc3RhbmRhbG9uZTogZmFsc2UsXG4gIHNlbGVjdG9yOiAnW2FwcER5RGlzcGxheV0nXG59KVxuZXhwb3J0IGNsYXNzIER5RGlzcGxheURpcmVjdGl2ZSBpbXBsZW1lbnRzIEFmdGVyVmlld0luaXQsIE9uRGVzdHJveSB7XG4gIEBJbnB1dCh7cmVxdWlyZWQ6IHRydWV9KSBhcHBEeURpc3BsYXkhOiBzdHJpbmc7XG4gIHByaXZhdGUgZGVzdHJveSQgPSBuZXcgU3ViamVjdDx2b2lkPigpO1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgZWw6IEVsZW1lbnRSZWYsIHByaXZhdGUgc2VydmljZTogVHJhbnNsYXRlU2VydmljZSwgcHJpdmF0ZSBjbGllbnRTZXJ2aWNlOiBUcmFuc2xhdGlvbkNsaWVudFNlcnZpY2UpIHtcblxuICB9XG5cbiAgbmdPbkRlc3Ryb3koKSB7XG4gICAgdGhpcy5kZXN0cm95JC5uZXh0KCk7XG4gICAgdGhpcy5kZXN0cm95JC5jb21wbGV0ZSgpO1xuICB9XG5cbiAgbmdBZnRlclZpZXdJbml0KCk6IHZvaWQge1xuICAgIGNvbWJpbmVMYXRlc3QoW3RoaXMuc2VydmljZS5nZXQodGhpcy5hcHBEeURpc3BsYXkpLCB0aGlzLmNsaWVudFNlcnZpY2UuZWRpdFN1YmplY3RdKVxuICAgICAgLnBpcGUodGFrZVVudGlsKHRoaXMuZGVzdHJveSQpKVxuICAgICAgLnN1YnNjcmliZSgoW3RyYW5zbGF0ZVZhbHVlLCBlZGl0VmFsdWVdKSA9PiB7XG4gICAgICAgIC8vIERvIHNvbWV0aGluZyB3aXRoIGJvdGggdmFsdWVzXG4gICAgICAgIGlmICh0cmFuc2xhdGVWYWx1ZSAhPSB0aGlzLmFwcER5RGlzcGxheSB8fCBlZGl0VmFsdWUpIHtcbiAgICAgICAgICB0aGlzLmVsLm5hdGl2ZUVsZW1lbnQuc3R5bGUuZGlzcGxheSA9ICdibG9jaydcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLmVsLm5hdGl2ZUVsZW1lbnQuc3R5bGUuZGlzcGxheSA9ICdub25lJ1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgfVxufVxuIl19