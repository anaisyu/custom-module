import { Directive, HostListener, Inject, Input } from '@angular/core';
import { zip } from "rxjs";
import * as i0 from "@angular/core";
import * as i1 from "../service/translate/translation-client.service";
import * as i2 from "../service/image-upload/image-upload.service";
export class DyImageEditDirective {
    constructor(el, clientService, imageUploadService, backendUrl) {
        this.el = el;
        this.clientService = clientService;
        this.imageUploadService = imageUploadService;
        this.backendUrl = backendUrl;
        this.editMode = false;
    }
    onKeyup() {
        if (this.editMode) {
            this.imageUploadService.openDialog().subscribe(res => {
                this.changeImage(res.urls.originalUrl, res.alt);
                this.save(res.urls, res.alt);
            });
        }
    }
    save(response, alt) {
        if (response && alt) {
            this.clientService.next('images.' + this.libDyImageEdit + '.originalUrl', response.originalUrl);
            this.clientService.next('images.' + this.libDyImageEdit + '.thumbnailUrl', response.thumbnailUrl);
            response.compressedUrls.forEach((compressedUrl, index) => {
                this.clientService.next('images.' + this.libDyImageEdit + '.compressed.' + index + '.url', compressedUrl.url);
                this.clientService.next('images.' + this.libDyImageEdit + '.compressed.' + index + '.height', compressedUrl.height);
                this.clientService.next('images.' + this.libDyImageEdit + '.compressed.' + index + '.width', compressedUrl.width);
            });
            this.clientService.next('images.' + this.libDyImageEdit + '.alt', alt);
        }
    }
    ngOnInit() {
        const originalBorder = this.el.nativeElement.style.border;
        this.clientService.editSubject.subscribe(editMode => {
            this.editMode = editMode;
            // Get the native element using ElementRef
            const element = this.el.nativeElement;
            // Check the condition and apply the dashed border if needed
            if (this.editMode) {
                element.style.border = '2px dashed #a9a9a9';
            }
            else {
                element.style.border = originalBorder;
            }
        });
        const urlKey = 'images.' + this.libDyImageEdit + '.originalUrl';
        const altKey = 'images.' + this.libDyImageEdit + '.alt';
        const key1$ = this.clientService.streamTranslation(urlKey);
        const key2$ = this.clientService.streamTranslation(altKey);
        zip([key1$, key2$]).subscribe(([url, alt]) => {
            if (urlKey != url || altKey != alt) {
                this.changeImage(url, alt);
            }
            this.el.nativeElement.contentEditable = this.editMode;
        });
    }
    changeImage(url, alt) {
        this.el.nativeElement.src = url;
        this.el.nativeElement.alt = alt;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.10", ngImport: i0, type: DyImageEditDirective, deps: [{ token: i0.ElementRef }, { token: i1.TranslationClientService }, { token: i2.ImageUploadService }, { token: 'backendUrl' }], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "17.3.10", type: DyImageEditDirective, isStandalone: true, selector: "[libDyImageEdit]", inputs: { libDyImageEdit: "libDyImageEdit", src: "src" }, host: { listeners: { "click": "onKeyup()" } }, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.10", ngImport: i0, type: DyImageEditDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[libDyImageEdit]',
                    standalone: true
                }]
        }], ctorParameters: () => [{ type: i0.ElementRef }, { type: i1.TranslationClientService }, { type: i2.ImageUploadService }, { type: undefined, decorators: [{
                    type: Inject,
                    args: ['backendUrl']
                }] }], propDecorators: { libDyImageEdit: [{
                type: Input,
                args: [{ required: true }]
            }], src: [{
                type: Input,
                args: [{ required: true }]
            }], onKeyup: [{
                type: HostListener,
                args: ['click']
            }] } });
//# sourceMappingURL=data:application/json;base64,