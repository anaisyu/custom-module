import { Directive, HostListener, Inject, input, PLATFORM_ID } from '@angular/core';
import { Subscription } from "rxjs";
import { isPlatformBrowser } from "@angular/common";
import * as i0 from "@angular/core";
import * as i1 from "@angular/router";
export class DyTransitionDirective {
    constructor(elementRef, router, _platformId) {
        this.elementRef = elementRef;
        this.router = router;
        this._platformId = _platformId;
        this.subscription = new Subscription();
        this.dyTransition = input.required();
    }
    ngOnDestroy() {
        if (this.intervalId) {
            clearInterval(this.intervalId);
        }
        this.subscription.unsubscribe();
    }
    ngOnInit() {
        if (this.dyTransition() != 'none') {
            this.elementRef.nativeElement.style['view-transition-name'] = this.dyTransition();
        }
        // Listen to router events
        this.subscription.add(this.router.events.subscribe(event => {
            if (event) {
                this.checkVisibility();
            }
        }));
    }
    isElementInViewport(el) {
        const rect = el.getBoundingClientRect();
        const tolerance = 0.1; // 10% tolerance
        const windowHeight = window.innerHeight || document.documentElement.clientHeight;
        const windowWidth = window.innerWidth || document.documentElement.clientWidth;
        const topTolerance = tolerance * windowHeight;
        const leftTolerance = tolerance * windowWidth;
        return (rect.top >= -topTolerance &&
            rect.left >= -leftTolerance &&
            rect.bottom <= (1 + tolerance) * windowHeight &&
            rect.right <= (1 + tolerance) * windowWidth);
    }
    checkVisibility() {
        if (isPlatformBrowser(this._platformId)) {
            if (this.dyTransition() != 'none') {
                if (this.isElementInViewport(this.elementRef.nativeElement)) {
                    this.elementRef.nativeElement.style['view-transition-name'] = this.dyTransition();
                }
                else {
                    setTimeout(() => {
                        this.elementRef.nativeElement.style['view-transition-name'] = 'none';
                    }, 1);
                }
            }
        }
        else {
            if (this.dyTransition() != 'none') {
                this.elementRef.nativeElement.style['view-transition-name'] = this.dyTransition();
            }
        }
    }
    onScroll() {
        this.checkVisibility();
    }
    ngAfterViewInit() {
        this.checkVisibility(); // Initial check
        if (isPlatformBrowser(this._platformId)) {
            this.intervalId = setInterval(() => {
                this.checkVisibility();
            }, 500); // 500 milliseconds interval
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.10", ngImport: i0, type: DyTransitionDirective, deps: [{ token: i0.ElementRef }, { token: i1.Router }, { token: PLATFORM_ID }], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "17.1.0", version: "17.3.10", type: DyTransitionDirective, isStandalone: true, selector: "[dyTransition]", inputs: { dyTransition: { classPropertyName: "dyTransition", publicName: "dyTransition", isSignal: true, isRequired: true, transformFunction: null } }, host: { listeners: { "window:scroll": "onScroll($event)", "window:click": "onScroll($event)" } }, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.10", ngImport: i0, type: DyTransitionDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[dyTransition]',
                    standalone: true
                }]
        }], ctorParameters: () => [{ type: i0.ElementRef }, { type: i1.Router }, { type: Object, decorators: [{
                    type: Inject,
                    args: [PLATFORM_ID]
                }] }], propDecorators: { onScroll: [{
                type: HostListener,
                args: ['window:scroll', ['$event']]
            }, {
                type: HostListener,
                args: ['window:click', ['$event']]
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHktdHJhbnNpdGlvbi5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9jdXN0b20tZGlzcGxheS9zcmMvbGliL2RpcmVjdGl2ZXMvZHktdHJhbnNpdGlvbi5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUVMLFNBQVMsRUFDRyxZQUFZLEVBQ3hCLE1BQU0sRUFDTixLQUFLLEVBR0wsV0FBVyxFQUNaLE1BQU0sZUFBZSxDQUFDO0FBRXZCLE9BQU8sRUFBQyxZQUFZLEVBQUMsTUFBTSxNQUFNLENBQUM7QUFDbEMsT0FBTyxFQUFDLGlCQUFpQixFQUFDLE1BQU0saUJBQWlCLENBQUM7OztBQU1sRCxNQUFNLE9BQU8scUJBQXFCO0lBS2hDLFlBQW9CLFVBQXNCLEVBQVUsTUFBYyxFQUErQixXQUFtQjtRQUFoRyxlQUFVLEdBQVYsVUFBVSxDQUFZO1FBQVUsV0FBTSxHQUFOLE1BQU0sQ0FBUTtRQUErQixnQkFBVyxHQUFYLFdBQVcsQ0FBUTtRQUo1RyxpQkFBWSxHQUFpQixJQUFJLFlBQVksRUFBRSxDQUFBO1FBR3ZELGlCQUFZLEdBQUcsS0FBSyxDQUFDLFFBQVEsRUFBRSxDQUFBO0lBRS9CLENBQUM7SUFFRCxXQUFXO1FBQ1QsSUFBSSxJQUFJLENBQUMsVUFBVSxFQUFFO1lBQ25CLGFBQWEsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7U0FDaEM7UUFDRCxJQUFJLENBQUMsWUFBWSxDQUFDLFdBQVcsRUFBRSxDQUFBO0lBQ2pDLENBQUM7SUFFRCxRQUFRO1FBQ04sSUFBRyxJQUFJLENBQUMsWUFBWSxFQUFFLElBQUksTUFBTSxFQUFFO1lBQ2hDLElBQUksQ0FBQyxVQUFVLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQyxzQkFBc0IsQ0FBQyxHQUFHLElBQUksQ0FBQyxZQUFZLEVBQUUsQ0FBQztTQUNuRjtRQUNELDBCQUEwQjtRQUMxQixJQUFJLENB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QVEsQ0FBQzs7c0JBQ3hDLFlBQVk7dUJBQUMsY0FBYyxFQUFFLENBQUMsUUFBUSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgQWZ0ZXJWaWV3SW5pdCxcbiAgRGlyZWN0aXZlLFxuICBFbGVtZW50UmVmLCBIb3N0TGlzdGVuZXIsXG4gIEluamVjdCxcbiAgaW5wdXQsXG4gIE9uRGVzdHJveSxcbiAgT25Jbml0LFxuICBQTEFURk9STV9JRFxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7Um91dGVyfSBmcm9tIFwiQGFuZ3VsYXIvcm91dGVyXCI7XG5pbXBvcnQge1N1YnNjcmlwdGlvbn0gZnJvbSBcInJ4anNcIjtcbmltcG9ydCB7aXNQbGF0Zm9ybUJyb3dzZXJ9IGZyb20gXCJAYW5ndWxhci9jb21tb25cIjtcblxuQERpcmVjdGl2ZSh7XG4gIHNlbGVjdG9yOiAnW2R5VHJhbnNpdGlvbl0nLFxuICBzdGFuZGFsb25lOiB0cnVlXG59KVxuZXhwb3J0IGNsYXNzIER5VHJhbnNpdGlvbkRpcmVjdGl2ZSBpbXBsZW1lbnRzIEFmdGVyVmlld0luaXQsIE9uSW5pdCwgT25EZXN0cm95IHtcbiAgcHJpdmF0ZSBzdWJzY3JpcHRpb246IFN1YnNjcmlwdGlvbiA9IG5ldyBTdWJzY3JpcHRpb24oKVxuICBwcml2YXRlIGludGVydmFsSWQ6IGFueTtcblxuICBkeVRyYW5zaXRpb24gPSBpbnB1dC5yZXF1aXJlZCgpXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgZWxlbWVudFJlZjogRWxlbWVudFJlZiwgcHJpdmF0ZSByb3V0ZXI6IFJvdXRlciwgQEluamVjdChQTEFURk9STV9JRCkgcHJpdmF0ZSBfcGxhdGZvcm1JZDogT2JqZWN0KSB7XG4gIH1cblxuICBuZ09uRGVzdHJveSgpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5pbnRlcnZhbElkKSB7XG4gICAgICBjbGVhckludGVydmFsKHRoaXMuaW50ZXJ2YWxJZCk7XG4gICAgfVxuICAgIHRoaXMuc3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKClcbiAgfVxuXG4gIG5nT25Jbml0KCk6IHZvaWQge1xuICAgIGlmKHRoaXMuZHlUcmFuc2l0aW9uKCkgIT0gJ25vbmUnKSB7XG4gICAgICB0aGlzLmVsZW1lbnRSZWYubmF0aXZlRWxlbWVudC5zdHlsZVsndmlldy10cmFuc2l0aW9uLW5hbWUnXSA9IHRoaXMuZHlUcmFuc2l0aW9uKCk7XG4gICAgfVxuICAgIC8vIExpc3RlbiB0byByb3V0ZXIgZXZlbnRzXG4gICAgdGhpcy5zdWJzY3JpcHRpb24uYWRkKFxuICAgICAgdGhpcy5yb3V0ZXIuZXZlbnRzLnN1YnNjcmliZShldmVudCA9PiB7XG4gICAgICAgIGlmIChldmVudCkge1xuICAgICAgICAgIHRoaXMuY2hlY2tWaXNpYmlsaXR5KCk7XG4gICAgICAgIH1cbiAgICAgIH0pKTtcbiAgfVxuXG4gIHByaXZhdGUgaXNFbGVtZW50SW5WaWV3cG9ydChlbDogSFRNTEVsZW1lbnQpOiBib29sZWFuIHtcbiAgICBjb25zdCByZWN0ID0gZWwuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgY29uc3QgdG9sZXJhbmNlID0gMC4xOyAvLyAxMCUgdG9sZXJhbmNlXG5cbiAgICBjb25zdCB3aW5kb3dIZWlnaHQgPSB3aW5kb3cuaW5uZXJIZWlnaHQgfHwgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsaWVudEhlaWdodDtcbiAgICBjb25zdCB3aW5kb3dXaWR0aCA9IHdpbmRvdy5pbm5lcldpZHRoIHx8IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGllbnRXaWR0aDtcblxuICAgIGNvbnN0IHRvcFRvbGVyYW5jZSA9IHRvbGVyYW5jZSAqIHdpbmRvd0hlaWdodDtcbiAgICBjb25zdCBsZWZ0VG9sZXJhbmNlID0gdG9sZXJhbmNlICogd2luZG93V2lkdGg7XG5cbiAgICByZXR1cm4gKFxuICAgICAgcmVjdC50b3AgPj0gLXRvcFRvbGVyYW5jZSAmJlxuICAgICAgcmVjdC5sZWZ0ID49IC1sZWZ0VG9sZXJhbmNlICYmXG4gICAgICByZWN0LmJvdHRvbSA8PSAoMSArIHRvbGVyYW5jZSkgKiB3aW5kb3dIZWlnaHQgJiZcbiAgICAgIHJlY3QucmlnaHQgPD0gKDEgKyB0b2xlcmFuY2UpICogd2luZG93V2lkdGhcbiAgICApO1xuICB9XG5cbiAgcHJpdmF0ZSBjaGVja1Zpc2liaWxpdHkoKTogdm9pZCB7XG4gICAgaWYoaXNQbGF0Zm9ybUJyb3dzZXIodGhpcy5fcGxhdGZvcm1JZCkpIHtcbiAgICAgIGlmICh0aGlzLmR5VHJhbnNpdGlvbigpICE9ICdub25lJykge1xuICAgICAgICBpZiAodGhpcy5pc0VsZW1lbnRJblZpZXdwb3J0KHRoaXMuZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50KSkge1xuICAgICAgICAgIHRoaXMuZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50LnN0eWxlWyd2aWV3LXRyYW5zaXRpb24tbmFtZSddID0gdGhpcy5keVRyYW5zaXRpb24oKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50LnN0eWxlWyd2aWV3LXRyYW5zaXRpb24tbmFtZSddID0gJ25vbmUnO1xuICAgICAgICAgIH0sIDEpXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgaWYodGhpcy5keVRyYW5zaXRpb24oKSAhPSAnbm9uZScpIHtcbiAgICAgICAgdGhpcy5lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQuc3R5bGVbJ3ZpZXctdHJhbnNpdGlvbi1uYW1lJ10gPSB0aGlzLmR5VHJhbnNpdGlvbigpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIEBIb3N0TGlzdGVuZXIoJ3dpbmRvdzpzY3JvbGwnLCBbJyRldmVudCddKVxuICBASG9zdExpc3RlbmVyKCd3aW5kb3c6Y2xpY2snLCBbJyRldmVudCddKVxuICBvblNjcm9sbCgpOiB2b2lkIHtcbiAgICB0aGlzLmNoZWNrVmlzaWJpbGl0eSgpO1xuICB9XG5cbiAgbmdBZnRlclZpZXdJbml0KCk6IHZvaWQge1xuICAgIHRoaXMuY2hlY2tWaXNpYmlsaXR5KCk7IC8vIEluaXRpYWwgY2hlY2tcbiAgICBpZihpc1BsYXRmb3JtQnJvd3Nlcih0aGlzLl9wbGF0Zm9ybUlkKSkge1xuICAgICAgdGhpcy5pbnRlcnZhbElkID0gc2V0SW50ZXJ2YWwoKCkgPT4ge1xuICAgICAgICB0aGlzLmNoZWNrVmlzaWJpbGl0eSgpO1xuICAgICAgfSwgNTAwKTsgLy8gNTAwIG1pbGxpc2Vjb25kcyBpbnRlcnZhbFxuICAgIH1cbiAgfVxufVxuIl19