import { Inject, Injectable } from '@angular/core';
import { finalize, throwError } from "rxjs";
import { FormControl, FormGroup, Validators } from "@angular/forms";
import { LoadingService } from '../loading/loading.service';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
export class DyContactService {
    constructor(http, backendUrl) {
        this.http = http;
        this.backendUrl = backendUrl;
        this.formData = new FormGroup({
            name: new FormControl('', Validators.required),
            lastName: new FormControl(''),
            email: new FormControl('', [Validators.required, Validators.email]),
            message: new FormControl('', Validators.required)
        });
        this.formDataLong = new FormGroup({
            name: new FormControl('', Validators.required),
            nom: new FormControl('', Validators.required),
            lastName: new FormControl(''),
            phone: new FormControl('', [Validators.required]),
            email: new FormControl('', [Validators.required, Validators.email]),
            message: new FormControl('', Validators.required)
        });
        this.formLoadedTimestamp = Date.now();
    }
    sendContactForm() {
        return this.send(this.formData);
    }
    sendContactFormLong() {
        return this.send(this.formDataLong);
    }
    send(form) {
        if (form.invalid || (Date.now() - this.formLoadedTimestamp) < 5000 || form.getRawValue().lastName) {
            return throwError(() => 'form Invalid');
        }
        LoadingService.startLoading();
        return this.http.get(this.backendUrl + '/contact', { params: form.getRawValue() }).pipe(finalize(() => {
            LoadingService.stopLoading();
        }));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.10", ngImport: i0, type: DyContactService, deps: [{ token: i1.HttpClient }, { token: 'backendUrl' }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "17.3.10", ngImport: i0, type: DyContactService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.10", ngImport: i0, type: DyContactService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: () => [{ type: i1.HttpClient }, { type: undefined, decorators: [{
                    type: Inject,
                    args: ['backendUrl']
                }] }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHktY29udGFjdC5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvY3VzdG9tLWRpc3BsYXkvc3JjL2xpYi9zZXJ2aWNlL2R5LWNvbnRhY3QvZHktY29udGFjdC5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBQyxNQUFNLEVBQUUsVUFBVSxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBRWpELE9BQU8sRUFBQyxRQUFRLEVBQWMsVUFBVSxFQUFDLE1BQU0sTUFBTSxDQUFDO0FBQ3RELE9BQU8sRUFBQyxXQUFXLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBQyxNQUFNLGdCQUFnQixDQUFDO0FBQ2xFLE9BQU8sRUFBQyxjQUFjLEVBQUMsTUFBTSw0QkFBNEIsQ0FBQzs7O0FBSzFELE1BQU0sT0FBTyxnQkFBZ0I7SUFpQjNCLFlBQW9CLElBQWdCLEVBQWdDLFVBQWtCO1FBQWxFLFNBQUksR0FBSixJQUFJLENBQVk7UUFBZ0MsZUFBVSxHQUFWLFVBQVUsQ0FBUTtRQWhCdEYsYUFBUSxHQUFjLElBQUksU0FBUyxDQUFDO1lBQ2xDLElBQUksRUFBRSxJQUFJLFdBQVcsQ0FBQyxFQUFFLEVBQUUsVUFBVSxDQUFDLFFBQVEsQ0FBQztZQUM5QyxRQUFRLEVBQUUsSUFBSSxXQUFXLENBQUMsRUFBRSxDQUFDO1lBQzdCLEtBQUssRUFBRSxJQUFJLFdBQVcsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxVQUFVLENBQUMsUUFBUSxFQUFFLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUNuRSxPQUFPLEVBQUUsSUFBSSxXQUFXLENBQUMsRUFBRSxFQUFFLFVBQVUsQ0FBQyxRQUFRLENBQUM7U0FDbEQsQ0FBQyxDQUFDO1FBQ0gsaUJBQVksR0FBYyxJQUFJLFNBQVMsQ0FBQztZQUN0QyxJQUFJLEVBQUUsSUFBSSxXQUFXLENBQUMsRUFBRSxFQUFFLFVBQVUsQ0FBQyxRQUFRLENBQUM7WUFDOUMsR0FBRyxFQUFFLElBQUksV0FBVyxDQUFDLEVBQUUsRUFBRSxVQUFVLENBQUMsUUFBUSxDQUFDO1lBQzdDLFFBQVEsRUFBRSxJQUFJLFdBQVcsQ0FBQyxFQUFFLENBQUM7WUFDN0IsS0FBSyxFQUFFLElBQUksV0FBVyxDQUFDLEVBQUUsRUFBRSxDQUFDLFVBQVUsQ0FBQyxRQUFRLENBQUMsQ0FBQztZQUNqRCxLQUFLLEVBQUUsSUFBSSxXQUFXLENBQUMsRUFBRSxFQUFFLENBQUMsVUFBVSxDQUFDLFFBQVEsRUFBRSxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUM7WUFDbkUsT0FBTyxFQUFFLElBQUksV0FBVyxDQUFDLEVBQUUsRUFBRSxVQUFVLENBQUMsUUFBUSxDQUFDO1NBQ2xELENBQUMsQ0FBQztRQUlELElBQUksQ0FBQyxtQkFBbUIsR0FBRyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7SUFDeEMsQ0FBQztJQUVELGVBQWU7UUFDYixPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFBO0lBQ2pDLENBQUM7SUFDRCxtQkFBbUI7UUFDakIsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQTtJQUNyQyxDQUFDO0lBRU8sSUFBSSxDQUFDLElBQWU7UUFDMUIsSUFBSSxJQUFJLENBQUMsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxHQUFHLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxHQUFHLElBQUksSUFBSSxJQUFJLENBQUMsV0FBVyxFQUFFLENBQUMsUUFBUSxFQUFFO1lBQ2pHLE9BQU8sVUFBVSxDQUFDLEdBQUcsRUFBRSxDQUFDLGNBQWMsQ0FBQyxDQUFDO1NBQ3pDO1FBQ0QsY0FBYyxDQUFDLFlBQVksRUFBRSxDQUFBO1FBQzdCLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLFVBQVUsR0FBRyxVQUFVLEVBQUUsRUFBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLFdBQVcsRUFBRSxFQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsRUFBRTtZQUNsRyxjQUFjLENBQUMsV0FBVyxFQUFFLENBQUE7UUFDOUIsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNOLENBQUM7K0dBcENVLGdCQUFnQiw0Q0FpQm1CLFlBQVk7bUhBakIvQyxnQkFBZ0IsY0FGZixNQUFNOzs0RkFFUCxnQkFBZ0I7a0JBSDVCLFVBQVU7bUJBQUM7b0JBQ1YsVUFBVSxFQUFFLE1BQU07aUJBQ25COzswQkFrQndDLE1BQU07MkJBQUMsWUFBWSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7SW5qZWN0LCBJbmplY3RhYmxlfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7SHR0cENsaWVudH0gZnJvbSBcIkBhbmd1bGFyL2NvbW1vbi9odHRwXCI7XG5pbXBvcnQge2ZpbmFsaXplLCBPYnNlcnZhYmxlLCB0aHJvd0Vycm9yfSBmcm9tIFwicnhqc1wiO1xuaW1wb3J0IHtGb3JtQ29udHJvbCwgRm9ybUdyb3VwLCBWYWxpZGF0b3JzfSBmcm9tIFwiQGFuZ3VsYXIvZm9ybXNcIjtcbmltcG9ydCB7TG9hZGluZ1NlcnZpY2V9IGZyb20gJy4uL2xvYWRpbmcvbG9hZGluZy5zZXJ2aWNlJztcblxuQEluamVjdGFibGUoe1xuICBwcm92aWRlZEluOiAncm9vdCdcbn0pXG5leHBvcnQgY2xhc3MgRHlDb250YWN0U2VydmljZSB7XG4gIGZvcm1EYXRhOiBGb3JtR3JvdXAgPSBuZXcgRm9ybUdyb3VwKHtcbiAgICBuYW1lOiBuZXcgRm9ybUNvbnRyb2woJycsIFZhbGlkYXRvcnMucmVxdWlyZWQpLFxuICAgIGxhc3ROYW1lOiBuZXcgRm9ybUNvbnRyb2woJycpLFxuICAgIGVtYWlsOiBuZXcgRm9ybUNvbnRyb2woJycsIFtWYWxpZGF0b3JzLnJlcXVpcmVkLCBWYWxpZGF0b3JzLmVtYWlsXSksXG4gICAgbWVzc2FnZTogbmV3IEZvcm1Db250cm9sKCcnLCBWYWxpZGF0b3JzLnJlcXVpcmVkKVxuICB9KTtcbiAgZm9ybURhdGFMb25nOiBGb3JtR3JvdXAgPSBuZXcgRm9ybUdyb3VwKHtcbiAgICBuYW1lOiBuZXcgRm9ybUNvbnRyb2woJycsIFZhbGlkYXRvcnMucmVxdWlyZWQpLFxuICAgIG5vbTogbmV3IEZvcm1Db250cm9sKCcnLCBWYWxpZGF0b3JzLnJlcXVpcmVkKSxcbiAgICBsYXN0TmFtZTogbmV3IEZvcm1Db250cm9sKCcnKSxcbiAgICBwaG9uZTogbmV3IEZvcm1Db250cm9sKCcnLCBbVmFsaWRhdG9ycy5yZXF1aXJlZF0pLFxuICAgIGVtYWlsOiBuZXcgRm9ybUNvbnRyb2woJycsIFtWYWxpZGF0b3JzLnJlcXVpcmVkLCBWYWxpZGF0b3JzLmVtYWlsXSksXG4gICAgbWVzc2FnZTogbmV3IEZvcm1Db250cm9sKCcnLCBWYWxpZGF0b3JzLnJlcXVpcmVkKVxuICB9KTtcbiAgcHJpdmF0ZSByZWFkb25seSBmb3JtTG9hZGVkVGltZXN0YW1wOiBudW1iZXI7XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBodHRwOiBIdHRwQ2xpZW50LCBASW5qZWN0KCdiYWNrZW5kVXJsJykgcHJpdmF0ZSBiYWNrZW5kVXJsOiBzdHJpbmcpIHtcbiAgICB0aGlzLmZvcm1Mb2FkZWRUaW1lc3RhbXAgPSBEYXRlLm5vdygpO1xuICB9XG5cbiAgc2VuZENvbnRhY3RGb3JtKCk6IE9ic2VydmFibGU8YW55PiB7XG4gICAgcmV0dXJuIHRoaXMuc2VuZCh0aGlzLmZvcm1EYXRhKVxuICB9XG4gIHNlbmRDb250YWN0Rm9ybUxvbmcoKTogT2JzZXJ2YWJsZTxhbnk+IHtcbiAgICByZXR1cm4gdGhpcy5zZW5kKHRoaXMuZm9ybURhdGFMb25nKVxuICB9XG5cbiAgcHJpdmF0ZSBzZW5kKGZvcm06IEZvcm1Hcm91cCkgOiBPYnNlcnZhYmxlPGFueT4ge1xuICAgIGlmIChmb3JtLmludmFsaWQgfHwgKERhdGUubm93KCkgLSB0aGlzLmZvcm1Mb2FkZWRUaW1lc3RhbXApIDwgNTAwMCB8fCBmb3JtLmdldFJhd1ZhbHVlKCkubGFzdE5hbWUpIHtcbiAgICAgIHJldHVybiB0aHJvd0Vycm9yKCgpID0+ICdmb3JtIEludmFsaWQnKTtcbiAgICB9XG4gICAgTG9hZGluZ1NlcnZpY2Uuc3RhcnRMb2FkaW5nKClcbiAgICByZXR1cm4gdGhpcy5odHRwLmdldCh0aGlzLmJhY2tlbmRVcmwgKyAnL2NvbnRhY3QnLCB7cGFyYW1zOiBmb3JtLmdldFJhd1ZhbHVlKCl9KS5waXBlKGZpbmFsaXplKCgpID0+IHtcbiAgICAgIExvYWRpbmdTZXJ2aWNlLnN0b3BMb2FkaW5nKClcbiAgICB9KSk7XG4gIH1cbn1cbiJdfQ==