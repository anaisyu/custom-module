import { Inject, Injectable, PLATFORM_ID, signal } from '@angular/core';
import { isPlatformBrowser } from "@angular/common";
import { TranslationClientService } from "../translate/translation-client.service";
import * as i0 from "@angular/core";
export class LocalStorageService {
    constructor(_platformId, keys = []) {
        this._platformId = _platformId;
        this.values = new Map([]);
        const localKeys = [TranslationClientService.COOKIE_NAME, ...keys];
        // init
        localKeys.forEach(key => {
            this.values.set(key, signal(null));
        });
        if (isPlatformBrowser(this._platformId)) {
            localKeys.forEach(key => {
                this.values.get(key)?.set(this.getFromStorage(key));
            });
            // Listen for changes to local storage
            window.addEventListener('storage', (event) => {
                if (event.storageArea === localStorage) {
                    console.log('new localstorage data');
                    localKeys.forEach(key => {
                        this.values.get(key)?.set(this.getFromStorage(key));
                    });
                }
            });
        }
    }
    getFromStorage(key) {
        if (isPlatformBrowser(this._platformId)) {
            const item = localStorage.getItem(key);
            if (item) {
                try {
                    const { value, expiry } = JSON.parse(item);
                    if (!expiry || new Date(expiry) > new Date()) {
                        return value;
                    }
                    else {
                        localStorage.removeItem(key); // Remove expired token
                    }
                }
                catch (e) {
                    console.error('Error parsing JSON from localStorage:', e);
                    localStorage.removeItem(key); // Remove corrupted item
                }
            }
        }
        return null;
    }
    setValue(key, value, expiresInMs = 1000 * 60 * 60 * 24 * 21) {
        if (isPlatformBrowser(this._platformId)) {
            const signalValue = this.values.get(key);
            if (value && value != signalValue()) {
                const expiry = new Date().getTime() + expiresInMs;
                localStorage.setItem(key, JSON.stringify({ value, expiry }));
                signalValue.set(value);
            }
            else if (!value) {
                localStorage.removeItem(key);
                signalValue.set(null);
            }
        }
    }
    getValue(key) {
        return this.values.get(key).asReadonly();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.10", ngImport: i0, type: LocalStorageService, deps: [{ token: PLATFORM_ID }, { token: 'LOCAL_STORAGE_KEYS' }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "17.3.10", ngImport: i0, type: LocalStorageService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.10", ngImport: i0, type: LocalStorageService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: () => [{ type: Object, decorators: [{
                    type: Inject,
                    args: [PLATFORM_ID]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: ['LOCAL_STORAGE_KEYS']
                }] }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9jYWwtc3RvcmFnZS5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvY3VzdG9tLWRpc3BsYXkvc3JjL2xpYi9zZXJ2aWNlL2xvY2FsLXN0b3JhZ2UvbG9jYWwtc3RvcmFnZS5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxNQUFNLEVBQUUsVUFBVSxFQUFFLFdBQVcsRUFBRSxNQUFNLEVBQXlCLE1BQU0sZUFBZSxDQUFDO0FBQy9GLE9BQU8sRUFBQyxpQkFBaUIsRUFBQyxNQUFNLGlCQUFpQixDQUFDO0FBQ2xELE9BQU8sRUFBQyx3QkFBd0IsRUFBQyxNQUFNLHlDQUF5QyxDQUFDOztBQUtqRixNQUFNLE9BQU8sbUJBQW1CO0lBRzlCLFlBQXlDLFdBQW1CLEVBQWdDLE9BQWlCLEVBQUU7UUFBdEUsZ0JBQVcsR0FBWCxXQUFXLENBQVE7UUFGM0MsV0FBTSxHQUErQyxJQUFJLEdBQUcsQ0FBQyxFQUFFLENBQUMsQ0FBQTtRQUcvRSxNQUFNLFNBQVMsR0FBRyxDQUFDLHdCQUF3QixDQUFDLFdBQVcsRUFBRSxHQUFHLElBQUksQ0FBQyxDQUFBO1FBRWpFLE9BQU87UUFDUCxTQUFTLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxFQUFFO1lBQ3RCLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQTtRQUNwQyxDQUFDLENBQUMsQ0FBQTtRQUNGLElBQUksaUJBQWlCLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxFQUFFO1lBQ3ZDLFNBQVMsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLEVBQUU7Z0JBQ3RCLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUE7WUFD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QVc7OzBCQUFnQyxNQUFNOzJCQUFDLG9CQUFvQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdCwgSW5qZWN0YWJsZSwgUExBVEZPUk1fSUQsIHNpZ25hbCwgU2lnbmFsLCBXcml0YWJsZVNpZ25hbH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge2lzUGxhdGZvcm1Ccm93c2VyfSBmcm9tIFwiQGFuZ3VsYXIvY29tbW9uXCI7XG5pbXBvcnQge1RyYW5zbGF0aW9uQ2xpZW50U2VydmljZX0gZnJvbSBcIi4uL3RyYW5zbGF0ZS90cmFuc2xhdGlvbi1jbGllbnQuc2VydmljZVwiO1xuXG5ASW5qZWN0YWJsZSh7XG4gIHByb3ZpZGVkSW46ICdyb290J1xufSlcbmV4cG9ydCBjbGFzcyBMb2NhbFN0b3JhZ2VTZXJ2aWNlIHtcbiAgcHJpdmF0ZSByZWFkb25seSB2YWx1ZXM6IE1hcDxzdHJpbmcsIFdyaXRhYmxlU2lnbmFsPHN0cmluZyB8IG51bGw+PiA9IG5ldyBNYXAoW10pXG5cbiAgY29uc3RydWN0b3IoQEluamVjdChQTEFURk9STV9JRCkgcHJpdmF0ZSBfcGxhdGZvcm1JZDogT2JqZWN0LCBASW5qZWN0KCdMT0NBTF9TVE9SQUdFX0tFWVMnKSBrZXlzOiBzdHJpbmdbXSA9IFtdKSB7XG4gICAgY29uc3QgbG9jYWxLZXlzID0gW1RyYW5zbGF0aW9uQ2xpZW50U2VydmljZS5DT09LSUVfTkFNRSwgLi4ua2V5c11cblxuICAgIC8vIGluaXRcbiAgICBsb2NhbEtleXMuZm9yRWFjaChrZXkgPT4ge1xuICAgICAgdGhpcy52YWx1ZXMuc2V0KGtleSwgc2lnbmFsKG51bGwpKVxuICAgIH0pXG4gICAgaWYgKGlzUGxhdGZvcm1Ccm93c2VyKHRoaXMuX3BsYXRmb3JtSWQpKSB7XG4gICAgICBsb2NhbEtleXMuZm9yRWFjaChrZXkgPT4ge1xuICAgICAgICB0aGlzLnZhbHVlcy5nZXQoa2V5KT8uc2V0KHRoaXMuZ2V0RnJvbVN0b3JhZ2Uoa2V5KSlcbiAgICAgIH0pXG4gICAgICAvLyBMaXN0ZW4gZm9yIGNoYW5nZXMgdG8gbG9jYWwgc3RvcmFnZVxuICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3N0b3JhZ2UnLCAoZXZlbnQpID0+IHtcbiAgICAgICAgaWYgKGV2ZW50LnN0b3JhZ2VBcmVhID09PSBsb2NhbFN0b3JhZ2UpIHtcbiAgICAgICAgICBjb25zb2xlLmxvZygnbmV3IGxvY2Fsc3RvcmFnZSBkYXRhJylcbiAgICAgICAgICBsb2NhbEtleXMuZm9yRWFjaChrZXkgPT4ge1xuICAgICAgICAgICAgdGhpcy52YWx1ZXMuZ2V0KGtleSk/LnNldCh0aGlzLmdldEZyb21TdG9yYWdlKGtleSkpXG4gICAgICAgICAgfSlcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBnZXRGcm9tU3RvcmFnZShrZXk6IHN0cmluZyk6IHN0cmluZyB8IG51bGwge1xuICAgIGlmIChpc1BsYXRmb3JtQnJvd3Nlcih0aGlzLl9wbGF0Zm9ybUlkKSkge1xuICAgICAgY29uc3QgaXRlbSA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKGtleSk7XG4gICAgICBpZiAoaXRlbSkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIGNvbnN0IHt2YWx1ZSwgZXhwaXJ5fSA9IEpTT04ucGFyc2UoaXRlbSk7XG4gICAgICAgICAgaWYgKCFleHBpcnkgfHwgbmV3IERhdGUoZXhwaXJ5KSA+IG5ldyBEYXRlKCkpIHtcbiAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbG9jYWxTdG9yYWdlLnJlbW92ZUl0ZW0oa2V5KTsgLy8gUmVtb3ZlIGV4cGlyZWQgdG9rZW5cbiAgICAgICAgICB9XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICBjb25zb2xlLmVycm9yKCdFcnJvciBwYXJzaW5nIEpTT04gZnJvbSBsb2NhbFN0b3JhZ2U6JywgZSk7XG4gICAgICAgICAgbG9jYWxTdG9yYWdlLnJlbW92ZUl0ZW0oa2V5KTsgLy8gUmVtb3ZlIGNvcnJ1cHRlZCBpdGVtXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBzZXRWYWx1ZShrZXk6IHN0cmluZywgdmFsdWU6IHN0cmluZyB8IG51bGwgfCB1bmRlZmluZWQsIGV4cGlyZXNJbk1zOiBudW1iZXIgPSAxMDAwKjYwKjYwKjI0KjIxKSB7XG4gICAgaWYgKGlzUGxhdGZvcm1Ccm93c2VyKHRoaXMuX3BsYXRmb3JtSWQpKSB7XG4gICAgICBjb25zdCBzaWduYWxWYWx1ZSA9IHRoaXMudmFsdWVzLmdldChrZXkpIVxuICAgICAgaWYgKHZhbHVlICYmIHZhbHVlICE9IHNpZ25hbFZhbHVlKCkpIHtcbiAgICAgICAgY29uc3QgZXhwaXJ5ID0gbmV3IERhdGUoKS5nZXRUaW1lKCkgKyBleHBpcmVzSW5NcztcbiAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oa2V5LCBKU09OLnN0cmluZ2lmeSh7dmFsdWUsIGV4cGlyeX0pKTtcbiAgICAgICAgc2lnbmFsVmFsdWUuc2V0KHZhbHVlKVxuICAgICAgfSBlbHNlIGlmICghdmFsdWUpIHtcbiAgICAgICAgbG9jYWxTdG9yYWdlLnJlbW92ZUl0ZW0oa2V5KVxuICAgICAgICBzaWduYWxWYWx1ZS5zZXQobnVsbClcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBnZXRWYWx1ZShrZXk6IHN0cmluZykgOiBTaWduYWw8c3RyaW5nIHwgbnVsbD4ge1xuICAgIHJldHVybiB0aGlzLnZhbHVlcy5nZXQoa2V5KSEuYXNSZWFkb25seSgpXG4gIH1cbn1cbiJdfQ==