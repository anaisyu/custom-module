import { Inject, Injectable, PLATFORM_ID, signal } from '@angular/core';
import { isPlatformBrowser } from "@angular/common";
import { TranslationClientService } from "../translate/translation-client.service";
import * as i0 from "@angular/core";
export class LocalStorageService {
    constructor(_platformId, keys = []) {
        this._platformId = _platformId;
        this.values = new Map([]);
        const localKeys = [TranslationClientService.COOKIE_NAME, ...keys];
        // init
        localKeys.forEach(key => {
            this.values.set(key, signal(null));
        });
        if (isPlatformBrowser(this._platformId)) {
            localKeys.forEach(key => {
                this.values.get(key)?.set(this.getFromStorage(key));
            });
            // Listen for changes to local storage
            window.addEventListener('storage', (event) => {
                if (event.storageArea === localStorage) {
                    console.log('new localstorage data');
                    localKeys.forEach(key => {
                        this.values.get(key)?.set(this.getFromStorage(key));
                    });
                }
            });
        }
    }
    getFromStorage(key) {
        if (isPlatformBrowser(this._platformId)) {
            const item = localStorage.getItem(key);
            if (item) {
                try {
                    const { value, expiry } = JSON.parse(item);
                    if (!expiry || new Date(expiry) > new Date()) {
                        return value;
                    }
                    else {
                        localStorage.removeItem(key); // Remove expired token
                    }
                }
                catch (e) {
                    console.error('Error parsing JSON from localStorage:', e);
                    localStorage.removeItem(key); // Remove corrupted item
                }
            }
        }
        return null;
    }
    setValue(key, value, expiresInMs = 1000 * 60 * 60 * 24) {
        if (isPlatformBrowser(this._platformId)) {
            const signalValue = this.values.get(key);
            if (value && value != signalValue()) {
                const expiry = new Date().getTime() + expiresInMs;
                localStorage.setItem(key, JSON.stringify({ value, expiry }));
                signalValue.set(value);
            }
            else if (!value) {
                localStorage.removeItem(key);
                signalValue.set(null);
            }
        }
    }
    getValue(key) {
        return this.values.get(key).asReadonly();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.10", ngImport: i0, type: LocalStorageService, deps: [{ token: PLATFORM_ID }, { token: 'LOCAL_STORAGE_KEYS' }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "17.3.10", ngImport: i0, type: LocalStorageService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.10", ngImport: i0, type: LocalStorageService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: () => [{ type: Object, decorators: [{
                    type: Inject,
                    args: [PLATFORM_ID]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: ['LOCAL_STORAGE_KEYS']
                }] }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9jYWwtc3RvcmFnZS5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvY3VzdG9tLWRpc3BsYXkvc3JjL2xpYi9zZXJ2aWNlL2xvY2FsLXN0b3JhZ2UvbG9jYWwtc3RvcmFnZS5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxNQUFNLEVBQUUsVUFBVSxFQUFFLFdBQVcsRUFBRSxNQUFNLEVBQXlCLE1BQU0sZUFBZSxDQUFDO0FBQy9GLE9BQU8sRUFBQyxpQkFBaUIsRUFBQyxNQUFNLGlCQUFpQixDQUFDO0FBQ2xELE9BQU8sRUFBQyx3QkFBd0IsRUFBQyxNQUFNLHlDQUF5QyxDQUFDOztBQUtqRixNQUFNLE9BQU8sbUJBQW1CO0lBRzlCLFlBQXlDLFdBQW1CLEVBQWdDLE9BQWlCLEVBQUU7UUFBdEUsZ0JBQVcsR0FBWCxXQUFXLENBQVE7UUFGM0MsV0FBTSxHQUErQyxJQUFJLEdBQUcsQ0FBQyxFQUFFLENBQUMsQ0FBQTtRQUcvRSxNQUFNLFNBQVMsR0FBRyxDQUFDLHdCQUF3QixDQUFDLFdBQVcsRUFBRSxHQUFHLElBQUksQ0FBQyxDQUFBO1FBRWpFLE9BQU87UUFDUCxTQUFTLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxFQUFFO1lBQ3RCLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQTtRQUNwQyxDQUFDLENBQUMsQ0FBQTtRQUNGLElBQUksaUJBQWlCLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxFQUFFO1lBQ3ZDLFNBQVMsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLEVBQUU7Z0JBQ3RCLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUE7WUFD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LE1BQU07MkJBQUMsb0JBQW9CIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0LCBJbmplY3RhYmxlLCBQTEFURk9STV9JRCwgc2lnbmFsLCBTaWduYWwsIFdyaXRhYmxlU2lnbmFsfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7aXNQbGF0Zm9ybUJyb3dzZXJ9IGZyb20gXCJAYW5ndWxhci9jb21tb25cIjtcbmltcG9ydCB7VHJhbnNsYXRpb25DbGllbnRTZXJ2aWNlfSBmcm9tIFwiLi4vdHJhbnNsYXRlL3RyYW5zbGF0aW9uLWNsaWVudC5zZXJ2aWNlXCI7XG5cbkBJbmplY3RhYmxlKHtcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnXG59KVxuZXhwb3J0IGNsYXNzIExvY2FsU3RvcmFnZVNlcnZpY2Uge1xuICBwcml2YXRlIHJlYWRvbmx5IHZhbHVlczogTWFwPHN0cmluZywgV3JpdGFibGVTaWduYWw8c3RyaW5nIHwgbnVsbD4+ID0gbmV3IE1hcChbXSlcblxuICBjb25zdHJ1Y3RvcihASW5qZWN0KFBMQVRGT1JNX0lEKSBwcml2YXRlIF9wbGF0Zm9ybUlkOiBPYmplY3QsIEBJbmplY3QoJ0xPQ0FMX1NUT1JBR0VfS0VZUycpIGtleXM6IHN0cmluZ1tdID0gW10pIHtcbiAgICBjb25zdCBsb2NhbEtleXMgPSBbVHJhbnNsYXRpb25DbGllbnRTZXJ2aWNlLkNPT0tJRV9OQU1FLCAuLi5rZXlzXVxuXG4gICAgLy8gaW5pdFxuICAgIGxvY2FsS2V5cy5mb3JFYWNoKGtleSA9PiB7XG4gICAgICB0aGlzLnZhbHVlcy5zZXQoa2V5LCBzaWduYWwobnVsbCkpXG4gICAgfSlcbiAgICBpZiAoaXNQbGF0Zm9ybUJyb3dzZXIodGhpcy5fcGxhdGZvcm1JZCkpIHtcbiAgICAgIGxvY2FsS2V5cy5mb3JFYWNoKGtleSA9PiB7XG4gICAgICAgIHRoaXMudmFsdWVzLmdldChrZXkpPy5zZXQodGhpcy5nZXRGcm9tU3RvcmFnZShrZXkpKVxuICAgICAgfSlcbiAgICAgIC8vIExpc3RlbiBmb3IgY2hhbmdlcyB0byBsb2NhbCBzdG9yYWdlXG4gICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignc3RvcmFnZScsIChldmVudCkgPT4ge1xuICAgICAgICBpZiAoZXZlbnQuc3RvcmFnZUFyZWEgPT09IGxvY2FsU3RvcmFnZSkge1xuICAgICAgICAgIGNvbnNvbGUubG9nKCduZXcgbG9jYWxzdG9yYWdlIGRhdGEnKVxuICAgICAgICAgIGxvY2FsS2V5cy5mb3JFYWNoKGtleSA9PiB7XG4gICAgICAgICAgICB0aGlzLnZhbHVlcy5nZXQoa2V5KT8uc2V0KHRoaXMuZ2V0RnJvbVN0b3JhZ2Uoa2V5KSlcbiAgICAgICAgICB9KVxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIGdldEZyb21TdG9yYWdlKGtleTogc3RyaW5nKTogc3RyaW5nIHwgbnVsbCB7XG4gICAgaWYgKGlzUGxhdGZvcm1Ccm93c2VyKHRoaXMuX3BsYXRmb3JtSWQpKSB7XG4gICAgICBjb25zdCBpdGVtID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0oa2V5KTtcbiAgICAgIGlmIChpdGVtKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgY29uc3Qge3ZhbHVlLCBleHBpcnl9ID0gSlNPTi5wYXJzZShpdGVtKTtcbiAgICAgICAgICBpZiAoIWV4cGlyeSB8fCBuZXcgRGF0ZShleHBpcnkpID4gbmV3IERhdGUoKSkge1xuICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBsb2NhbFN0b3JhZ2UucmVtb3ZlSXRlbShrZXkpOyAvLyBSZW1vdmUgZXhwaXJlZCB0b2tlblxuICAgICAgICAgIH1cbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIHBhcnNpbmcgSlNPTiBmcm9tIGxvY2FsU3RvcmFnZTonLCBlKTtcbiAgICAgICAgICBsb2NhbFN0b3JhZ2UucmVtb3ZlSXRlbShrZXkpOyAvLyBSZW1vdmUgY29ycnVwdGVkIGl0ZW1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHNldFZhbHVlKGtleTogc3RyaW5nLCB2YWx1ZTogc3RyaW5nIHwgbnVsbCB8IHVuZGVmaW5lZCwgZXhwaXJlc0luTXM6IG51bWJlciA9IDEwMDAqNjAqNjAqMjQpIHtcbiAgICBpZiAoaXNQbGF0Zm9ybUJyb3dzZXIodGhpcy5fcGxhdGZvcm1JZCkpIHtcbiAgICAgIGNvbnN0IHNpZ25hbFZhbHVlID0gdGhpcy52YWx1ZXMuZ2V0KGtleSkhXG4gICAgICBpZiAodmFsdWUgJiYgdmFsdWUgIT0gc2lnbmFsVmFsdWUoKSkge1xuICAgICAgICBjb25zdCBleHBpcnkgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKSArIGV4cGlyZXNJbk1zO1xuICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbShrZXksIEpTT04uc3RyaW5naWZ5KHt2YWx1ZSwgZXhwaXJ5fSkpO1xuICAgICAgICBzaWduYWxWYWx1ZS5zZXQodmFsdWUpXG4gICAgICB9IGVsc2UgaWYgKCF2YWx1ZSkge1xuICAgICAgICBsb2NhbFN0b3JhZ2UucmVtb3ZlSXRlbShrZXkpXG4gICAgICAgIHNpZ25hbFZhbHVlLnNldChudWxsKVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGdldFZhbHVlKGtleTogc3RyaW5nKSA6IFNpZ25hbDxzdHJpbmcgfCBudWxsPiB7XG4gICAgcmV0dXJuIHRoaXMudmFsdWVzLmdldChrZXkpIS5hc1JlYWRvbmx5KClcbiAgfVxufVxuIl19