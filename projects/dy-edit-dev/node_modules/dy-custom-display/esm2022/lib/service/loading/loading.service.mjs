import { computed, Injectable, signal } from '@angular/core';
import * as i0 from "@angular/core";
export class LoadingService {
    static { this.numberOfLoadingProcess = signal(0); }
    constructor() {
    }
    static startLoading() {
        LoadingService.numberOfLoadingProcess.set(LoadingService.numberOfLoadingProcess() + 1);
    }
    static stopLoading() {
        LoadingService.numberOfLoadingProcess.set(LoadingService.numberOfLoadingProcess() - 1);
        if (LoadingService.numberOfLoadingProcess() < 0) {
            console.error("LoadingService: negative number of loading processes");
        }
    }
    static isLoading() {
        return computed(() => { return LoadingService.numberOfLoadingProcess() != 0; });
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.10", ngImport: i0, type: LoadingService, deps: [], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "17.3.10", ngImport: i0, type: LoadingService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.10", ngImport: i0, type: LoadingService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: () => [] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9hZGluZy5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvY3VzdG9tLWRpc3BsYXkvc3JjL2xpYi9zZXJ2aWNlL2xvYWRpbmcvbG9hZGluZy5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBQyxRQUFRLEVBQUUsVUFBVSxFQUFVLE1BQU0sRUFBaUIsTUFBTSxlQUFlLENBQUM7O0FBS25GLE1BQU0sT0FBTyxjQUFjO2FBRVYsMkJBQXNCLEdBQTJCLE1BQU0sQ0FBQyxDQUFDLENBQUMsQUFBcEMsQ0FBcUM7SUFFMUU7SUFDQSxDQUFDO0lBRUQsTUFBTSxDQUFDLFlBQVk7UUFDakIsY0FBYyxDQUFDLHNCQUFzQixDQUFDLEdBQUcsQ0FBQyxjQUFjLENBQUMsc0JBQXNCLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQztJQUN6RixDQUFDO0lBRUQsTUFBTSxDQUFDLFdBQVc7UUFDaEIsY0FBYyxDQUFDLHNCQUFzQixDQUFDLEdBQUcsQ0FBQyxjQUFjLENBQUMsc0JBQXNCLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQztRQUN2RixJQUFJLGNBQWMsQ0FBQyxzQkFBc0IsRUFBRSxHQUFHLENBQUMsRUFBRTtZQUMvQyxPQUFPLENBQUMsS0FBSyxDQUFDLHNEQUFzRCxDQUFDLENBQUE7U0FDdEU7SUFDSCxDQUFDO0lBRUQsTUFBTSxDQUFDLFNBQVM7UUFDZCxPQUFPLFFBQVEsQ0FBQyxHQUFHLEVBQUUsR0FBRSxPQUFPLGNBQWMsQ0FBQyxzQkFBc0IsRUFBRSxJQUFJLENBQUMsQ0FBQSxDQUFBLENBQUMsQ0FBQyxDQUFDO0lBQy9FLENBQUM7K0dBcEJVLGNBQWM7bUhBQWQsY0FBYyxjQUZiLE1BQU07OzRGQUVQLGNBQWM7a0JBSDFCLFVBQVU7bUJBQUM7b0JBQ1YsVUFBVSxFQUFFLE1BQU07aUJBQ25CIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtjb21wdXRlZCwgSW5qZWN0YWJsZSwgU2lnbmFsLCBzaWduYWwsIFdyaXRhYmxlU2lnbmFsfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuQEluamVjdGFibGUoe1xuICBwcm92aWRlZEluOiAncm9vdCdcbn0pXG5leHBvcnQgY2xhc3MgTG9hZGluZ1NlcnZpY2Uge1xuXG4gIHByaXZhdGUgc3RhdGljIG51bWJlck9mTG9hZGluZ1Byb2Nlc3M6IFdyaXRhYmxlU2lnbmFsPG51bWJlcj4gPSBzaWduYWwoMCk7XG5cbiAgY29uc3RydWN0b3IoKSB7XG4gIH1cblxuICBzdGF0aWMgc3RhcnRMb2FkaW5nKCkge1xuICAgIExvYWRpbmdTZXJ2aWNlLm51bWJlck9mTG9hZGluZ1Byb2Nlc3Muc2V0KExvYWRpbmdTZXJ2aWNlLm51bWJlck9mTG9hZGluZ1Byb2Nlc3MoKSArIDEpO1xuICB9XG5cbiAgc3RhdGljIHN0b3BMb2FkaW5nKCkge1xuICAgIExvYWRpbmdTZXJ2aWNlLm51bWJlck9mTG9hZGluZ1Byb2Nlc3Muc2V0KExvYWRpbmdTZXJ2aWNlLm51bWJlck9mTG9hZGluZ1Byb2Nlc3MoKSAtIDEpO1xuICAgIGlmIChMb2FkaW5nU2VydmljZS5udW1iZXJPZkxvYWRpbmdQcm9jZXNzKCkgPCAwKSB7XG4gICAgICBjb25zb2xlLmVycm9yKFwiTG9hZGluZ1NlcnZpY2U6IG5lZ2F0aXZlIG51bWJlciBvZiBsb2FkaW5nIHByb2Nlc3Nlc1wiKVxuICAgIH1cbiAgfVxuXG4gIHN0YXRpYyBpc0xvYWRpbmcoKTogU2lnbmFsPGJvb2xlYW4+IHtcbiAgICByZXR1cm4gY29tcHV0ZWQoKCkgPT4ge3JldHVybiBMb2FkaW5nU2VydmljZS5udW1iZXJPZkxvYWRpbmdQcm9jZXNzKCkgIT0gMH0pO1xuICB9XG59XG4iXX0=