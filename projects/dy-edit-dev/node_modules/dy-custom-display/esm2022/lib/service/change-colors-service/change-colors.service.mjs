import { Injectable } from '@angular/core';
import { BehaviorSubject, combineLatest, map, Subject } from "rxjs";
import * as i0 from "@angular/core";
import * as i1 from "../translate/translation-client.service";
export class ChangeColorsService {
    constructor(clientService) {
        this.clientService = clientService;
        this.cssVariableNames = [
            '--dy-color-1-original',
            '--dy-color-2-original',
            '--dy-color-3-original',
            '--dy-color-4-original',
            '--dy-color-5-original',
            '--dy-color-6-original',
            '--dy-color-7-original',
            '--dy-primary',
            '--dy-primary-hover',
            '--dy-secondary',
            '--dy-secondary-hover',
            '--dy-text',
            '--dy-text-primary',
            '--dy-text-secondary',
        ];
        this.cssVariables = {};
        this.paletteCssVariables = {};
        this.cssVariablesSubject = new BehaviorSubject({});
        this.paletteSubject = new BehaviorSubject([]);
        this.displaySubject = new BehaviorSubject(false);
        this.ready1 = new Subject();
        this.ready2 = new Subject();
        this.ready = combineLatest([this.ready1, this.ready2]).pipe(map(([val1, val2]) => val1 && val2));
    }
    getStylesFromCssFile() {
        const rootStyles = getComputedStyle(document.documentElement);
        this.cssVariableNames.forEach(variable => {
            if (rootStyles.getPropertyValue(variable).trim()) {
                if (variable.includes('original')) {
                    this.paletteCssVariables[variable] = rootStyles.getPropertyValue(variable).trim();
                }
                else if (!this.cssVariables[variable]) {
                    this.cssVariables[variable] = rootStyles.getPropertyValue(variable).trim();
                }
            }
        });
        this.cssVariablesSubject.next(Object.assign({}, this.cssVariables));
        this.paletteSubject.next(Object.values(this.paletteCssVariables));
        this.ready1.next(true);
    }
    registerElementRef(element) {
        // used in app component
        this.element = element;
    }
    getStylesFromConfigFile(renderer) {
        for (const name of this.cssVariableNames) {
            this.clientService.streamTranslation("colors." + name).subscribe(value => {
                if (value && value != ("colors." + name)) {
                    this.changeCssVariable(name, value, renderer);
                    this.cssVariablesSubject.next(Object.assign({}, this.cssVariables));
                }
            });
        }
        setTimeout(() => {
            this.ready2.next(true);
        }, 200);
    }
    changeCssVariable(name, newValue, renderer) {
        this.cssVariables[name] = newValue;
        this.overrideCssProperties(renderer);
    }
    overrideCssProperties(renderer) {
        let style = '';
        for (const variable in this.cssVariables) {
            style += `${variable}: ${this.cssVariables[variable]};\n`;
        }
        if (this.element) {
            renderer.setProperty(this.element.nativeElement, 'style', style);
        }
    }
    save() {
        for (const variable in this.cssVariables) {
            this.clientService.next("colors." + variable, this.cssVariables[variable]);
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.10", ngImport: i0, type: ChangeColorsService, deps: [{ token: i1.TranslationClientService }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "17.3.10", ngImport: i0, type: ChangeColorsService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.10", ngImport: i0, type: ChangeColorsService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: () => [{ type: i1.TranslationClientService }] });
//# sourceMappingURL=data:application/json;base64,