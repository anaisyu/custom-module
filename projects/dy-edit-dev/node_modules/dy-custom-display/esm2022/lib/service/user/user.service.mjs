import { Inject, Injectable, PLATFORM_ID } from '@angular/core';
import { map } from "rxjs";
import { isPlatformBrowser } from "@angular/common";
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
export class UserService {
    constructor(http, backendUrl, _platformId) {
        this.http = http;
        this.backendUrl = backendUrl;
        this._platformId = _platformId;
    }
    getUser() {
        return this.http.get(this.backendUrl + '/user', { transferCache: false }).pipe(map(x => {
            this.user = x;
            return x;
        }));
    }
    isAdmin() {
        return this.user ? this.hasAdminRole(this.user.roles) : this.backendUrl.includes('localhost');
    }
    isSuperAdmin() {
        return (this.user && this.user.email) ? (this.hasAdminRole(this.user.roles) && this.user.email.includes('dahn')) : false;
    }
    hasAdminRole(roles) {
        return roles.includes('ROLE_ADMIN') || this.backendUrl.includes('localhost');
    }
    isAdminOrRedirect() {
        if (isPlatformBrowser(this._platformId)) {
            this.getUser().subscribe({
                next: user => {
                    if (!this.hasAdminRole(user.roles)) {
                        window.location.href = this.backendUrl + "/login";
                    }
                },
                error: err => {
                    console.log(err);
                    if (!this.backendUrl.includes('localhost')) {
                        window.location.href = this.backendUrl + "/login";
                    }
                }
            });
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.10", ngImport: i0, type: UserService, deps: [{ token: i1.HttpClient }, { token: 'backendUrl' }, { token: PLATFORM_ID }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "17.3.10", ngImport: i0, type: UserService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.10", ngImport: i0, type: UserService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: () => [{ type: i1.HttpClient }, { type: undefined, decorators: [{
                    type: Inject,
                    args: ['backendUrl']
                }] }, { type: Object, decorators: [{
                    type: Inject,
                    args: [PLATFORM_ID]
                }] }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXNlci5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvY3VzdG9tLWRpc3BsYXkvc3JjL2xpYi9zZXJ2aWNlL3VzZXIvdXNlci5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBQyxNQUFNLEVBQUUsVUFBVSxFQUFFLFdBQVcsRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUU5RCxPQUFPLEVBQUMsR0FBRyxFQUFhLE1BQU0sTUFBTSxDQUFDO0FBRXJDLE9BQU8sRUFBQyxpQkFBaUIsRUFBQyxNQUFNLGlCQUFpQixDQUFDOzs7QUFLbEQsTUFBTSxPQUFPLFdBQVc7SUFHdEIsWUFBb0IsSUFBZ0IsRUFBZ0MsVUFBa0IsRUFBK0IsV0FBbUI7UUFBcEgsU0FBSSxHQUFKLElBQUksQ0FBWTtRQUFnQyxlQUFVLEdBQVYsVUFBVSxDQUFRO1FBQStCLGdCQUFXLEdBQVgsV0FBVyxDQUFRO0lBQ3hJLENBQUM7SUFFRCxPQUFPO1FBQ0wsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBTyxJQUFJLENBQUMsVUFBVSxHQUFHLE9BQU8sRUFBRSxFQUFDLGFBQWEsRUFBRSxLQUFLLEVBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQ3BGLENBQUMsQ0FBQyxFQUFFO1lBQ0YsSUFBSSxDQUFDLElBQUksR0FBRyxDQUFDLENBQUE7WUFDYixPQUFPLENBQUMsQ0FBQztRQUNYLENBQUMsQ0FDRixDQUFDLENBQUM7SUFDTCxDQUFDO0lBRUQsT0FBTztRQUNMLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLFFBQVEsQ0FBQyxXQUFXLENBQUMsQ0FBQztJQUNoRyxDQUFDO0lBRUQsWUFBWTtRQUNWLE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUM7SUFDM0gsQ0FBQztJQUVPLFlBQVksQ0FBQyxLQUFlO1FBQ2xDLE9BQU8sS0FBSyxDQUFDLFFBQVEsQ0FBQyxZQUFZLENBQUMsSUFBSSxJQUFJLENBQUMsVUFBVSxDQUFDLFFBQVEsQ0FBQyxXQUFXLENBQUMsQ0FBQztJQUMvRSxDQUFDO0lBRUQsaUJBQWlCO1FBQ2YsSUFBSSxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLEVBQUU7WUFDdkMsSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDLFNBQVMsQ0FBQztnQkFDdkIsSUFBSSxFQUFFLElBQUksQ0FBQyxFQUFFO29CQUNYLElBQUksQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRTt3QkFDbEMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDLFVBQVUsR0FBRyxRQUFRLENBQUE7cUJBQ2xEO2dCQUNILENBQUM7Z0JBQ0QsS0FBSyxFQUFFLEdBQUcsQ0FBQyxFQUFFO29CQUNYLE9BQU8sQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUE7b0JBQ2hCLElBQUksQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLFFBQVEsQ0FBQyxXQUFXLENBQUMsRUFBRTt3QkFDMUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDLFVBQVUsR0FBRyxRQUFRLENBQUE7cUJBQ2xEO2dCQUNILENBQUM7YUFDRixDQUFDLENBQUE7U0FDSDtJQUNILENBQUM7K0dBM0NVLFdBQVcsNENBR3dCLFlBQVksYUFBc0MsV0FBVzttSEFIaEcsV0FBVyxjQUZWLE1BQU07OzRGQUVQLFdBQVc7a0JBSHZCLFVBQVU7bUJBQUM7b0JBQ1YsVUFBVSxFQUFFLE1BQU07aUJBQ25COzswQkFJd0MsTUFBTTsyQkFBQyxZQUFZOzswQkFBK0IsTUFBTTsyQkFBQyxXQUFXIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtJbmplY3QsIEluamVjdGFibGUsIFBMQVRGT1JNX0lEfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7SHR0cENsaWVudH0gZnJvbSBcIkBhbmd1bGFyL2NvbW1vbi9odHRwXCI7XG5pbXBvcnQge21hcCwgT2JzZXJ2YWJsZX0gZnJvbSBcInJ4anNcIjtcbmltcG9ydCB7VXNlcn0gZnJvbSBcIi4uLy4uL2VudGl0aWVzL3VzZXJcIjtcbmltcG9ydCB7aXNQbGF0Zm9ybUJyb3dzZXJ9IGZyb20gXCJAYW5ndWxhci9jb21tb25cIjtcblxuQEluamVjdGFibGUoe1xuICBwcm92aWRlZEluOiAncm9vdCdcbn0pXG5leHBvcnQgY2xhc3MgVXNlclNlcnZpY2Uge1xuICBwcml2YXRlIHVzZXI/OiBVc2VyO1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgaHR0cDogSHR0cENsaWVudCwgQEluamVjdCgnYmFja2VuZFVybCcpIHByaXZhdGUgYmFja2VuZFVybDogc3RyaW5nLCBASW5qZWN0KFBMQVRGT1JNX0lEKSBwcml2YXRlIF9wbGF0Zm9ybUlkOiBPYmplY3QpIHtcbiAgfVxuXG4gIGdldFVzZXIoKTogT2JzZXJ2YWJsZTxVc2VyPiB7XG4gICAgcmV0dXJuIHRoaXMuaHR0cC5nZXQ8VXNlcj4odGhpcy5iYWNrZW5kVXJsICsgJy91c2VyJywge3RyYW5zZmVyQ2FjaGU6IGZhbHNlfSkucGlwZShtYXAoXG4gICAgICB4ID0+IHtcbiAgICAgICAgdGhpcy51c2VyID0geFxuICAgICAgICByZXR1cm4geDtcbiAgICAgIH1cbiAgICApKTtcbiAgfVxuXG4gIGlzQWRtaW4oKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMudXNlciA/IHRoaXMuaGFzQWRtaW5Sb2xlKHRoaXMudXNlci5yb2xlcykgOiB0aGlzLmJhY2tlbmRVcmwuaW5jbHVkZXMoJ2xvY2FsaG9zdCcpO1xuICB9XG5cbiAgaXNTdXBlckFkbWluKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiAodGhpcy51c2VyICYmIHRoaXMudXNlci5lbWFpbCkgPyAodGhpcy5oYXNBZG1pblJvbGUodGhpcy51c2VyLnJvbGVzKSAmJiB0aGlzLnVzZXIuZW1haWwuaW5jbHVkZXMoJ2RhaG4nKSkgOiBmYWxzZTtcbiAgfVxuXG4gIHByaXZhdGUgaGFzQWRtaW5Sb2xlKHJvbGVzOiBzdHJpbmdbXSk6IGJvb2xlYW4ge1xuICAgIHJldHVybiByb2xlcy5pbmNsdWRlcygnUk9MRV9BRE1JTicpIHx8IHRoaXMuYmFja2VuZFVybC5pbmNsdWRlcygnbG9jYWxob3N0Jyk7XG4gIH1cblxuICBpc0FkbWluT3JSZWRpcmVjdCgpOiB2b2lkIHtcbiAgICBpZiAoaXNQbGF0Zm9ybUJyb3dzZXIodGhpcy5fcGxhdGZvcm1JZCkpIHtcbiAgICAgIHRoaXMuZ2V0VXNlcigpLnN1YnNjcmliZSh7XG4gICAgICAgIG5leHQ6IHVzZXIgPT4ge1xuICAgICAgICAgIGlmICghdGhpcy5oYXNBZG1pblJvbGUodXNlci5yb2xlcykpIHtcbiAgICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbi5ocmVmID0gdGhpcy5iYWNrZW5kVXJsICsgXCIvbG9naW5cIlxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgZXJyb3I6IGVyciA9PiB7XG4gICAgICAgICAgY29uc29sZS5sb2coZXJyKVxuICAgICAgICAgIGlmICghdGhpcy5iYWNrZW5kVXJsLmluY2x1ZGVzKCdsb2NhbGhvc3QnKSkge1xuICAgICAgICAgICAgd2luZG93LmxvY2F0aW9uLmhyZWYgPSB0aGlzLmJhY2tlbmRVcmwgKyBcIi9sb2dpblwiXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9KVxuICAgIH1cbiAgfVxufVxuIl19