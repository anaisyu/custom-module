import { computed, Inject, Injectable } from '@angular/core';
import { BehaviorSubject, of } from "rxjs";
import { TranslateHttpLoader } from "@ngx-translate/http-loader";
import * as i0 from "@angular/core";
import * as i1 from "@ngx-translate/core";
import * as i2 from "../notifications/notification.service";
import * as i3 from "@angular/common/http";
import * as i4 from "../local-storage/local-storage.service";
export class TranslationClientService {
    static { this.COOKIE_NAME = "site-text"; }
    constructor(service, notificationService, http, localStorageService, backendUrl) {
        this.service = service;
        this.notificationService = notificationService;
        this.http = http;
        this.localStorageService = localStorageService;
        this.backendUrl = backendUrl;
        this.editSubject = new BehaviorSubject(false);
        // Retrieve object from the cookie
        const objFromCookie = localStorageService.getValue(TranslationClientService.COOKIE_NAME);
        this.changes = computed(() => objFromCookie() ? JSON.parse(objFromCookie()) : {});
    }
    static merge(left, right) {
        if (typeof left !== 'object') {
            return right;
        }
        let res = Object.assign({}, left);
        for (const key of Object.keys(right)) {
            if (left[key]) {
                res[key] = this.merge(left[key], right[key]);
            }
            else {
                res[key] = right[key];
            }
        }
        return res;
    }
    next(key, data) {
        let set = this.changes();
        const keys = key.split('.');
        for (let i = 0; i < keys.length - 1; i++) {
            if (!set[keys[i]]) {
                set[keys[i]] = {};
            }
            set = set[keys[i]];
        }
        if (!set[keys[keys.length - 1]]) {
            set[keys[keys.length - 1]] = {};
        }
        set[keys[keys.length - 1]] = data;
        this.saveCookie();
    }
    save(lang = 'fr') {
        const loader = new TranslateHttpLoader(this.http, this.backendUrl + '/assets/get/');
        loader.getTranslation(lang).subscribe(original => {
            this.http.post(this.backendUrl + '/assets/save-new/' + lang, TranslationClientService.merge(original, this.changes())).subscribe({
                next: response => {
                    this.notificationService.newMessage('Vos modifications ont bien été sauvegardées.');
                    this.localStorageService.setValue(TranslationClientService.COOKIE_NAME, null);
                }, error: (msg) => {
                    console.error(msg);
                    this.notificationService.newError('Echec lors de la sauvegarde. Merci de réessayer.');
                }
            });
        });
    }
    cancel() {
        this.localStorageService.setValue(TranslationClientService.COOKIE_NAME, null);
        this.refresh();
    }
    refresh() {
        window.location.href = window.location.toString();
    }
    saveCookie(minutesExpire = 15) {
        if (!this.changes() || Object.keys(this.changes()).length == 0) {
            return;
        }
        const date = new Date(Date.now());
        date.setMinutes(date.getMinutes() + minutesExpire);
        this.localStorageService.setValue(TranslationClientService.COOKIE_NAME, JSON.stringify(this.changes()), minutesExpire * 60 * 1000);
    }
    streamTranslation(key) {
        let set = this.changes();
        const keys = key.split('.');
        for (let i = 0; i < keys.length - 1; i++) {
            if (!set[keys[i]]) {
                return this.service.stream(key);
            }
            set = set[keys[i]];
        }
        if (set[keys[keys.length - 1]]) {
            return of(set[keys[keys.length - 1]]);
        }
        return this.service.stream(key);
    }
    sync(lang = 'fr') {
        this.http.post(this.backendUrl + '/assets/sync/' + lang, {}).subscribe({
            next: response => {
                this.notificationService.newMessage('Synced');
            }, error: (msg) => {
                console.error(msg);
                this.notificationService.newError('Sync failed');
            }
        });
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.10", ngImport: i0, type: TranslationClientService, deps: [{ token: i1.TranslateService }, { token: i2.NotificationService }, { token: i3.HttpClient }, { token: i4.LocalStorageService }, { token: 'backendUrl' }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "17.3.10", ngImport: i0, type: TranslationClientService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.10", ngImport: i0, type: TranslationClientService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: () => [{ type: i1.TranslateService }, { type: i2.NotificationService }, { type: i3.HttpClient }, { type: i4.LocalStorageService }, { type: undefined, decorators: [{
                    type: Inject,
                    args: ['backendUrl']
                }] }] });
//# sourceMappingURL=data:application/json;base64,