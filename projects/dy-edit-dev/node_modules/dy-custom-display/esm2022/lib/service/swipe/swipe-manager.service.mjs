import { EventEmitter, Injectable } from '@angular/core';
import * as i0 from "@angular/core";
export class SwipeManagerService {
    constructor() {
        this.swipeRight = new EventEmitter();
        this.swipeLeft = new EventEmitter();
        this.xDown = null;
        this.yDown = null;
        this.handleStart = (event) => {
            this.handleTouchStart(event);
        };
        this.handleMove = (event) => {
            this.handleTouchMove(event);
        };
        this.keyPress = (event) => {
            if (event.code == 'ArrowLeft') {
                this.left();
            }
            if (event.code == 'ArrowRight') {
                this.right();
            }
        };
    }
    getTouches(evt) {
        return evt.touches || // browser API
            evt.originalEvent.touches; // jQuery
    }
    handleTouchStart(evt) {
        const firstTouch = this.getTouches(evt)[0];
        this.xDown = firstTouch.clientX;
        this.yDown = firstTouch.clientY;
    }
    ;
    right() {
        console.log('right');
        this.swipeRight.emit();
    }
    left() {
        console.log('left');
        this.swipeLeft.emit();
    }
    handleTouchMove(evt) {
        if (!this.xDown || !this.yDown) {
            return;
        }
        const xUp = evt.touches[0].clientX;
        const yUp = evt.touches[0].clientY;
        const xDiff = this.xDown - xUp;
        const yDiff = this.yDown - yUp;
        if (Math.abs(xDiff) > Math.abs(yDiff)) { /*most significant*/
            if (xDiff > 0) {
                /* right swipe */
                this.right();
            }
            else {
                /* left swipe */
                this.left();
            }
        }
        else {
            if (yDiff > 0) {
                /* down swipe */
            }
            else {
                /* up swipe */
            }
        }
        /* reset values */
        this.xDown = null;
        this.yDown = null;
    }
    ;
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.10", ngImport: i0, type: SwipeManagerService, deps: [], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "17.3.10", ngImport: i0, type: SwipeManagerService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.10", ngImport: i0, type: SwipeManagerService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: () => [] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3dpcGUtbWFuYWdlci5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvY3VzdG9tLWRpc3BsYXkvc3JjL2xpYi9zZXJ2aWNlL3N3aXBlL3N3aXBlLW1hbmFnZXIuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUMsWUFBWSxFQUFFLFVBQVUsRUFBQyxNQUFNLGVBQWUsQ0FBQzs7QUFLdkQsTUFBTSxPQUFPLG1CQUFtQjtJQU05QjtRQUxBLGVBQVUsR0FBdUIsSUFBSSxZQUFZLEVBQVEsQ0FBQztRQUMxRCxjQUFTLEdBQXVCLElBQUksWUFBWSxFQUFRLENBQUM7UUFDakQsVUFBSyxHQUFHLElBQUksQ0FBQztRQUNiLFVBQUssR0FBUSxJQUFJLENBQUM7UUFLMUIsZ0JBQVcsR0FBRyxDQUFDLEtBQWlCLEVBQUUsRUFBRTtZQUNsQyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsS0FBSyxDQUFDLENBQUE7UUFDOUIsQ0FBQyxDQUFDO1FBRUYsZUFBVSxHQUFHLENBQUMsS0FBaUIsRUFBRSxFQUFFO1lBQ2pDLElBQUksQ0FBQyxlQUFlLENBQUMsS0FBSyxDQUFDLENBQUE7UUFDN0IsQ0FBQyxDQUFDO1FBRUYsYUFBUSxHQUFHLENBQUMsS0FBb0IsRUFBRSxFQUFFO1lBQ2xDLElBQUksS0FBSyxDQUFDLElBQUksSUFBSSxXQUFXLEVBQUU7Z0JBQzdCLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQzthQUNiO1lBQ0QsSUFBSSxLQUFLLENBQUMsSUFBSSxJQUFJLFlBQVksRUFBRTtnQkFDOUIsSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDO2FBQ2Q7UUFDSCxDQUFDLENBQUE7SUFqQkQsQ0FBQztJQW1CTyxVQUFVLENBQUMsR0FBUTtRQUN6QixPQUFPLEdBQUcsQ0FBQyxPQUFPLElBQWdCLGNBQWM7WUFDOUMsR0FBRyxDQUFDLGFBQWEsQ0FBQyxPQUFPLENBQUMsQ0FBQyxTQUFTO0lBQ3hDLENBQUM7SUFFTyxnQkFBZ0IsQ0FBQyxHQUFRO1FBQy9CLE1BQU0sVUFBVSxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDM0MsSUFBSSxDQUFDLEtBQUssR0FBRyxVQUFVLENBQUMsT0FBTyxDQUFDO1FBQ2hDLElBQUksQ0FBQyxLQUFLLEdBQUcsVUFBVSxDQUFDLE9BQU8sQ0FBQztJQUNsQyxDQUFDO0lBQUEsQ0FBQztJQUVNLEtBQUs7UUFDWCxPQUFPLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxDQUFBO1FBRXBCLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxFQUFFLENBQUE7SUFDeEIsQ0FBQztJQUVPLElBQUk7UUFDVixPQUFPLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFBO1FBQ25CLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxFQUFFLENBQUE7SUFDdkIsQ0FBQztJQUVPLGVBQWUsQ0FBQyxHQUFRO1FBQzlCLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRTtZQUM5QixPQUFPO1NBQ1I7UUFFRCxNQUFNLEdBQUcsR0FBRyxHQUFHLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQztRQUNuQyxNQUFNLEdBQUcsR0FBRyxHQUFHLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQztRQUVuQyxNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsS0FBSyxHQUFHLEdBQUcsQ0FBQztRQUMvQixNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsS0FBSyxHQUFHLEdBQUcsQ0FBQztRQUUvQixJQUFJLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsRUFBRSxFQUFDLG9CQUFvQjtZQUMxRCxJQUFJLEtBQUssR0FBRyxDQUFDLEVBQUU7Z0JBQ2IsaUJBQWlCO2dCQUNqQixJQUFJLENBQUMsS0FBSyxFQUFFLENBQUM7YUFDZDtpQkFBTTtnQkFDTCxnQkFBZ0I7Z0JBQ2hCLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQTthQUNaO1NBQ0Y7YUFBTTtZQUNMLElBQUksS0FBSyxHQUFHLENBQUMsRUFBRTtnQkFDYixnQkFBZ0I7YUFDakI7aUJBQU07Z0JBQ0wsY0FBYzthQUNmO1NBQ0Y7UUFDRCxrQkFBa0I7UUFDbEIsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUM7UUFDbEIsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUM7SUFDcEIsQ0FBQztJQUFBLENBQUM7K0dBN0VTLG1CQUFtQjttSEFBbkIsbUJBQW1CLGNBRmxCLE1BQU07OzRGQUVQLG1CQUFtQjtrQkFIL0IsVUFBVTttQkFBQztvQkFDVixVQUFVLEVBQUUsTUFBTTtpQkFDbkIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0V2ZW50RW1pdHRlciwgSW5qZWN0YWJsZX0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbkBJbmplY3RhYmxlKHtcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnXG59KVxuZXhwb3J0IGNsYXNzIFN3aXBlTWFuYWdlclNlcnZpY2Uge1xuICBzd2lwZVJpZ2h0OiBFdmVudEVtaXR0ZXI8dm9pZD4gPSBuZXcgRXZlbnRFbWl0dGVyPHZvaWQ+KCk7XG4gIHN3aXBlTGVmdDogRXZlbnRFbWl0dGVyPHZvaWQ+ID0gbmV3IEV2ZW50RW1pdHRlcjx2b2lkPigpO1xuICBwcml2YXRlIHhEb3duID0gbnVsbDtcbiAgcHJpdmF0ZSB5RG93bjogYW55ID0gbnVsbDtcblxuICBjb25zdHJ1Y3RvcigpIHtcbiAgfVxuXG4gIGhhbmRsZVN0YXJ0ID0gKGV2ZW50OiBUb3VjaEV2ZW50KSA9PiB7XG4gICAgdGhpcy5oYW5kbGVUb3VjaFN0YXJ0KGV2ZW50KVxuICB9O1xuXG4gIGhhbmRsZU1vdmUgPSAoZXZlbnQ6IFRvdWNoRXZlbnQpID0+IHtcbiAgICB0aGlzLmhhbmRsZVRvdWNoTW92ZShldmVudClcbiAgfTtcblxuICBrZXlQcmVzcyA9IChldmVudDogS2V5Ym9hcmRFdmVudCkgPT4ge1xuICAgIGlmIChldmVudC5jb2RlID09ICdBcnJvd0xlZnQnKSB7XG4gICAgICB0aGlzLmxlZnQoKTtcbiAgICB9XG4gICAgaWYgKGV2ZW50LmNvZGUgPT0gJ0Fycm93UmlnaHQnKSB7XG4gICAgICB0aGlzLnJpZ2h0KCk7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBnZXRUb3VjaGVzKGV2dDogYW55KTogYW55IHtcbiAgICByZXR1cm4gZXZ0LnRvdWNoZXMgfHwgICAgICAgICAgICAgLy8gYnJvd3NlciBBUElcbiAgICAgIGV2dC5vcmlnaW5hbEV2ZW50LnRvdWNoZXM7IC8vIGpRdWVyeVxuICB9XG5cbiAgcHJpdmF0ZSBoYW5kbGVUb3VjaFN0YXJ0KGV2dDogYW55KTogYW55IHtcbiAgICBjb25zdCBmaXJzdFRvdWNoID0gdGhpcy5nZXRUb3VjaGVzKGV2dClbMF07XG4gICAgdGhpcy54RG93biA9IGZpcnN0VG91Y2guY2xpZW50WDtcbiAgICB0aGlzLnlEb3duID0gZmlyc3RUb3VjaC5jbGllbnRZO1xuICB9O1xuXG4gIHByaXZhdGUgcmlnaHQoKTogdm9pZCB7XG4gICAgY29uc29sZS5sb2coJ3JpZ2h0JylcblxuICAgIHRoaXMuc3dpcGVSaWdodC5lbWl0KClcbiAgfVxuXG4gIHByaXZhdGUgbGVmdCgpOiB2b2lkIHtcbiAgICBjb25zb2xlLmxvZygnbGVmdCcpXG4gICAgdGhpcy5zd2lwZUxlZnQuZW1pdCgpXG4gIH1cblxuICBwcml2YXRlIGhhbmRsZVRvdWNoTW92ZShldnQ6IGFueSk6IGFueSB7XG4gICAgaWYgKCF0aGlzLnhEb3duIHx8ICF0aGlzLnlEb3duKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3QgeFVwID0gZXZ0LnRvdWNoZXNbMF0uY2xpZW50WDtcbiAgICBjb25zdCB5VXAgPSBldnQudG91Y2hlc1swXS5jbGllbnRZO1xuXG4gICAgY29uc3QgeERpZmYgPSB0aGlzLnhEb3duIC0geFVwO1xuICAgIGNvbnN0IHlEaWZmID0gdGhpcy55RG93biAtIHlVcDtcblxuICAgIGlmIChNYXRoLmFicyh4RGlmZikgPiBNYXRoLmFicyh5RGlmZikpIHsvKm1vc3Qgc2lnbmlmaWNhbnQqL1xuICAgICAgaWYgKHhEaWZmID4gMCkge1xuICAgICAgICAvKiByaWdodCBzd2lwZSAqL1xuICAgICAgICB0aGlzLnJpZ2h0KCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvKiBsZWZ0IHN3aXBlICovXG4gICAgICAgIHRoaXMubGVmdCgpXG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmICh5RGlmZiA+IDApIHtcbiAgICAgICAgLyogZG93biBzd2lwZSAqL1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLyogdXAgc3dpcGUgKi9cbiAgICAgIH1cbiAgICB9XG4gICAgLyogcmVzZXQgdmFsdWVzICovXG4gICAgdGhpcy54RG93biA9IG51bGw7XG4gICAgdGhpcy55RG93biA9IG51bGw7XG4gIH07XG59XG4iXX0=