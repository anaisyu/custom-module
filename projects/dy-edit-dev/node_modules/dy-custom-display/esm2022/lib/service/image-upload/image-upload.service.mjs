import { Inject, Injectable } from '@angular/core';
import { filter, map, switchMap } from "rxjs";
import { UploadImageModalComponent } from "../../components/images/add-dyimage/upload-image-modal/upload-image-modal.component";
import * as i0 from "@angular/core";
import * as i1 from "@angular/material/dialog";
import * as i2 from "@angular/common/http";
export class ImageUploadService {
    constructor(dialog, http, imageUploadUrl) {
        this.dialog = dialog;
        this.http = http;
        this.imageUploadUrl = imageUploadUrl;
    }
    uploadImage(file) {
        const formData = new FormData();
        formData.append('file', file, file.name);
        return this.http.post(this.imageUploadUrl + '/uploads-v2/', formData);
    }
    openDialog() {
        const dialogRef = this.dialog.open(UploadImageModalComponent);
        return dialogRef.afterClosed().pipe(filter(result => result?.alt && result?.file), switchMap((result) => {
            return this.uploadImage(result.file).pipe(map(uploadResponse => { return { alt: result.alt, urls: uploadResponse }; }));
        }));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.10", ngImport: i0, type: ImageUploadService, deps: [{ token: i1.MatDialog }, { token: i2.HttpClient }, { token: 'imageupload_url' }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "17.3.10", ngImport: i0, type: ImageUploadService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.10", ngImport: i0, type: ImageUploadService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: () => [{ type: i1.MatDialog }, { type: i2.HttpClient }, { type: undefined, decorators: [{
                    type: Inject,
                    args: ['imageupload_url']
                }] }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW1hZ2UtdXBsb2FkLnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9jdXN0b20tZGlzcGxheS9zcmMvbGliL3NlcnZpY2UvaW1hZ2UtdXBsb2FkL2ltYWdlLXVwbG9hZC5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBQyxNQUFNLEVBQUUsVUFBVSxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBRWpELE9BQU8sRUFBQyxNQUFNLEVBQUUsR0FBRyxFQUFjLFNBQVMsRUFBQyxNQUFNLE1BQU0sQ0FBQztBQUd4RCxPQUFPLEVBQUMseUJBQXlCLEVBQUMsTUFBTSxxRkFBcUYsQ0FBQzs7OztBQUs5SCxNQUFNLE9BQU8sa0JBQWtCO0lBRTdCLFlBQW1CLE1BQWlCLEVBQVUsSUFBZ0IsRUFBcUMsY0FBc0I7UUFBdEcsV0FBTSxHQUFOLE1BQU0sQ0FBVztRQUFVLFNBQUksR0FBSixJQUFJLENBQVk7UUFBcUMsbUJBQWMsR0FBZCxjQUFjLENBQVE7SUFBSSxDQUFDO0lBRTlILFdBQVcsQ0FBQyxJQUFTO1FBQ25CLE1BQU0sUUFBUSxHQUFHLElBQUksUUFBUSxFQUFFLENBQUE7UUFDL0IsUUFBUSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUN6QyxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFzQixJQUFJLENBQUMsY0FBYyxHQUFHLGNBQWMsRUFBRSxRQUFRLENBQUMsQ0FBQztJQUM3RixDQUFDO0lBRUQsVUFBVTtRQUNSLE1BQU0sU0FBUyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLHlCQUF5QixDQUFDLENBQUM7UUFFOUQsT0FBTyxTQUFTLENBQUMsV0FBVyxFQUFFLENBQUMsSUFBSSxDQUNqQyxNQUFNLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxNQUFNLEVBQUUsR0FBRyxJQUFJLE1BQU0sRUFBRSxJQUFJLENBQUMsRUFDN0MsU0FBUyxDQUFDLENBQUMsTUFBTSxFQUFFLEVBQUU7WUFDbkIsT0FBTyxJQUFJLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLGNBQWMsQ0FBQyxFQUFFLEdBQUUsT0FBTyxFQUFDLEdBQUcsRUFBRSxNQUFNLENBQUMsR0FBRyxFQUFFLElBQUksRUFBRSxjQUFjLEVBQUMsQ0FBQSxDQUFBLENBQUMsQ0FBQyxDQUFDLENBQUE7UUFDcEgsQ0FBQyxDQUFDLENBQ0gsQ0FBQztJQUNKLENBQUM7K0dBbkJVLGtCQUFrQixxRUFFMkMsaUJBQWlCO21IQUY5RSxrQkFBa0IsY0FGakIsTUFBTTs7NEZBRVAsa0JBQWtCO2tCQUg5QixVQUFVO21CQUFDO29CQUNWLFVBQVUsRUFBRSxNQUFNO2lCQUNuQjs7MEJBR2tFLE1BQU07MkJBQUMsaUJBQWlCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtJbmplY3QsIEluamVjdGFibGV9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtIdHRwQ2xpZW50fSBmcm9tIFwiQGFuZ3VsYXIvY29tbW9uL2h0dHBcIjtcbmltcG9ydCB7ZmlsdGVyLCBtYXAsIE9ic2VydmFibGUsIHN3aXRjaE1hcH0gZnJvbSBcInJ4anNcIjtcbmltcG9ydCB7VXBsb2FkSW1hZ2VSZXNwb25zZX0gZnJvbSBcIi4uLy4uL21vZGVsL2ltYWdlcy91cGxvYWQtaW1hZ2UtcmVzcG9uc2VcIjtcbmltcG9ydCB7TWF0RGlhbG9nfSBmcm9tIFwiQGFuZ3VsYXIvbWF0ZXJpYWwvZGlhbG9nXCI7XG5pbXBvcnQge1VwbG9hZEltYWdlTW9kYWxDb21wb25lbnR9IGZyb20gXCIuLi8uLi9jb21wb25lbnRzL2ltYWdlcy9hZGQtZHlpbWFnZS91cGxvYWQtaW1hZ2UtbW9kYWwvdXBsb2FkLWltYWdlLW1vZGFsLmNvbXBvbmVudFwiO1xuXG5ASW5qZWN0YWJsZSh7XG4gIHByb3ZpZGVkSW46ICdyb290J1xufSlcbmV4cG9ydCBjbGFzcyBJbWFnZVVwbG9hZFNlcnZpY2Uge1xuXG4gIGNvbnN0cnVjdG9yKHB1YmxpYyBkaWFsb2c6IE1hdERpYWxvZywgcHJpdmF0ZSBodHRwOiBIdHRwQ2xpZW50LCBASW5qZWN0KCdpbWFnZXVwbG9hZF91cmwnKSBwcml2YXRlIGltYWdlVXBsb2FkVXJsOiBzdHJpbmcpIHsgfVxuXG4gIHVwbG9hZEltYWdlKGZpbGU6IGFueSk6IE9ic2VydmFibGU8VXBsb2FkSW1hZ2VSZXNwb25zZT4ge1xuICAgIGNvbnN0IGZvcm1EYXRhID0gbmV3IEZvcm1EYXRhKClcbiAgICBmb3JtRGF0YS5hcHBlbmQoJ2ZpbGUnLCBmaWxlLCBmaWxlLm5hbWUpO1xuICAgIHJldHVybiB0aGlzLmh0dHAucG9zdDxVcGxvYWRJbWFnZVJlc3BvbnNlPih0aGlzLmltYWdlVXBsb2FkVXJsICsgJy91cGxvYWRzLXYyLycsIGZvcm1EYXRhKTtcbiAgfVxuXG4gIG9wZW5EaWFsb2coKTogT2JzZXJ2YWJsZTx7IHVybHM6IFVwbG9hZEltYWdlUmVzcG9uc2U7IGFsdDogc3RyaW5nIH0+IHtcbiAgICBjb25zdCBkaWFsb2dSZWYgPSB0aGlzLmRpYWxvZy5vcGVuKFVwbG9hZEltYWdlTW9kYWxDb21wb25lbnQpO1xuXG4gICAgcmV0dXJuIGRpYWxvZ1JlZi5hZnRlckNsb3NlZCgpLnBpcGUoXG4gICAgICBmaWx0ZXIocmVzdWx0ID0+IHJlc3VsdD8uYWx0ICYmIHJlc3VsdD8uZmlsZSksXG4gICAgICBzd2l0Y2hNYXAoKHJlc3VsdCkgPT4ge1xuICAgICAgICByZXR1cm4gdGhpcy51cGxvYWRJbWFnZShyZXN1bHQuZmlsZSkucGlwZShtYXAodXBsb2FkUmVzcG9uc2UgPT4ge3JldHVybiB7YWx0OiByZXN1bHQuYWx0LCB1cmxzOiB1cGxvYWRSZXNwb25zZX19KSlcbiAgICAgIH0pLFxuICAgICk7XG4gIH1cbn1cbiJdfQ==